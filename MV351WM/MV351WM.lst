
MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 1
MV351WM


                        1  ;***************************************************
                                                      *************************
                        2  ;
                        3  ;                                MV351WM.asm
                        4  ;
                        5  ;        Real Time Variable Display and "digital 
                                                       dashboard" for MSnS351WM
                        6  ;
                        7  ;                         By Robert Hiebert 2010
                        8  ;
                        9  ; - Rev 1: 4/16/12 Add configurable bank fuel flow 
                                            constants for fuel burn calculation
                       10  ;          fine tuning
                       11  ;
                       12  ;***************************************************
                                                      *************************
                       13  
                       14  ;***************************************************
                                   ********************************************
                       15  ;
                       16  ; ------------------------------------------- 
                             Operation ----------------------------------------
                       17  ;
                       18  ; On power up, the unit defaults to display screen 
                                                                            #0.
                       19  ; The user has a choice of 19,(0-18), screens which 
                                                     display the variables name
                       20  ; abreviation on the top line, and their correspondi
                                                         ng real time values on
                       21  ; the bottom line. The lower line is updated every 
                                                               250 miliseconds.
                       22  ; The earlier version, MV_ECU also had a constant 
                                                       configuration mode which
                       23  ; this version does not. This is a "display only" 
                                                                          unit.
                       24  ;
                       25  ; Screen 0 displays "ERPM MAP AFR CLT MAT" ; 
                                            Operating status 1 (default screen)
                       26  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmh
                                                                            rL"
                       27  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       28  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                       29  ; "CLT"  is Engine Coolant Temp in degrees F+40, 
                                                                     uses "clt"
                       30  ; "MAT"  is Manifold Air Temperature in degrees 
                                                               F+40, uses "mat"
                       31  ;
                       32  ; Screen 1 displays "TPP EOP EFP EXGT VLT" ; 
                                                      Operating status 2 screen
                       33  ; "TPP"  is Throttle position in percent, uses 
                                                                         "tpsp"
                       34  ; "EOP"  is Engine oil pressure in PSI, uses "oprs"
                       35  ; "EFP"  is Engine fuel pressure in PSI, uses "fprs"
                       36  ; "EXGT" is Engine exhaust gas temperature in 
                                                    degrees F, uses "egtH:egtL"
                       37  ; "VLT"  is Battery Voltage x 10, uses "volts"
                       38  ;


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 2
MV351WM


                       39  ; Screen 2 displays " ERPM AFR FDSC LTHR " ; Fuel 
                                                                    burn screen
                       40  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                       41  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                       42  ; "FDSC" is Fuel Delivery Injector On Time over a 1 
                                     second period in mmS, uses "fdSecH:fdSecL"
                       43  ; "LTHR" is Current fuel burn in L/Hr x 10, uses 
                                                                "ltrHrH:ltrHrL"
                       44  ;
                       45  ; Screen 3 displays "ERPM MAP AFR FTC PLW" ; Fuel 
                                                                    tune screen
                       46  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmh
                                                                            rL"
                       47  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       48  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                       49  ; "FTC"  is Fuel Trim Correction in percent, uses 
                                                                     "Ftrimcor"
                       50  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                       51  ;
                       52  ; Screen 4 displays "ERPM MAP TRA CTA MTA" ; 
                                                           Ignition tune screen
                       53  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmh
                                                                            rL"
                       54  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       55  ; "TRA"  is Ignition Trim Angle in degrees BTDC, 
                                                                  uses "trmAng"
                       56  ; "CTA"  is Calculated Timing Angle in degrees 
                                                            BTDC, uses "timAng"
                       57  ; "MTA"  is Monitored Ignition Timing Angle in 
                                                 degrees BTDC, uses "monTimAng"
                       58  ;
                       59  ; Screen 5 displays " GAM WCR ACR BCR TCR" ; 
                                                             Corrections screen
                       60  ; "GAM"  is Gamma Correction in percent, uses gammae
                       61  ; "WCR"  is Engine Coolant Correction in percent, 
                                                                  uses "warmcor
                       62  ; "ACR"  is Manifold Air Temperature Correction in 
                                                         percent, uses "aircor"
                       63  ; "BCR"  is Barometric Pressure Correction in 
                                                        percent, uses "barocor"
                       64  ; "TCR"  is Acceleration Correction in percent, 
                                                                uses "tpsaccel"
                       65  ;
                       66  ; Screen 6 displays " ego EGV LMD AFR FTC" ; EGO 
                                                                         screen
                       67  ; "ego"  is Exhaust Gas Oxygen ADC, uses "egoADC"
                       68  ; "EGV"  is Exhaust Gas Oxygen voltage x 10, uses 
                                                                         "egoV"
                       69  ; "LMD"  is Exhaust Gas Oxygen Lambda x 10, uses 
                                                                       "lambda"
                       70  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                       71  ; "FTC"  is Fuel Trim Correction in percent, uses 
                                                                     "Ftrimcor"
                       72  ;
                       73  ; Screen 7 displays " map MAP     BAR BCR" ; ADC 
                                                                       screen 1


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 3
MV351WM


                       74  ; "map"  is Manifold Pressure ADC, uses "mapADC"
                       75  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       76  ; "BAR"  is Barometric Pressure in KPA, uses 
                                                                    "barometer"
                       77  ; "BCR"  is Barometric Pressure Correction in 
                                                        percent, uses "barocor"
                       78  ;
                       79  ; Screen 8 displays " vlt VLT clt CLT WCR" ; ADC 
                                                                       screen 2
                       80  ; "vlt"  is Battery Voltage ADC, uses "battADC"
                       81  ; "VLT"  is Battery Voltage x 10, uses "volts"
                       82  ; "clt"  is Engine Coolant Temperature ADC, uses 
                                                                       "cltADC"
                       83  ; "CLT"  is Engine Coolant Temperature in degrees 
                                                               F+40, uses "clt"
                       84  ; "WCR"  is Engine Coolant Correction in percent, 
                                                                 uses "warmcor"
                       85  ;
                       86  ; Screen 9 displays "egt EXGT mat MAT ACR" ; ADC 
                                                                       screen 3
                       87  ; "egt"  is Exhaust Gas Temperature ADC, uses 
                                                                       "egtADC"
                       88  ; "EXGT" is Engine exhaust gas temperature in 
                                                    degrees F, uses "egtH:egtL"
                       89  ; "mat"  is Manifold Air Temperature ADC, uses 
                                                                       "matADC"
                       90  ; "MAT"  is Manifold Air Temperature in degrees 
                                                               F+40, uses "mat"
                       91  ; "ACR"  is Manifold Air Temperature Correction in 
                                                         percent, uses "aircor"
                       92  ;
                       93  ; Screen 10 displays " ftc  FTC  itc  TAF " ; ADC 
                                                                       screen 4
                       94  ; "ftc"  is Fuel trim ADC, uses "ftrimADC"
                       95  ; "FTC"  is Fuel Trim Correction in percent, uses 
                                                                     "Ftrimcor"
                       96  ; "itc"  is Ignition Trim Correction ADC, uses 
                                                                     "itrimADC"
                       97  ; "TAF"  is Ignition Trim Angle Factor, uses 
                                                                    "trmAngFac"
                       98  ;
                       99  ; Screen 11 displays " eop  EOP  efp  EFP " ; ADC 
                                                                       screen 5
                      100  ; "eop"  is Engine oil pressure ADC, uses "opADC"
                      101  ; "EOP"  is Engine oil pressure in PSI, uses "oprs"
                      102  ; "efp"  is Engine fuel pressure ADC, uses "fpADC"
                      103  ; "EFP"  is Engine fuel pressure in PSI, uses "fprs"
                      104  ;
                      105  ; Screen 12 displays "PWHR PLW FLD VEC DTY" ; 
                                                              Pulsewidth screen
                      106  ; "PWHR" is Pulse Width Hi Res in mmmS, uses 
                                                              "pwcalcH:pwcalcL"
                      107  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                      108  ; "FLD"  is Fuel Deleivery Pulse Width Lo Res in 
                                                                 mmS, uses "fd"
                      109  ; "VEC   is Volumetric Efficiency(Current VE table 
                                               value in percent), uses "vecurr"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 4
MV351WM


                      110  ; "DTY"  is Injector Duty Cycle in percent, uses 
                                                                         "duty"
                      111  ;
                      112  ; Screen 13 displays " ERPM PIPD MNPD SEC " ; 
                                                                  Period screen
                      113  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmh
                                                                            rL"
                      114  ;*; "PIPD" is PIP Period Predicted in mmmS, uses 
                                                            "pippprdH:pippprdL"
                      115  ; "PIPD" is PIP Period in mmmS, uses "tachH:tachL"
                      116  ; "MNPD" is Ignition Monitor Period in mmmS, uses 
                                                                  "monpH:monpL"
                      117  ; "SEC"  is Seconds Counter Lo byte, uses "secL"
                      118  ;
                      119  ; Screen 14 displays "ERPM MAP SAF DAF TAF" ; 
                                                         Ignition factor screen
                      120  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      121  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                      122  ; "SAF"  is Spark Angle Factor(Current ST table 
                                                       value), uses "spkAngFac"
                      123  ; "DAF"  is Delay Angle Factor, uses "dlyAngFac"
                      124  ; "TAF"  is Ignition Trim Angle Factor, uses 
                                                                    "trmAngFac"
                      125  ;
                      126  ; Screen 15 displays "ERPM TRA DLA CTA MTA" ; 
                                                          Ignition angle screen
                      127  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      128  ; "TRA"  is Ignition Trim Angle in degrees BTDC, 
                                                                  uses "trmAng"
                      129  ; "DLA"  is Ignition Delay Angle in degrees BTDC, 
                                                                  uses "dlyAng"
                      130  ; "CTA"  is Calculated Timing Angle in degrees 
                                                            BTDC, uses "timAng"
                      131  ; "MTA"  is Monitored Ignition Timing Angle in 
                                                 degrees BTDC, uses "monTimAng"
                      132  ;
                      133  ; Screen 16 displays "FP RN CR SW RW AC DC" ; 
                                         "portAbits", "Engine" bit field screen
                      134  ; "FP"   is Fuel Pump(portAbits 0)
                      135  ; "RN"   is Engine Running(engine 0)
                      136  ; "CR"   is Engine Cranking(engine 1)
                      137  ; "SW"   is Start Warmup(engine 2)
                      138  ; "RW"   is Run Warmup(engine 3)
                      139  ; "AC"   is Accellerating(engine 4)
                      140  ; "DC"   is Decelerating(engine 5)
                      141  ;
                      142  ; Screen 17 displays "EA RL FC       FT IT" ; 
                                   "portCbits", "Alarmbits", "portAbits" screen
                      143  ; "EA"   is Engine Alarm(portCbits 0)
                      144  ; "RL"   is Rev Limiter(alarmbits 5)
                      145  ; "FC"   is Flood Clear(alarmbits 6)
                      146  ; "FT"   is Fuel Trim Enable(portAbits 5)
                      147  ; "IT"   is Ignition Trim Enable(portAbits 2)
                      148  ;
                      149  ; Screen 18 displays "EA HT LO LF HF ET KN" ; 
                                                "portCbits", "Alarmbits" screen
                      150  ; "EA"   is Engine Alarm(portCbits 0)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 5
MV351WM


                      151  ; "HT"   is High engine temperature(alarmbits 1)
                      152  ; "LO"   is Low engine oil pressure(alarmbits 0)
                      153  ; "LF"   is Low fuel pressure(alarmbits 2)
                      154  ; "HF"   is High fuel pressure(alarmbits 3)
                      155  ; "ET"   is High exhaust gas temperature(alarmbits 
                                                                             4)
                      156  ; "KN"   is Engine knock detected(alarmbits 7)
                      157  ;
                      158  ;***************************************************
                                   ********************************************
                      159  
                      160  ;***************************************************
                                                      *************************
                      161  
                      162  ;***************************************************
                                                      *************************
                      163  ;
                      164  ; -------------------------- MV351WM Hardware 
                                                Wiring  -----------------------
                      165  ;
                      166  ;***************************************************
                                                      *************************
                      167  ;
                      168  ; ----- Inputs [port name - function] -----
                      169  ;
                      170  ;  PTA0      - Display Screen next
                      171  ;  PTA1      - Display Screen previous
                      172  ;  PTA2      - not used
                      173  ;  PTA3      - not used
                      174  ;
                      175  ; ----- Outputs [port name - function] -----
                      176  ;
                      177  ;  PTB4       - VFD Display Enable
                      178  ;  PTB5       - VFD Display R/W
                      179  ;  PTB6       - VFD Display RS
                      180  ;  PTC0       - VFD Display data DB4
                      181  ;  PTC1       - VFD Display data DB5
                      182  ;  PTC2       - VFD Display data DB6
                      183  ;  PTC3       - VFD Display data DB7
                      184  ;
                      185  ;***************************************************
                                                      *************************
                      186  
                      187  ;***************************************************
                                                      *************************
                      188  ; ------------------------ Input Port Equates 
                                                -------------------------------
                      189  ;***************************************************
                                                      *************************
                      190  ;
                      191  ;Sw0     equ 0     ; PTA0 - Display Screen next
                      192  ;Sw1     equ 1     ; PTA1 - Display Screen previous
                      193  ;Sw2     equ 2     ; PTA2 - not used
                      194  ;Sw3     equ 3     ; PTA3 - not used
                      195  ;
                      196  ; ----- Outputs [port name - function] -----
                      197  ;
                      198  ;  PTB4       - VFD Display Enable


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 6
MV351WM


                      199  ;  PTB5       - VFD Display R/W
                      200  ;  PTB6       - VFD Display RS
                      201  ;  PTC0       - VFD Display data DB4
                      202  ;  PTC1       - VFD Display data DB5
                      203  ;  PTC2       - VFD Display data DB6
                      204  ;  PTC3       - VFD Display data DB7
                      205  ;
                      206  ;***************************************************
                                                      *************************
                      207  
                      208  
 0040                 209       org        ram_start    ; Origin  Memory location $0040=64
                      210                                  ;(start of RAM)
 0040                 211       include "MV351WM.inc"  ; Include definitions for MV351WM.asm
                      212  ;***********************************************************************************************
                      213  ;
                      214  ;                    MV351WM.inc (header file for MV351WM.asm)
                      215  ;
                      216  ;        Real Time Variable Display and "digital dashboard" for MSnS351WM
                      217  ;
                      218  ;                         By Robert Hiebert 2010
                      219  ;
                      220  ; - Rev 1: 4/16/12 Add configurable bank fuel flow constants for fuel burn calculation
                      221  ;          fine tuning
                      222  ;
                      223  ;***********************************************************************************************
                      224  ;***********************************************************************************************
                      225  ;
                      226  ; ------------------------------------------- Operation ----------------------------------------
                      227  ;
                      228  ; On power up, the unit defaults to display screen #0.
                      229  ; The user has a choice of 19,(0-18), screens which display the variables name
                      230  ; abreviation on the top line, and their corresponding real time values on
                      231  ; the bottom line. The lower line is updated every 250 miliseconds.
                      232  ; The earlier version, MV_ECU also had a constant configuration mode which
                      233  ; this version does not. This is a "display only" unit.
                      234  ;
                      235  ; Screen 0 displays "ERPM MAP AFR CLT MAT" ; Operating status 1 (default screen)
                      236  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                      237  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      238  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                      239  ; "CLT"  is Engine Coolant Temp in degrees F+40, uses "clt"
                      240  ; "MAT"  is Manifold Air Temperature in degrees F+40, uses "mat"
                      241  ;
                      242  ; Screen 1 displays "TPP EOP EFP EXGT VLT" ; Operating status 2 screen
                      243  ; "TPP"  is Throttle position in percent, uses "tpsp"
                      244  ; "EOP"  is Engine oil pressure in PSI, uses "oprs"
                      245  ; "EFP"  is Engine fuel pressure in PSI, uses "fprs"
                      246  ; "EXGT" is Engine exhaust gas temperature in degrees F, uses "egtH:egtL" 
                      247  ; "VLT"  is Battery Voltage x 10, uses "volts"
                      248  ;
                      249  ; Screen 2 displays " ERPM AFR FDSC LTHR " ; Fuel burn screen
                      250  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      251  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                      252  ; "FDSC" is Fuel Delivery Injector On Time over a 1 second period in mmS, uses "fdSecH:fdSecL"
                      253  ; "LTHR" is Current fuel burn in L/Hr x 10, uses "ltrHrH:ltrHrL"
                      254  ;
                      255  ; Screen 3 displays "ERPM MAP AFR FTC PLW" ; Fuel tune screen
                      256  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                      257  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      258  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                      259  ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                      260  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                      261  ;
                      262  ; Screen 4 displays "ERPM MAP TRA CTA MTA" ; Ignition tune screen
                      263  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                      264  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      265  ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                      266  ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                      267  ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"
                      268  ;
                      269  ; Screen 5 displays " GAM WCR ACR BCR TCR" ; Corrections screen
                      270  ; "GAM"  is Gamma Correction in percent, uses gammae
                      271  ; "WCR"  is Engine Coolant Correction in percent, uses "warmcor
                      272  ; "ACR"  is Manifold Air Temperature Correction in percent, uses "aircor"
                      273  ; "BCR"  is Barometric Pressure Correction in percent, uses "barocor"
                      274  ; "TCR"  is Acceleration Correction in percent, uses "tpsaccel"
                      275  ;
                      276  ; Screen 6 displays " ego EGV LMD AFR FTC" ; EGO screen
                      277  ; "ego"  is Exhaust Gas Oxygen ADC, uses "egoADC"
                      278  ; "EGV"  is Exhaust Gas Oxygen voltage x 10, uses "egoV"
                      279  ; "LMD"  is Exhaust Gas Oxygen Lambda x 10, uses "lambda"
                      280  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                      281  ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                      282  ;
                      283  ; Screen 7 displays " map MAP     BAR BCR" ; ADC screen 1
                      284  ; "map"  is Manifold Pressure ADC, uses "mapADC"
                      285  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      286  ; "BAR"  is Barometric Pressure in KPA, uses "barometer"
                      287  ; "BCR"  is Barometric Pressure Correction in percent, uses "barocor"
                      288  ;
                      289  ; Screen 8 displays " vlt VLT clt CLT WCR" ; ADC screen 2
                      290  ; "vlt"  is Battery Voltage ADC, uses "battADC"
                      291  ; "VLT"  is Battery Voltage x 10, uses "volts"
                      292  ; "clt"  is Engine Coolant Temperature ADC, uses "cltADC"
                      293  ; "CLT"  is Engine Coolant Temperature in degrees F+40, uses "clt"
                      294  ; "WCR"  is Engine Coolant Correction in percent, uses "warmcor"
                      295  ;
                      296  ; Screen 9 displays "egt EXGT mat MAT ACR" ; ADC screen 3
                      297  ; "egt"  is Exhaust Gas Temperature ADC, uses "egtADC"
                      298  ; "EXGT" is Engine exhaust gas temperature in degrees F, uses "egtH:egtL" 
                      299  ; "mat"  is Manifold Air Temperature ADC, uses "matADC"
                      300  ; "MAT"  is Manifold Air Temperature in degrees F+40, uses "mat"
                      301  ; "ACR"  is Manifold Air Temperature Correction in percent, uses "aircor"
                      302  ;
                      303  ; Screen 10 displays " ftc  FTC  itc  TAF " ; ADC screen 4
                      304  ; "ftc"  is Fuel trim ADC, uses "ftrimADC"
                      305  ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                      306  ; "itc"  is Ignition Trim Correction ADC, uses "itrimADC"
                      307  ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"
                      308  ;
                      309  ; Screen 11 displays " eop  EOP  efp  EFP " ; ADC screen 5
                      310  ; "eop"  is Engine oil pressure ADC, uses "opADC"
                      311  ; "EOP"  is Engine oil pressure in PSI, uses "oprs"
                      312  ; "efp"  is Engine fuel pressure ADC, uses "fpADC"
                      313  ; "EFP"  is Engine fuel pressure in PSI, uses "fprs"
                      314  ;
                      315  ; Screen 12 displays "PWHR PLW FLD VEC DTY" ; Pulsewidth screen
                      316  ; "PWHR" is Pulse Width Hi Res in mmmS, uses "pwcalcH:pwcalcL"
                      317  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                      318  ; "FLD"  is Fuel Deleivery Pulse Width Lo Res in mmS, uses "fd"
                      319  ; "VEC   is Volumetric Efficiency(Current VE table value in percent), uses "vecurr"
                      320  ; "DTY"  is Injector Duty Cycle in percent, uses "duty"
                      321  ;
                      322  ; Screen 13 displays " ERPM PIPD MNPD SEC " ; Period screen
                      323  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                      324  ; "PIPD" is PIP Period in mmmS, uses "tachH:tachL"
                      325  ; "MNPD" is Ignition Monitor Period in mmmS, uses "monpH:monpL"
                      326  ; "SEC"  is Seconds Counter Lo byte, uses "secL"
                      327  ;
                      328  ; Screen 14 displays "ERPM MAP SAF DAF TAF" ; Ignition factor screen
                      329  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      330  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      331  ; "SAF"  is Spark Angle Factor(Current ST table value), uses "spkAngFac"
                      332  ; "DAF"  is Delay Angle Factor, uses "dlyAngFac"
                      333  ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 7
MV351WM


                      334  ;
                      335  ; Screen 15 displays "ERPM TRA DLA CTA MTA" ; Ignition angle screen
                      336  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      337  ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                      338  ; "DLA"  is Ignition Delay Angle in degrees BTDC, uses "dlyAng"
                      339  ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                      340  ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"
                      341  ;
                      342  ; Screen 16 displays "FP RN CR SW RW AC DC" ; "portAbits", "Engine" bit field screen
                      343  ; "FP"   is Fuel Pump(portAbits 0)
                      344  ; "RN"   is Engine Running(engine 0)
                      345  ; "CR"   is Engine Cranking(engine 1)
                      346  ; "SW"   is Start Warmup(engine 2)
                      347  ; "RW"   is Run Warmup(engine 3)
                      348  ; "AC"   is Accellerating(engine 4)
                      349  ; "DC"   is Decelerating(engine 5)
                      350  ;
                      351  ; Screen 17 displays "EA RL FC       FT IT" ; "portCbits", "Alarmbits", "portAbits" screen
                      352  ; "EA"   is Engine Alarm(portCbits 0)
                      353  ; "RL"   is Rev Limiter(alarmbits 5)
                      354  ; "FC"   is Flood Clear(alarmbits 6)
                      355  ; "FT"   is Fuel Trim Enable(portAbits 5)
                      356  ; "IT"   is Ignition Trim Enable(portAbits 2)
                      357  ;
                      358  ; Screen 18 displays "EA HT LO LF HF ET KN" ; "portCbits", "Alarmbits" screen
                      359  ; "EA"   is Engine Alarm(portCbits 0)
                      360  ; "HT"   is High engine temperature(alarmbits 1)
                      361  ; "LO"   is Low engine oil pressure(alarmbits 0)
                      362  ; "LF"   is Low fuel pressure(alarmbits 2)
                      363  ; "HF"   is High fuel pressure(alarmbits 3)
                      364  ; "ET"   is High exhaust gas temperature(alarmbits 4)
                      365  ; "KN"   is Engine knock detected(alarmbits 7)
                      366  ;
                      367  ;***********************************************************************************************
                      368  
                      369  ;****************************************************************************
                      370  ;
                      371  ; -------------------------- MV351WM Hardware Wiring  ------------------------
                      372  ;
                      373  ;****************************************************************************
                      374  ;
                      375  ; ----- Inputs [port name - function] -----
                      376  ;
                      377  ;  PTA0      - Display Screen next
                      378  ;  PTA1      - Display Screen previous
                      379  ;  PTA2      - not used
                      380  ;  PTA3      - not used
                      381  ;
                      382  ; ----- Outputs [port name - function] -----
                      383  ;
                      384  ;  PTB4       - VFD Display Enable
                      385  ;  PTB5       - VFD Display R/W
                      386  ;  PTB6       - VFD Display RS
                      387  ;  PTC0       - VFD Display data DB4
                      388  ;  PTC1       - VFD Display data DB5
                      389  ;  PTC2       - VFD Display data DB6
                      390  ;  PTC3       - VFD Display data DB7
                      391  ;
                      392  ;****************************************************************************
                      393  
                      394  ;****************************************************************************
                      395  ; ------------------------ Input Port Equates -------------------------------
                      396  ;****************************************************************************
                      397  
 0040                 398  Sw0     equ 0     ; PTA0 - Display Screen next
 0040                 399  Sw1     equ 1     ; PTA1 - Display Screen previous
 0040                 400  Sw2     equ 2     ; PTA2 - not used
 0040                 401  Sw3     equ 3     ; PTA3 - not used
                      402  
                      403  ;****************************************************************************
                      404  ; ------------------------ Output Port Equates ------------------------------
                      405  ;****************************************************************************
                      406  
 0040                 407  Enable     equ 4     ; PTB4 - VFD Display Enable
 0040                 408  Rd_Wrt     equ 5     ; PTB5 - VFD Display R/W
 0040                 409  Reg_Sel    equ 6     ; PTB6 - VFD Display RS
 0040                 410  DB0        equ 0     ; PTC0 - VFD Display data DB0 (4 bit mode)
 0040                 411  DB1        equ 1     ; PTC1 - VFD Display data DB1 (4 bit mode)
 0040                 412  DB2        equ 2     ; PTC2 - VFD Display data DB2 (4 bit mode)
 0040                 413  DB3        equ 3     ; PTC3 - VFD Display data DB3 (4 bit mode)
 0040                 414  DB4        equ 0     ; PTC0 - VFD Display data DB4
 0040                 415  DB5        equ 1     ; PTC1 - VFD Display data DB5
 0040                 416  DB6        equ 2     ; PTC2 - VFD Display data DB6
 0040                 417  DB7        equ 3     ; PTC3 - VFD Display data DB7
                      418  
                      419  ;****************************************************************************
                      420  ; ------------------------ Output Mask Equates ------------------------------
                      421  ;****************************************************************************
                      422  
 0040                 423  DB0m     equ $01     ; %00000001 - PTC0 - VFD Display data DB0 (4 bit mode)
 0040                 424  DB1m     equ $02     ; %00000010 - PTC1 - VFD Display data DB1 (4 bit mode)
 0040                 425  DB2m     equ $04     ; %00000100 - PTC2 - VFD Display data DB2 (4 bit mode)
 0040                 426  DB3m     equ $08     ; %00001000 - PTC3 - VFD Display data DB3 (4 bit mode)
 0040                 427  DB4m     equ $10     ; %00010000 - PTC0 - VFD Display data DB4
 0040                 428  DB5m     equ $20     ; %00100000 - PTC1 - VFD Display data DB5
 0040                 429  DB6m     equ $40     ; %01000000 - PTC2 - VFD Display data DB6
 0040                 430  DB7m     equ $80     ; %10000000 - PTC3 - VFD Display data DB7
                      431  
                      432  
                      433  ;****************************************************************************
                      434  ; -------------- "Flags" Operating Status bit field equates -----------------
                      435  ;****************************************************************************
                      436  
 0040                 437  mde      equ 0  ; 1 = Configure mode             0 = Display mode
 0040                 438  frz      equ 1  ; 1 = Dsply Vars frozen          0 = Dsply vars 250mS update
 0040                 439  sel      equ 2  ; 1 = Current Constant Selected  0 = No Constant selected
 0040                 440  RcvVE    equ 3  ; 1 = Receiving VE group         0 = Not receiving VE group
 0040                 441  RcvST    equ 4  ; 1 = Receiving ST group         0 = Not receiving ST group
 0040                 442  LinChng  equ 5  ; 1 = Bot Line changed           0 = Bot Line not changed
                      443  
                      444  ;****************************************************************************
                      445  ; ----------------- "LPflags","ARCflags","ARflags" equates ------------------
                      446  ;****************************************************************************
                      447  
 0040                 448  Sw0LP     equ 0     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 449  Sw1LP     equ 1     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 450  Sw2LP     equ 2     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 451  Sw3LP     equ 3     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
                      452  
                      453  ;****************************************************************************
                      454  ; --------------------------- "Swflags" equates -----------------------------
                      455  ;****************************************************************************
                      456  
 0040                 457  Sw0cls     equ 0     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 458  Sw1cls     equ 1     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 459  Sw2cls     equ 2     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 460  Sw3cls     equ 3     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
                      461  
                      462  ;***********************************************************************************************
                      463  ; ----------------------- "Engine" Operating Status bit field equates --------------------------
                      464  ;***********************************************************************************************
                      465  
 0040                 466  running:    equ 0    ; 1 = Engine running      0 = Engine not running
 0040                 467  crank:      equ 1    ; 1 = Engine cranking     0 = Engine not cranking
 0040                 468  startw:     equ 2    ; 1 = Warmup enrich       0 = Not in startup warmup
 0040                 469  warmup:     equ 3    ; 1 = In warmup           0 = Not in warmup


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 8
MV351WM


 0040                 470  tpsaen:     equ 4    ; 1 = TPS accel mode      0 = Not in TPS accel mode
 0040                 471  tpsden:     equ 5    ; 1 = Decel mode          0 = Not in decel mode
                      472  
                      473  ;***********************************************************************************************
                      474  ; ----------------------- "alarmbits" Operating Status bit field equates -----------------------
                      475  ;***********************************************************************************************
                      476  
 0040                 477  LOP:     equ 0     ; 1 = Low oil pressure         0 = No low oil pressure
 0040                 478  HET:     equ 1     ; 1 = High Engine Temperature  0 = No High Engine Temperature
 0040                 479  LFP:     equ 2     ; 1 = Low Fuel Pressure        0 = No Low Fuel Pressure
 0040                 480  HFP:     equ 3     ; 1 = High Fuel Pressure       0 = No High Fuel Pressure
 0040                 481  HEGT:    equ 4     ; 1 = High Exhaust Gas Temp    0 = No High Exhaust Gas Temp
 0040                 482  REVL:    equ 5     ; 1 = Engine Rev Limit         0 = No Engine Rev Limit 
 0040                 483  fldClr:  equ 6     ; 1 = Engine Flood Clear       0 = No Engine Flood Clear
 0040                 484  knock:   equ 7     ; 1 = Engine knock detected    0 = No Engine knock detected
                      485  
                      486  ;***********************************************************************************************
                      487  ; ----------------------- "portAbits" Operating Status bit field equates -----------------------
                      488  ;***********************************************************************************************
                      489  
 0040                 490  FPon:     equ 0    ; 1 = Fuel Pump On            0 = Fuel Pump Not On
 0040                 491  ITen:     equ 2    ; 1 = Ignition Trim Enabled   0 = Ignition Trim Not Enabled
 0040                 492  FTen:     equ 5    ; 1 = Fuel Trim Enabled       0 = Fuel Trim Not Enabled
                      493  
                      494  ;***********************************************************************************************
                      495  ; ----------------------- "portCbits" Operating Status bit field equates -----------------------
                      496  ;***********************************************************************************************
                      497  
 0040                 498  EAon:     equ 0    ; 1 = Engine Alarm On         0 = Engine Alarm Not On
                      499  
                      500  ;****************************************************************************
                      501  ; -------------------------- RAM Variables ---------------------------------
                      502  ; - I/O Registers from $000 to $003F(0 to 63)(64 bytes)
                      503  ; - RAM from $0040 to $023F(64 to 575)(512 bytes)
                      504  ;****************************************************************************
                      505  
                      506  ;***************************************************************************
                      507  ; - Misc. Variables
                      508  ;***************************************************************************
                      509  
                      510  ;Memory Location $0040 (decimal 64)
                      511  
 0040                 512  Sw0DB:          ds 1     ; Switch #0 de-bounce timer counter variable
 0041                 513  Sw0ARC:         ds 1     ; Switch #0 auto-repeat command timer counter var
 0042                 514  Sw0AR:          ds 1     ; Switch #0 auto-repeat timer counter variable
 0043                 515  Sw1DB:          ds 1     ; Switch #1 de-bounce timer counter variable
 0044                 516  Sw1ARC:         ds 1     ; Switch #1 auto-repeat command timer counter var
 0045                 517  Sw1AR:          ds 1     ; Switch #1 auto-repeat timer counter variable
 0046                 518  Sw2DB:          ds 1     ; Switch #2 de-bounce timer counter variable
 0047                 519  Sw2ARC:         ds 1     ; Switch #2 auto-repeat command timer counter var
 0048                 520  Sw2AR:          ds 1     ; Switch #2 auto-repeat timer counter variable
 0049                 521  Sw3DB:          ds 1     ; Switch #3 de-bounce timer counter variable
 004A                 522  Sw3ARC:         ds 1     ; Switch #3 auto-repeat command timer counter var
 004B                 523  Sw3AR:          ds 1     ; Switch #3 auto-repeat timer counter variable
 004C                 524  LPflags:        ds 1     ; Switch last pass status bit field variable
 004D                 525  ARCflags:       ds 1     ; Switch auto-repeat command status bit field
 004E                 526  ARflags:        ds 1     ; Switch auto-repeat status bit field variable
 004F                 527  Swflags:        ds 1     ; Switch status bit field variable
                      528  
                      529  ;Memory Location $0050 (decimal 80)
                      530  
 0050                 531  ModeCntr:       ds 1     ; Counter for determining "mode" bit status
 0051                 532  FrzCntr:        ds 1     ; Counter for determining "frz" bit status
 0052                 533  SelCntr:        ds 1     ; Counter for determining "sel" bit status
 0053                 534  flags:          ds 1     ; Bit field for operating status flags (1 of 2)
 0054                 535  ScrnCnt:        ds 1     ; Counter for display screen numbers
 0055                 536  ScrnCnt_prv:    ds 1     ; Screen count number previous
 0056                 537  ScrnCnt_Lst:    ds 1     ; Screen count number last
 0057                 538  ConCnt:         ds 1     ; Counter for Constant numbers
 0058                 539  ConCnt_prv:     ds 1     ; Constant number previous
 0059                 540  ConCnt_Lst:     ds 1     ; Constant number last
 005A                 541  CurCon:         ds 1     ; Value of current selected constant
 005B                 542  ConVal:         ds 1     ; Value for constant data
                      543  
                      544  
                      545  ;***************************************************************************
                      546  ; - Serial Communications Interface Variables
                      547  ;***************************************************************************
                      548  
 005C                 549  ByteCnt:        ds 1     ; Count of bytes to receive via SCI
 005D                 550  ByteGoal:       ds 1     ; Desired number of bytes to receive via SCI
 005E                 551  readbuf:        ds 1     ; Buffer for temporary storage of received byte
                      552  
                      553  ;****************************************************************************
                      554  ; ----------------------- Time Clock Variables ------------------------------
                      555  ;****************************************************************************
                      556  
 005F                 557  mS:             ds 1  ; Milliseconds counter
                      558  
                      559  ;Memory Location $0060 (decimal 96)
                      560  
 0060                 561  mSx5:           ds 1     ; 5 Milliseconds counter
                      562  
                      563  ;****************************************************************************
                      564  ; - Variables for integer math
                      565  ;****************************************************************************
                      566  
 0061                 567  INTACC1:      rmb 4
 0065                 568  INTACC2:      rmb 4
                      569  
                      570  
                      571  ;****************************************************************************
                      572  ; - Temporary  variables
                      573  ;****************************************************************************
                      574  
 0069                 575  tmp1:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006A                 576  tmp2:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006B                 577  tmp3:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006C                 578  tmp4:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006D                 579  tmp5:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006E                 580  tmp6:        ds 1     ; used in Umul32, Linterp
 006F                 581  tmp7:        ds 1     ; used in Umul32, Linterp
                      582  
                      583  ;Memory Location $0070 (decimal 112)
                      584  
 0070                 585  tmp8:        ds 1     ; used in Umul32
 0071                 586  tmp9:        ds 1
 0072                 587  tmp10:       ds 1
 0073                 588  tmp11:       ds 1
 0074                 589  tmp12:       ds 1
 0075                 590  tmp13:       ds 1
 0076                 591  tmp14:       ds 1
 0077                 592  tmp15:       ds 1
 0078                 593  tmp16:       ds 1
 0079                 594  tmp17:       ds 1
 007A                 595  tmp18:       ds 1
 007B                 596  tmp19:       ds 1
 007C                 597  tmp20:       ds 1
 007D                 598  local_tmp:   ds 1     ; used in "div_round"
                      599  
                      600  
                      601  ;***************************************************************************
                      602  ; - VFD Variables
                      603  ;***************************************************************************
                      604  
 007E                 605  value:          ds 1     ; Value sent to VFD(instruction or data)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 9
MV351WM


 007F                 606  LineNum:        ds 1     ; Line number for VFD(for instruction)
                      607  
                      608  ;Memory Location $0080 (decimal 128)
                      609  
 0080                 610  ColNum:         ds 1     ; Column number for VFD(for instruction)
 0081                 611  DatVal:         ds 1     ; Data value for VFD
 0082                 612  ComVal:         ds 1     ; Value for VFD command data
 0083                 613  TopVal:         ds 1     ; Value for VFD top line data
 0084                 614  DisVal:         ds 1     ; Value for VFD bottom line variable data
                      615  
                      616  ;***************************************************************************
                      617  ; - Variables to display VFD bottom line
                      618  ;***************************************************************************
                      619  
 0085                 620  BotLin0:      ds 1     ; Bottom Line Column 0
 0086                 621  BotLin1:      ds 1     ; Bottom Line Column 1
 0087                 622  BotLin2:      ds 1     ; Bottom Line Column 2
 0088                 623  BotLin3:      ds 1     ; Bottom Line Column 3
 0089                 624  BotLin4:      ds 1     ; Bottom Line Column 4
 008A                 625  BotLin5:      ds 1     ; Bottom Line Column 5
 008B                 626  BotLin6:      ds 1     ; Bottom Line Column 6
 008C                 627  BotLin7:      ds 1     ; Bottom Line Column 7
 008D                 628  BotLin8:      ds 1     ; Bottom Line Column 8
 008E                 629  BotLin9:      ds 1     ; Bottom Line Column 9
 008F                 630  BotLin10:     ds 1     ; Bottom Line Column 10
                      631  
                      632  ;Memory Location $0090 (decimal 144)
                      633  
 0090                 634  BotLin11:     ds 1     ; Bottom Line Column 11
 0091                 635  BotLin12:     ds 1     ; Bottom Line Column 12
 0092                 636  BotLin13:     ds 1     ; Bottom Line Column 13
 0093                 637  BotLin14:     ds 1     ; Bottom Line Column 14
 0094                 638  BotLin15:     ds 1     ; Bottom Line Column 15
 0095                 639  BotLin16:     ds 1     ; Bottom Line Column 16
 0096                 640  BotLin17:     ds 1     ; Bottom Line Column 17
 0097                 641  BotLin18:     ds 1     ; Bottom Line Column 18
 0098                 642  BotLin19:     ds 1     ; Bottom Line Column 19
                      643  
                      644  ;***************************************************************************
                      645  ; - Variables to display VFD bottom line, last pass through main loop
                      646  ;***************************************************************************
                      647  
 0099                 648  BotLin0L:      ds 1     ; Bottom Line Column 0, last pass
 009A                 649  BotLin1L:      ds 1     ; Bottom Line Column 1, last pass
 009B                 650  BotLin2L:      ds 1     ; Bottom Line Column 2, last pass
 009C                 651  BotLin3L:      ds 1     ; Bottom Line Column 3, last pass
 009D                 652  BotLin4L:      ds 1     ; Bottom Line Column 4, last pass
 009E                 653  BotLin5L:      ds 1     ; Bottom Line Column 5, last pass
 009F                 654  BotLin6L:      ds 1     ; Bottom Line Column 6, last pass
                      655  
                      656  ;Memory Location $00A0 (decimal 160)
                      657  
 00A0                 658  BotLin7L:      ds 1     ; Bottom Line Column 7, last pass
 00A1                 659  BotLin8L:      ds 1     ; Bottom Line Column 8, last pass
 00A2                 660  BotLin9L:      ds 1     ; Bottom Line Column 9, last pass
 00A3                 661  BotLin10L:     ds 1     ; Bottom Line Column 10, last pass
 00A4                 662  BotLin11L:     ds 1     ; Bottom Line Column 11, last pass
 00A5                 663  BotLin12L:     ds 1     ; Bottom Line Column 12, last pass
 00A6                 664  BotLin13L:     ds 1     ; Bottom Line Column 13, last pass
 00A7                 665  BotLin14L:     ds 1     ; Bottom Line Column 14, last pass
 00A8                 666  BotLin15L:     ds 1     ; Bottom Line Column 15, last pass
 00A9                 667  BotLin16L:     ds 1     ; Bottom Line Column 16, last pass
 00AA                 668  BotLin17L:     ds 1     ; Bottom Line Column 17, last pass
 00AB                 669  BotLin18L:     ds 1     ; Bottom Line Column 18, last pass
 00AC                 670  BotLin19L:     ds 1     ; Bottom Line Column 19, last pass
                      671  
                      672  ;***************************************************************************
                      673  ; - Variables to hold ASCII conversions
                      674  ;***************************************************************************
                      675  
 00AD                 676  AC_100:     ds 1     ; 8 bit ASCII conversion 100s column
 00AE                 677  AC_10:      ds 1     ; 8 bit ASCII conversion 10s column
 00AF                 678  AC_1:       ds 1     ; 8 bit ASCII conversion 1s column
                      679  
                      680  ;Memory Location $00B0 (decimal 176)
                      681  
 00B0                 682  thousands:  ds 1     ; 16 bit ASCII conversion 1000s digit
 00B1                 683  hundreds:   ds 1     ; 16 bit ASCII conversion 100s digit
 00B2                 684  tens:       ds 1     ; 16 bit ASCII conversion 10s digit
 00B3                 685  ones:       ds 1     ; 16 bit ASCII conversion 1s digit
                      686  
                      687  ;****************************************************************************
                      688  ; - RS232 Real Time Variables
                      689  ;****************************************************************************
                      690  
 00B4                 691  secl:           ds 1  ; low seconds - from 0 to 255, then rollover
 00B5                 692  mapADC:         ds 1  ; Manifold Absolute Pressure ADC
 00B6                 693  matADC:         ds 1  ; Manifold Air Temp ADC
 00B7                 694  cltADC:         ds 1  ; Coolant Temperature ADC
 00B8                 695  tpsADC:         ds 1  ; Throttle Position Sensor ADC
 00B9                 696  battADC:        ds 1  ; Battery Voltage ADC
 00BA                 697  egoADC:         ds 1  ; Exhaust Gas Oxygen ADC
 00BB                 698  ftrmADC:        ds 1  ; Fuel Trim ADC
 00BC                 699  itrmADC:        ds 1  ; Ignition Trim ADC
 00BD                 700  opADC:          ds 1  ; Engine Oil Pressure ADC
 00BE                 701  fpADC:          ds 1  ; Fuel Pressure ADC
 00BF                 702  egtADC:         ds 1  ; Exhaust Gas Temperature ADC
                      703  
                      704  ;Memory Location $00C0 (decimal 192)
                      705  
 00C0                 706  barometer:      ds 1  ; Barometer Reading - KPa (0 - 255)
 00C1                 707  barocor:        ds 1  ; Barometer Lookup Correction - percent
 00C2                 708  warmcor:        ds 1  ; Total Warmup Correction - percent
 00C3                 709  aircor:         ds 1  ; Air Density Correction lookup - percent
 00C4                 710  Ftrimcor:       ds 1  ; Fuel Trim Correction Factor (85% - 115%)
 00C5                 711  gammae:         ds 1  ; Total Gamma Enrichments - percent
 00C6                 712  tpsaccel:       ds 1  ; Acceleration enrichment - percent
 00C7                 713  rpm20:          ds 1  ; Computed engine RPM - rpm/100
 00C8                 714  vecurr:         ds 1  ; Current VE value from lookup table - percent
 00C9                 715  pwcalcH:        ds 1  ; Calculated puslewidth Hi Res Hi byte
 00CA                 716  pwcalcL:        ds 1  ; Calculated puslewidth Hi Res Lo byte
 00CB                 717  pw:             ds 1  ; Calculated pulsewidth Lo Res
 00CC                 718  fd:             ds 1  ; Fuel Delivery pulsewidth Lo Res
 00CD                 719  fdSecH:         ds 1  ; Fuel Delivery pulsewidth Lo res over 1 second Hi byte
 00CE                 720  fdSecL:         ds 1  ; Fuel Delivery pulsewidth Lo res over 1 second Lo byte
 00CF                 721  tachH:          ds 1  ; Tachometer period averaged over 500 mS Hi byte 
                      722  
                      723  
                      724  
                      725  ;Memory Location $00D0 (decimal 208)
                      726  
 00D0                 727  tachL:          ds 1  ; Tachometer period averaged over 500 mS Lo byte 
 00D1                 728  spkAngFac:      ds 1  ; Spark Angle Factor(from ST table)
 00D2                 729  trmAngFac:      ds 1  ; Trim Angle FActor (calculated in MSnS300)
 00D3                 730  dlyAngFac:      ds 1  ; Delay Angle Factor
 00D4                 731  monpH:          ds 1  ; Ignition monitor period Hi byte
 00D5                 732  monpL:          ds 1  ; Ignition monitor period Lo byte
 00D6                 733  tpsp:           ds 1  ; Throttle position percent
 00D7                 734  engine:         ds 1  ; Variable bit-field to hold engine current status
 00D8                 735  alarmbits:      ds 1  ; Engine alarm status bit field
 00D9                 736  portAbits:      ds 1  ; Port A status bit field
 00DA                 737  portCbits:      ds 1  ; Port C status bit field
 00DB                 738  BnkflowHmv:     ds 1  ; Injector bank flow rate L/hr x 10 Hi byte for MV
 00DC                 739  BnkflowLmv:     ds 1  ; Injector bank flow rate L/hr x 10 Lo byte for MV
                      740  
                      741  ;****************************************************************************


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 10
MV351WM


                      742  ; ---- This marks the end of the real time download values, 41 in total -----
                      743  ;****************************************************************************
                      744  
                      745  ;****************************************************************************
                      746  ; Calculated variables
                      747  ;****************************************************************************
                      748  
 00DD                 749  map:            ds 1  ; Manifold Absolute Pressure in KPA
 00DE                 750  mat:            ds 1  ; Manifold Temperature in degrees F + 40
 00DF                 751  clt:            ds 1  ; Engine Coolant Temperature in degrees F + 40
                      752  
                      753  ; - Memory Location $00E0 (decimal 224)
                      754  
 00E0                 755  volts:          ds 1  ; Battery (system) voltage
 00E1                 756  egoV:           ds 1  ; Exhaust Gas Oxygen sensor voltage
 00E2                 757  lambda:         ds 1  ; Exhaust Gas Oxygen lambda
 00E3                 758  afr:            ds 1  ; Exhaust Gas Oxygen Air/Fuel Ratio
 00E4                 759  duty:           ds 1  ; Injector duty cycle
 00E5                 760  trmAng:         ds 1  ; Ignition Trim Angle
 00E6                 761  dlyAng:         ds 1  ; Ignition Delay Angle
 00E7                 762  timAng:         ds 1  ; Calculated Ignition Timing Angle
 00E8                 763  monTimAng:      ds 1  ; Monitored Ignition Timing Angle
 00E9                 764  ltrHrH:         ds 1  ; Fuel burn in Litres per Hour x 10 Hi byte
 00EA                 765  ltrHrL:         ds 1  ; Fuel burn in Litres per Hour x 10 Lo byte
 00EB                 766  oprs:           ds 1  ; Engine oil pressure in PSI
 00EC                 767  fprs:           ds 1  ; Fuel pressure in PSI
 00ED                 768  egtH:           ds 1  ; Exhaust temperature in degrees F Hi byte
 00EE                 769  egtL:           ds 1  ; Exhaust temperature in degrees F Lo byte
 00EF                 770  rpmH:           ds 1  ; Engine RPM Lo Res Hi Byte
                      771  
                      772  ; - Memory Location $00F0 (decimal 240)
                      773  
 00F0                 774  rpmL:           ds 1  ; Engine RPM Lo Res Lo byte
 00F1                 775  rpmhrH:         ds 1  ; Engine RPM Hi Res Hi Byte
 00F2                 776  rpmhrL:         ds 1  ; Engine RPM Hi Res Lo byte
                      777  
                      778  
                      779  ;****************************************************************************
                      780  ; Variables used in calculations
                      781  ;****************************************************************************
                      782  
 00F3                 783  monDlyAngFac:   ds 1  ; Monitored Delay Angle Factor
 00F4                 784  monDlyAng:      ds 1  ; Monitored Delay Angle
 00F5                 785  monFrngAng:     ds 1  ; Monitored Firing Angle
 00F6                 786  BnkFloH:        ds 1  ; Injector bank flow rate in cc/sec x 1,000,000 Hi byte
 00F7                 787  BnkFloL:        ds 1  ; Injector bank flow rate in cc/sec x 1,000,000 Lo byte
 00F8                 788  blank1:         ds 1  ; Place holder
 00F9                 789  blank2:         ds 1  ; Place holder
 00FA                 790  blank3:         ds 1  ; Place holder
 00FB                 791  blank4:         ds 1  ; Place holder
 00FC                 792  blank5:         ds 1  ; Place holder
 00FD                 793  blank6:         ds 1  ; Place holder
 00FE                 794  blank7:         ds 1  ; Place holder
 00FF                 795  blank8:         ds 1  ; Place holder
                      796  
                      797  ; - Memory Location $0100 (decimal 256)
                      798  
                      799  
                      800  
                      801  
                      802  ;****************************************************************************
                      803  ;
                      804  ; ----------------- Configure system and set up clock ----------------------
                      805  ;
                      806  ;****************************************************************************
                      807  
 8000                 808       org     rom_start              ; Origin at memory location
                      809                                      ; ($8000 = 32,768)(start of ROM)
                      810  
                      811  START:
                      812  
                      813  ;****************************************************************************
                      814  ; - Set Configuration Register 1
                      815  ;****************************************************************************
                      816  
 8000 [04] 6E3B1F     817       mov     #$3B,CONFIG1     ; Move %00111011 into Configuration Register 1
                      818                                ;(COP timeout period=2p18-2p4 CGMXCLK cycles)
                      819                                ;(LVI disabled during stop mode)
                      820                                ;(LVI module resets disabled)
                      821                                ;(LVI module power disabled)
                      822                                ;(LVI operates in 5-V mode)
                      823                                ;(Stop mode recovery after 4096 CGMXCLKC cycls)
                      824                                ;(Stop instruction enabled)
                      825                                ;(COP module disabled)
                      826  
                      827  ;****************************************************************************
                      828  ; - Set Configuration Register 2
                      829  ;****************************************************************************
                      830  
 8003 [04] 6E011E     831       mov     #$01,CONFIG2     ; Move %00000001 into Configuration Register 2
                      832                                ;(Oscillator disabled during stop mode)
                      833                                ;(Internal data bus clock used as clock source
                      834                                ; for SCI)
                      835  
                      836  ;****************************************************************************
                      837  ; - Set The Stack Pointer to the bottom of RAM
                      838  ;****************************************************************************
                      839  
 8006 [03] 450240     840       ldhx     #ram_last+1           ; Load index register with value in
                      841                                      ; "ram_last" +1 ($023F+1=$0240=576)
 8009 [02] 94         842       txs                            ; Transfer value in index register Lo
                      843                                      ; byte to stack
                      844  
                      845  ;****************************************************************************
                      846  ; - Initialize the PLL Control Register for a bus frequency of 8.003584mhz
                      847  ;****************************************************************************
                      848  
 800A [04] 6E0236     849       mov     #$02,PCTL      ; Move %00000010 into PLL Control Register
                      850                              ;(PLL Interrupts Disabled)
                      851                              ;(No change in lock condition(flag))
                      852                              ;(PLL off)
                      853                              ;(CGMXCLK divided by 2 drives CGMOUT)
                      854                              ;(VCO pwr of 2 mult = 1(E=0))
                      855                              ;(Prescale mult = 4(P=2))
 800D [04] 6E0338     856       mov     #$03,PMSH      ; Move %00000011 into PLL Multiplier Select
                      857                              ; Register Hi (Set N MSB)
 8010 [04] 6ED139     858       mov     #$D1,PMSL      ; Move %11010001 into PLL Multiplier Select
                      859                              ; Register Lo (Set N LSB)($84 for 7.37 MHz)
 8013 [04] 6ED03A     860       mov     #$D0,PMRS      ; Move %11010000 into PLL VCO Range Select
                      861                              ; Register (Set L) ($C0 for 7.37 MHz)
 8016 [04] 6E013B     862       mov     #$01,PMDS      ; Move %00000001 into Reference Divider Select
                      863                              ; Register (Set "RDS0" bit (default value of 1)
 8019 [04] 1E37       864       bset    AUTO,PBWC      ; Set "Auto" bit of PLL Bandwidth Control Register
 801B [04] 6E3236     865       mov     #$32,PCTL      ; Move %00100000 into PLL Control Register
                      866                              ;(PLL On)
                      867  
                      868  PLL_WAIT:
 801E [05] 0D37FD     869       brclr   LOCK,PBWC,PLL_WAIT     ; If "Lock" bit of PLL Bandwidth Control
                      870                                      ; Register is clear, branch to PLL_WAIT:
 8021 [04] 1836       871       bset    BCS,PCTL               ; Set "BCS" bit of PLL Control Register
                      872                                      ;(CGMXCLK divided by 2 drives CGMOUT)
                      873                                      ;(Select VCO as base clock)
                      874  
                      875  
                      876  ;****************************************************************************
                      877  ;


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 11
MV351WM


                      878  ; ----------------------------- Set up RS 232 ------------------------------
                      879  ;
                      880  ;****************************************************************************
                      881  
                      882  ;****************************************************************************
                      883  ; - Enable/disable loop mode
                      884  ;****************************************************************************
                      885  
 8023 [04] 6E4013     886       mov     #$40,SCC1     ; Move %01000000 into SCI Control Register 1
                      887                             ;(Normal operation enabled)
                      888                             ;(Set "ENSCI" bit)(SCI enabled)
                      889                             ;(Transmitter output not inverted)
                      890                             ;(8 bit SCI characters)
                      891                             ;(Idle line wakeup)
                      892                             ;(Idle character bit countbegins after start bit)
                      893                             ;(Parity function disabled)
                      894                             ;(Even Parity)
 8026 [04] 1013       895       bset    PTY,SCC1      ; Set "PTY" bit of SCI Control Register 1
                      896                             ;(Odd Parity)???
                      897  
                      898  ;****************************************************************************
                      899  ; - This register initialize interrupts request and activates the
                      900  ;   transmitter and receiver and wakeup mode
                      901  ;****************************************************************************
                      902  
 8028 [04] 6E0C14     903       mov     #$0C,SCC2     ; Move %00001100 into SCI Control Register 2
                      904                             ;(SCTIE not enabled to generate CPU interrupt)
                      905                             ;(TCIE not enabled to generate CPU interrupt)
                      906                             ;(SCRIE not enabled to generate CPU interrupt)
                      907                             ;(ILIE not enabled to generate CPU interrupt)
                      908                             ;(Set "TE" bit)(Transmitter enabled)
                      909                             ;(Set "RE" bit)(Receiver enabled)
                      910                             ;(Normal Operation)
                      911                             ;(No break characters being transmitted)
                      912  
                      913  ;****************************************************************************
                      914  ; - This register initialize the DMA services and error interrupts
                      915  ;****************************************************************************
                      916  
 802B [03] 3F15       917       clr     SCC3          ; Clear SCI Control Register 3
                      918                             ;(DMA not enabled to service SCI receiver)
                      919                             ;(SCTE DMA service requests disabled)
                      920                             ;(SCI error CPU interrupt requests for OR bit
                      921                             ; disabled)
                      922                             ;(SCI error CPU interrupt requests for NE bit
                      923                             ; disabled)
                      924                             ;(SCI error CPU interrupt requests for FE bit
                      925                             ; disabled)
                      926                             ;(SCI error CPU interrupt requests for PE bit
                      927                             ; disabled)
                      928  
                      929  ;****************************************************************************
                      930  ; - This register sets baud rate
                      931  ;****************************************************************************
                      932  
 802D [02] A630       933       lda      #$30           ; Load accumulator with %00110000
 802F [03] B719       934       sta      SCBR           ; Copy to SCI Baud Rate Register
                      935                               ; 8003584mhz/(64*13*1)=9619.7 baud
                      936  
                      937  ;****************************************************************************
                      938  ; ------------- Set up the port data-direction registers --------------------
                      939  ;               Set directions,
                      940  ;               Preset state of pins to become outputs
                      941  ;               Set all unused pins to outputs initialized Lo
                      942  ;****************************************************************************
                      943  
                      944  ;****************************************************************************
                      945  ; - Set up VFD control line I/Os
                      946  ;****************************************************************************
                      947  
                      948  ; Port B
 8031 [03] 3F01       949       clr     PORTB           ; Clear Port B Data Register
                      950                               ;(Preinit all pins low)
 8033 [02] A6FF       951       lda     #$FF            ; Load accumulator with %11111111
                      952                               ;(port direction setup 1 = output)
 8035 [03] B705       953       sta     DDRB            ; Copy to Port A Data Direction Register
                      954                               ; Set all as outputs
                      955                               ; NA,RS,R/W,En,NA,NA,NA,NA
                      956  
                      957  ; Port C
 8037 [03] 3F02       958       clr     PORTC           ; Clear Port C Data Register
                      959                               ;(Preinit all pins low)
 8039 [02] A6FF       960       lda     #$FF            ; Load accumulator with %11111111
                      961                               ; (set up port directions, 1 = out)
 803B [03] B706       962       sta     DDRC            ; Copy to Port C Data Direction Register
                      963                               ; Set all as outputs
                      964                               ; NA,NA,NA,NA,DB7,DB6,DB5,DB4
                      965  
                      966  ;****************************************************************************
                      967  ; - Set up for push button inputs
                      968  ;****************************************************************************
                      969  
                      970  ; Port A
 803D [04] 6EFF0D     971       mov     #$FF,PTAPUE     ; Move %11111111 into Port A pullup register
                      972                               ;(Set all pullups)
 8040 [03] 3F00       973       clr     PORTA           ; Clear Port A Data Regisister
                      974                               ;(preinit all pins Lo)
 8042 [02] A6F0       975       lda     #$F0            ; Load accumulator with %11110000
                      976                               ;(port direction setup 1 = output)
 8044 [03] B704       977       sta     DDRA            ; Copy to Port A Data Direction Register
                      978                               ; Inputs on PTA3,2,1,0
                      979                               ; Tog Mode,Frz/Sel,Scrl Rt/Inc.Scrl Lft/Dec
                      980                               ; Outputs on PTA7,6,5,4 (not used)
                      981  
                      982  ;****************************************************************************
                      983  ; - Set up Ports D and E.(The Motorola manual states that it is not
                      984  ;   necessarry to set up Port E when SCI is enabled, but we'll do it anyway).
                      985  ;****************************************************************************
                      986  
                      987  ; Port D
 8046 [03] 3F03       988       clr     PORTD           ; Clear Port D Data Register
                      989                               ;(Preinit all pins low)
 8048 [02] A6FF       990       lda     #$FF            ; Load accumulator with %11111111
                      991                               ; (init port directions 1 = out)
 804A [03] B707       992       sta     DDRD            ; Copy to Port D Data Direction Register
                      993                               ; Set all as outputs
                      994                               ; NA,NA,NA,NA,NA,NA,NA,NA
                      995  
                      996  ; Port E
 804C [03] 3F08       997       clr     PORTE           ; Clear Port E Data Register (to avoid glitches)
 804E [02] A601       998       lda     #$01            ; Load accumulator with %00000001
                      999                               ; (set up port directions, 1 = out)
                     1000                               ; (Serial Comm Port)
 8050 [03] B70C      1001       sta     DDRE            ; Copy to Port E Data Direction Register
                     1002  
                     1003  
                     1004  ;***************************************************************************
                     1005  ; - Initialize the variables
                     1006  ;***************************************************************************
                     1007  
 8052 [01] 4F        1008       clra                   ; Clear accumulator
 8053 [01] 8C        1009       clrh                   ; Clear index register Hi byte
 8054 [01] 5F        1010       clrx                   ; Clear index register Lo byte
 8055 [03] 3F40      1011       clr     Sw0DB          ; Switch #0 de-bounce timer counter variable
 8057 [03] 3F41      1012       clr     Sw0ARC         ; Switch #0 auto-repeat command timer counter var
 8059 [03] 3F42      1013       clr     Sw0AR          ; Switch #0 auto-repeat timer counter variable


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 12
MV351WM


 805B [03] 3F43      1014       clr     Sw1DB          ; Switch #1 de-bounce timer counter variable
 805D [03] 3F44      1015       clr     Sw1ARC         ; Switch #1 auto-repeat command timer counter var
 805F [03] 3F45      1016       clr     Sw1AR          ; Switch #1 auto-repeat timer counter variable
 8061 [03] 3F46      1017       clr     Sw2DB          ; Switch #2 de-bounce timer counter variable
 8063 [03] 3F47      1018       clr     Sw2ARC         ; Switch #2 auto-repeat command timer counter var
 8065 [03] 3F48      1019       clr     Sw2AR          ; Switch #2 auto-repeat timer counter variable
 8067 [03] 3F49      1020       clr     Sw3DB          ; Switch #3 de-bounce timer counter variable
 8069 [03] 3F4A      1021       clr     Sw3ARC         ; Switch #3 auto-repeat command timer counter var
 806B [03] 3F4B      1022       clr     Sw3AR          ; Switch #3 auto-repeat timer counter variable
 806D [03] 3F4C      1023       clr     LPflags        ; Switch last pass status bit field variable
 806F [03] 3F4D      1024       clr     ARCflags       ; Switch auto-repeat command status bit field
 8071 [03] 3F4E      1025       clr     ARflags        ; Switch auto-repeat status bit field variable
 8073 [03] 3F4F      1026       clr     Swflags        ; Switch status bit field variable
 8075 [03] 3F50      1027       clr     ModeCntr       ; Counter for determining "mode" bit status
 8077 [03] 3F51      1028       clr     FrzCntr        ; Counter for determining "frz" bit status
 8079 [03] 3F52      1029       clr     SelCntr        ; Counter for determining "sel" bit status
 807B [03] 3F53      1030       clr     flags          ; Bit field for operating status flags (1 of 2)
 807D [03] 3F54      1031       clr     ScrnCnt        ; Counter for display screen numbers
 807F [03] 3F55      1032       clr     ScrnCnt_prv    ; Screen count number previous
 8081 [03] 3F57      1033       clr     ConCnt         ; Counter for Constant numbers
 8083 [03] 3F58      1034       clr     ConCnt_prv     ; Constant number previous
 8085 [03] 3F82      1035       clr     ComVal         ; Value for VFD command data
 8087 [03] 3F83      1036       clr     TopVal         ; Value for VFD top line data
 8089 [03] 3F84      1037       clr     DisVal         ; Value for VFD bottom line variable data
 808B [03] 3F5B      1038       clr     ConVal         ; Value for VFD bottom line constant data
 808D [03] 3F5A      1039       clr     CurCon         ; Value of current selected constant
 808F [03] 3F80      1040       clr     ColNum         ; Value of  Column number for VFD
 8091 [03] 3F7E      1041       clr     value          ; Value for VFD data
 8093 [03] 3F81      1042       clr     DatVal         ; Data value for VFD
 8095 [03] 3F5C      1043       clr     ByteCnt        ; Count of bytes to receive via SCI
 8097 [03] 3F5D      1044       clr     ByteGoal       ; Desired number of bytes to receive via SCI
 8099 [03] 3F5E      1045       clr     readbuf        ; Buffer for temporary storage of received byte
 809B [03] 3F5F      1046       clr     mS             ; Milliseconds counter
 809D [03] 3F60      1047       clr     mSx5           ; 5 Milliseconds counter
 809F [03] 3F5C      1048       clr     ByteCnt        ; Count of bytes to receive via SCI
 80A1 [03] 3F5D      1049       clr     ByteGoal       ; Desired number of bytes to receive via SCI
 80A3 [03] 3F5E      1050       clr     readbuf        ; Buffer for temporary storage of received byte
 80A5 [03] 3F7E      1051       clr     value          ; Value sent to VFD(instruction or data)
 80A7 [03] 3F7F      1052       clr     LineNum        ; Line number for VFD(for instruction)
 80A9 [03] 3F80      1053       clr     ColNum         ; Column number for VFD(for instruction)
 80AB [03] 3F81      1054       clr     DatVal         ; Data value for VFD
 80AD [03] 3F82      1055       clr     ComVal         ; Value for VFD command data
 80AF [03] 3F83      1056       clr     TopVal         ; Value for VFD top line data
 80B1 [03] 3F84      1057       clr     DisVal         ; Value for VFD bottom line variable data
 80B3 [03] 3F85      1058       clr     BotLin0        ; Bottom Line Column 0
 80B5 [03] 3F86      1059       clr     BotLin1        ; Bottom Line Column 1
 80B7 [03] 3F87      1060       clr     BotLin2        ; Bottom Line Column 2
 80B9 [03] 3F88      1061       clr     BotLin3        ; Bottom Line Column 3
 80BB [03] 3F89      1062       clr     BotLin4        ; Bottom Line Column 4
 80BD [03] 3F8A      1063       clr     BotLin5        ; Bottom Line Column 5
 80BF [03] 3F8B      1064       clr     BotLin6        ; Bottom Line Column 6
 80C1 [03] 3F8C      1065       clr     BotLin7        ; Bottom Line Column 7
 80C3 [03] 3F8D      1066       clr     BotLin8        ; Bottom Line Column 8
 80C5 [03] 3F8E      1067       clr     BotLin9        ; Bottom Line Column 9
 80C7 [03] 3F8F      1068       clr     BotLin10       ; Bottom Line Column 10
 80C9 [03] 3F90      1069       clr     BotLin11       ; Bottom Line Column 11
 80CB [03] 3F91      1070       clr     BotLin12       ; Bottom Line Column 12
 80CD [03] 3F92      1071       clr     BotLin13       ; Bottom Line Column 13
 80CF [03] 3F93      1072       clr     BotLin14       ; Bottom Line Column 14
 80D1 [03] 3F94      1073       clr     BotLin15       ; Bottom Line Column 15
 80D3 [03] 3F95      1074       clr     BotLin16       ; Bottom Line Column 16
 80D5 [03] 3F96      1075       clr     BotLin17       ; Bottom Line Column 17
 80D7 [03] 3F97      1076       clr     BotLin18       ; Bottom Line Column 18
 80D9 [03] 3F98      1077       clr     BotLin19       ; Bottom Line Column 19
 80DB [03] 3F99      1078       clr     BotLin0L       ; Bottom Line Column 0 last pass
 80DD [03] 3F9A      1079       clr     BotLin1L       ; Bottom Line Column 1 last pass
 80DF [03] 3F9B      1080       clr     BotLin2L       ; Bottom Line Column 2 last pass
 80E1 [03] 3F9C      1081       clr     BotLin3L       ; Bottom Line Column 3 last pass
 80E3 [03] 3F9D      1082       clr     BotLin4L       ; Bottom Line Column 4 last pass
 80E5 [03] 3F9E      1083       clr     BotLin5L       ; Bottom Line Column 5 last pass
 80E7 [03] 3F9F      1084       clr     BotLin6L       ; Bottom Line Column 6 last pass
 80E9 [03] 3FA0      1085       clr     BotLin7L       ; Bottom Line Column 7 last pass
 80EB [03] 3FA1      1086       clr     BotLin8L       ; Bottom Line Column 8 last pass
 80ED [03] 3FA2      1087       clr     BotLin9L       ; Bottom Line Column 9 last pass
 80EF [03] 3FA3      1088       clr     BotLin10L      ; Bottom Line Column 10 last pass
 80F1 [03] 3FA4      1089       clr     BotLin11L      ; Bottom Line Column 11 last pass
 80F3 [03] 3FA5      1090       clr     BotLin12L      ; Bottom Line Column 12 last pass
 80F5 [03] 3FA6      1091       clr     BotLin13L      ; Bottom Line Column 13 last pass
 80F7 [03] 3FA7      1092       clr     BotLin14L      ; Bottom Line Column 14 last pass
 80F9 [03] 3FA8      1093       clr     BotLin15L      ; Bottom Line Column 15 last pass
 80FB [03] 3FA9      1094       clr     BotLin16L      ; Bottom Line Column 16 last pass
 80FD [03] 3FAA      1095       clr     BotLin17L      ; Bottom Line Column 17 last pass
 80FF [03] 3FAB      1096       clr     BotLin18L      ; Bottom Line Column 18 last pass
 8101 [03] 3FAC      1097       clr     BotLin19L      ; Bottom Line Column 19last pass
 8103 [03] 3FAD      1098       clr     AC_100         ; 8 bit ASCII conversion 100s column
 8105 [03] 3FAE      1099       clr     AC_10          ; 8 bit ASCII conversion 10s column
 8107 [03] 3FAF      1100       clr     AC_1           ; 8 bit ASCII conversion 1s column
 8109 [03] 3FDD      1101       clr     map            ; Manifold Absolute Pressure in KPA
 810B [03] 3FDE      1102       clr     mat            ; Manifold Temperature in degrees F + 40
 810D [03] 3FDF      1103       clr     clt            ; Engine Coolant Temperature in degrees F + 40
 810F [03] 3FE0      1104       clr     volts          ; Battery (system) voltage
 8111 [03] 3FE1      1105       clr     egoV           ; Exhaust Gas Oxygen sensor voltage
 8113 [03] 3FE2      1106       clr     lambda         ; Exhaust Gas Oxygen lambda
 8115 [03] 3FE3      1107       clr     afr            ; Exhaust Gas Oxygen Air/Fuel Ratio
 8117 [03] 3FE4      1108       clr     duty           ; Injector duty cycle
 8119 [03] 3FE5      1109       clr     trmAng         ; Ignition Trim Angle
 811B [03] 3FE6      1110       clr     dlyAng         ; Ignition Delay Angle
 811D [03] 3FE7      1111       clr     timAng         ; Calculated Ignition Timing Angle
 811F [03] 3FE8      1112       clr     monTimAng      ; Monitored Ignition Timing Angle
 8121 [03] 3FE9      1113       clr     ltrHrH         ; Fuel burn in Litres per Hour x 10 Hi byte
 8123 [03] 3FEA      1114       clr     ltrHrL         ; Fuel burn in Litres per Hour x 10 Lo byte
 8125 [03] 3FEB      1115       clr     oprs           ; Engine oil pressure in PSI
 8127 [03] 3FEC      1116       clr     fprs           ; Fuel pressure in PSI
 8129 [03] 3FED      1117       clr     egtH           ; Exhaust temperature in degrees F Hi byte
 812B [03] 3FEE      1118       clr     egtL           ; Exhaust temperature in degrees F Lo byte
 812D [03] 3FEF      1119       clr     rpmH           ; Engine RPM Lo Res Hi Byte
 812F [03] 3FF0      1120       clr     rpmL           ; Engine RPM Lo Res Lo byte
 8131 [03] 3FF1      1121       clr     rpmhrH         ; Engine RPM Hi Res Hi Byte
 8133 [03] 3FF2      1122       clr     rpmhrL         ; Engine RPM Hi Res Lo byte
 8135 [03] 3FF3      1123       clr     monDlyAngFac   ; Monitored Delay Angle Factor
 8137 [03] 3FF4      1124       clr     monDlyAng      ; Monitored Delay Angle
 8139 [03] 3FF5      1125       clr     monFrngAng     ; Monitored Firing Angle
 813B [03] 3FF6      1126       clr     BnkFloH        ; Injector bank flow rate in cc/sec x 1,000,000 Hi byte
 813D [03] 3FF7      1127       clr     BnkFloL        ; Injector bank flow rate in cc/sec x 1,000,000 Lo byte
                     1128  
                     1129  
                     1130  
                     1131  
 813F [04] 6EFF56    1132       mov     #$FF,ScrnCnt_Lst     ; Move decimal 255 into "ScrnCnt_Lst"
 8142 [04] 6EFF59    1133       mov     #$FF,ConCnt_Lst      ; Move decimal 255 into "ConCnt_Lst"
                     1134  
                     1135  ;***************************************************************************
                     1136  ; - Delay while power stabilizes, allow MS and VFD to come up.
                     1137  ;   One pass through the primary loop takes ~1.5uS, so this delay is ~300mS
                     1138  ;   (minimum delay is 260mS)
                     1139  ;***************************************************************************
                     1140  
 8145 [05] CD9001    1141       jsr     DELAY300     ; Jump to subroutine at DELAY300:
                     1142  
                     1143  ;****************************************************************************
                     1144  ; Set up TIM2 as a free running ~1us counter. Set Channel 0 output compare
                     1145  ; to generate the ~1000us(1.0mS) clock tick interupt vector "TIM2CH0_ISR:"
                     1146  ;****************************************************************************
                     1147  
 8148 [04] 6E332B    1148       mov     #$33,T2SC       ; Move %00110011 into Timer2
                     1149                               ; Status and Control Register


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 13
MV351WM


                     1150                               ;(Disable interrupts, stop timer)
                     1151                               ;(Prescale and counter cleared))
                     1152                               ;(Prescale for bus frequency / 8)
 814B [04] 6EFF2E    1153       mov     #$FF,T2MODH     ; Move decimal 255 into T2 modulo reg Hi
 814E [04] 6EFF2F    1154       mov     #$FF,T2MODL     ; Move decimal 255 into T2 modulo reg Lo
                     1155                               ;(free running timer)
 8151 [04] 6E0331    1156       mov     #$03,T2CH0H     ; Move decimal 3 into T1CH0 O/C register Hi
 8154 [04] 6EE832    1157       mov     #$E8,T2CH0L     ; Move decimal 232 into T1CH0 O/C register Lo
                     1158                               ;(~1000uS)=(~1.0mS)
 8157 [04] 6E5430    1159       mov     #$54,T2SC0      ; Move %01010100 into Timer2
                     1160                               ; channel 0 status and control register
                     1161                               ; (Output compare, interrupt enabled)
 815A [04] 6E032B    1162       mov     #$03,T2SC       ; Move %00000011 into Timer2
                     1163                               ; Status and Control Register
                     1164                               ; Disable interrupts, counter Active
                     1165                               ; Prescale for bus frequency / 8
                     1166                               ; 8,003584hz/8=1000448hz
                     1167                               ; = .0000009995sec
                     1168  
                     1169  ;****************************************************************************
                     1170  ; - Enable Interrupts
                     1171  ;****************************************************************************
                     1172  
 815D [02] 9A        1173       cli              ; Clear interrupt mask ( Turn on all interrupts now )
                     1174  
                     1175  ;***************************************************************************
                     1176  ; ------------------------------ Initialize VFD ---------------------------
                     1177  ;
                     1178  ;  PTB4       - VFD Display Enable
                     1179  ;  PTB5       - VFD Display R/W
                     1180  ;  PTB6       - VFD Display RS
                     1181  ;  PTC0       - VFD Display data DB4
                     1182  ;  PTC1       - VFD Display data DB5
                     1183  ;  PTC2       - VFD Display data DB6
                     1184  ;  PTC3       - VFD Display data DB7
                     1185  ;
                     1186  ;***************************************************************************
                     1187  
                     1188  ;***************************************************************************
                     1189  ; - Clear EN, R/W, and RS
                     1190  ;***************************************************************************
                     1191  
 815E [04] 6E0001    1192       mov     #$00,PORTB     ; Move 0 into PortB(Clear all Port B)
                     1193                              ;("En"=0,"R/W"=0,"RS"=0)
                     1194  
                     1195  ;***************************************************************************
                     1196  ; - Initialize for 8 bit mode (Function Set)(do this 3 times)
                     1197  ;***************************************************************************
                     1198  
 8161 [04] 6E0302    1199       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1200                                ;(Set bit 0=DB4, and bit1=DB5)
 8164 [04] 1801      1201       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8166 [05] CD9163    1202       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8169 [04] 1901      1203       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 816B [05] CD916F    1204       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1205  
 816E [04] 6E0302    1206       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1207                                ;(Set bit 0=DB4, and bit1=DB5)
 8171 [04] 1801      1208       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8173 [05] CD9163    1209       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8176 [04] 1901      1210       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8178 [05] CD916F    1211       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1212  
 817B [04] 6E0302    1213       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1214                                ;(Set bit 0=DB4, and bit1=DB5)
 817E [04] 1801      1215       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8180 [05] CD9163    1216       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8183 [04] 1901      1217       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8185 [05] CD916F    1218       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1219  
                     1220  ;***************************************************************************
                     1221  ; - Set 4 bit bus mode Hi nibble (Function Set)
                     1222  ;***************************************************************************
                     1223  
 8188 [04] 6E0202    1224       mov     #$02,PORTC       ; Move %00000010 into PortC
                     1225                                ;(Set bit1=DB5)
 818B [04] 1801      1226       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 818D [05] CD9163    1227       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8190 [04] 1901      1228       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8192 [05] CD916F    1229       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1230  
                     1231  ;***************************************************************************
                     1232  ; - Set 4 bit bus mode Hi nibble (Function Set)
                     1233  ;***************************************************************************
                     1234  
 8195 [04] 6E0202    1235       mov     #$02,PORTC       ; Move %00000010 into PortC
                     1236                                ;(Set bit1=DB5)
 8198 [04] 1801      1237       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 819A [05] CD916F    1238       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 819D [04] 1901      1239       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1240  
                     1241  
                     1242  ;***************************************************************************
                     1243  ; - Set 4 bit bus mode Lo nibble (Function Set)
                     1244  ;***************************************************************************
                     1245  
 819F [04] 6E0802    1246       mov     #$08,PORTC       ; Move %00001000 into PortC(Set bit7=DB3)
 81A2 [04] 1801      1247       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81A4 [05] CD9163    1248       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81A7 [04] 1901      1249       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81A9 [05] CD916F    1250       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1251  
                     1252  ;***************************************************************************
                     1253  ; - Set brightness to 100% Hi nibble (Brightness Set)
                     1254  ;***************************************************************************
                     1255  
 81AC [04] 1C01      1256       bset    Reg_Sel,PORTB    ; Set "Reg_Sel" bit of PortB(RS=1)
 81AE [05] CD916F    1257       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81B1 [04] 6E0002    1258       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81B4 [04] 1801      1259       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81B6 [05] CD916F    1260       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81B9 [04] 1901      1261       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1262  
                     1263  ;***************************************************************************
                     1264  ; - Set brightness to 100% Lo nibble (Brightness Set)
                     1265  ;***************************************************************************
                     1266  
 81BB [04] 6E0002    1267       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81BE [04] 1801      1268       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81C0 [05] CD9163    1269       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81C3 [04] 1901      1270       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81C5 [05] CD916F    1271       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81C8 [04] 1D01      1272       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of PortB(RS=0)
                     1273  
                     1274  ;***************************************************************************
                     1275  ; - Set display off, cursor off, blinking off Hi nibble
                     1276  ;   (Display On/Off control)
                     1277  ;***************************************************************************
                     1278  
 81CA [04] 6E0002    1279       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81CD [04] 1801      1280       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81CF [05] CD916F    1281       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81D2 [04] 1901      1282       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1283  
                     1284  ;***************************************************************************
                     1285  ; - Set display off, cursor off, blinking off Lo nibble


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 14
MV351WM


                     1286  ;   (Display On/Off control)
                     1287  ;***************************************************************************
                     1288  
 81D4 [04] 6E0802    1289       mov     #$08,PORTC       ; Move %00001000 into PortC(Set bit7=DB3)
 81D7 [04] 1801      1290       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81D9 [05] CD9163    1291       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81DC [04] 1901      1292       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81DE [05] CD916F    1293       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1294  
                     1295  ;***************************************************************************
                     1296  ; - Set display clear Hi nibble(Display Clear)
                     1297  ;***************************************************************************
                     1298  
 81E1 [04] 6E0002    1299       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81E4 [04] 1801      1300       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81E6 [05] CD916F    1301       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81E9 [04] 1901      1302       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1303  
                     1304  ;***************************************************************************
                     1305  ; - Set display clear Lo nibble(Display Clear)
                     1306  ;***************************************************************************
                     1307  
 81EB [04] 6E0102    1308       mov     #$01,PORTC       ; Move %00000001 into PortC (Set bit0=DB0))
 81EE [04] 1801      1309       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81F0 [05] CD9163    1310       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81F3 [04] 1901      1311       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1312  
                     1313  ;***************************************************************************
                     1314  ; - Delay for command to execute (min 2.3mS)
                     1315  ;   One pass through the primary loop takes ~1.5uS, bus frequency of ~8mHZ
                     1316  ;***************************************************************************
                     1317  
 81F5 [03] 3F6A      1318       clr     tmp2       ; Clear tmp2 variable
                     1319  
                     1320  WAIT_6:
 81F7 [03] 3F69      1321       clr     tmp1       ; Clear tmp1 variable
                     1322  
                     1323  WAIT_5:
 81F9 [03] B669      1324       lda     tmp1       ; Load accumulator with value in tmp1 variable
 81FB [01] 4C        1325       inca               ; Increment value in accumulator
 81FC [03] B769      1326       sta     tmp1       ; Copy to tmp1 variable
 81FE [02] A1FF      1327       cmp     #$FF       ; Compare value in accumulator with decimal 255
 8200 [03] 25F7      1328       blo     WAIT_5     ; If C bit of CCR is set, (A<M), branch to WAIT_5:
 8202 [03] B66A      1329       lda     tmp2       ; Load accumulator with value in tmp2 variable
 8204 [01] 4C        1330       inca               ; Increment value in accumulator
 8205 [03] B76A      1331       sta     tmp2       ; Copy to tmp2 variable
 8207 [02] A107      1332       cmp     #$07       ; Compare value in accumulator with decimal 7
 8209 [03] 25EC      1333       blo     WAIT_6     ; If C bit of CCR is set, (A<M), branch to WAIT_6:
                     1334                          ;(~2.6mS delay)
                     1335  
                     1336  ;***************************************************************************
                     1337  ; - Set display on, cursor off, blinking off Hi nibble
                     1338  ;   (Display On/Off control)
                     1339  ;***************************************************************************
                     1340  
 820B [04] 6E0002    1341       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 820E [04] 1801      1342       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8210 [05] CD916F    1343       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8213 [04] 1901      1344       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1345  
                     1346  ;***************************************************************************
                     1347  ; - Set display on, cursor off, blinking off Lo nibble
                     1348  ;   (Display On/Off control)
                     1349  ;***************************************************************************
                     1350  
 8215 [04] 6E0C02    1351       mov     #$0C,PORTC       ; Move %00001100 into PortC
                     1352                                ;(Set bit7=DB3 and bit6=DB2)
 8218 [04] 1801      1353       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 821A [05] CD9163    1354       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 821D [04] 1901      1355       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 821F [05] CD916F    1356       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1357  
                     1358  ;***************************************************************************
                     1359  ; - Set cursor increment Hi nibble(Entry Mode Set)
                     1360  ;***************************************************************************
                     1361  
 8222 [04] 6E0002    1362       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 8225 [04] 1801      1363       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8227 [05] CD916F    1364       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 822A [04] 1901      1365       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1366  
                     1367  ;***************************************************************************
                     1368  ; - Set cursor increment Lo nibble(Entry Mode Set)
                     1369  ;***************************************************************************
                     1370  
 822C [04] 6E0602    1371       mov     #$06,PORTC       ; Move %00000110 into PortC
                     1372                                ;(Set bit6=DB2 and bit5=DB1)
 822F [04] 1801      1373       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8231 [05] CD9163    1374       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8234 [04] 1901      1375       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8236 [05] CD916F    1376       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1377  
                     1378  ;****************************************************************************
                     1379  ;****************************************************************************
                     1380  ;*                        M A I N  E V E N T  L O O P                       *
                     1381  ;****************************************************************************
                     1382  ;****************************************************************************
                     1383  
                     1384  LOOPY:
                     1385  
                     1386  ;****************************************************************************
                     1387  ; - Check control button states
                     1388  ;****************************************************************************
                     1389  
 8239 [05] CD8F73    1390       jsr     SW0_CHK     ; Jump to subroutine at SW0_CHK:
                     1391                           ;(Check he state of the Display Screen next
                     1392                           ; button on PTA0)
 823C [05] CD8FBA    1393       jsr     SW1_CHK     ; Jump to subroutine at SW1_CHK:
                     1394                           ;(Check he state of the Display Screen previous
                     1395                           ; button on PTA1)
                     1396  
 823F [05] 024F06    1397       brset   Sw1cls,Swflags,SCRL_D_RT   ; If "Sw1cls" bit of "Swflags"
                     1398                                          ; variable is set, branch to
                     1399                                          ; SCRL_D_RT
                     1400                                          ;(Scroll Right/Increment button is
                     1401                                          ; pressed)
 8242 [05] 004F17    1402       brset   Sw0cls,Swflags,SCRL_D_LFT  ; If "Sw0cls" bit of "Swflags"
                     1403                                          ; variable is set, branch to
                     1404                                          ; SCRL_D_LFT
                     1405                                          ;(Scroll Left/Decrement button is
                     1406                                          ; pressed)
 8245 [03] CC826C    1407       jmp     DSPLY_MODE                 ; Jump to DSPLY_MODE:
                     1408  
                     1409  SCRL_D_RT:
                     1410  
                     1411  ;****************************************************************************
                     1412  ; - Increment the Display Screen number.
                     1413  ;****************************************************************************
                     1414  
                     1415  INC_SCRNCNT:
 8248 [03] B655      1416       lda     ScrnCnt_prv     ; Load accumulator with value in "ScrnCnt_prv"
 824A [02] A112      1417       cmp     #$12            ; Compare with decimal 18
 824C [03] 2704      1418       beq     RTN_TO_0_D      ; If Z bit of CCR is set, branch to RTN_TO_0_D
                     1419                               ;("ScrnCnt_prv" = 18 so return to screen 0)
 824E [04] 3C54      1420       inc     ScrnCnt         ; Increment "ScrnCnt" variable
 8250 [03] 2002      1421       bra     SCRL_D_RT_DONE  ; Branch to SCRL_D_RT_DONE:


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 15
MV351WM


                     1422  
                     1423  RTN_TO_0_D:
 8252 [03] 3F54      1424      clr     ScrnCnt          ; Clear "ScrnCnt" variable(ScrnCnt = 0)
                     1425  
                     1426  SCRL_D_RT_DONE:
 8254 [05] 4E5455    1427       mov     ScrnCnt,ScrnCnt_prv  ; Move value in "ScrnCnt" to ScrnCnt_prv"
 8257 [04] 134F      1428       bclr    Sw1cls,Swflags       ; Clear "Sw1cls" bit of "Swflags" variable
 8259 [03] CC826C    1429       jmp     DSPLY_MODE           ; Jump to DSPLY_MODE:
                     1430  
                     1431  
                     1432  SCRL_D_LFT:
                     1433  
                     1434  ;****************************************************************************
                     1435  ; - Decrement the Display Screen number.
                     1436  ;****************************************************************************
                     1437  
                     1438  
                     1439  DEC_SCRNCNT:
 825C [03] B655      1440       lda     ScrnCnt_prv      ; Load accumulator with value in "ScrnCnt_prv"
 825E [03] 2704      1441       beq     RTN_TO_18        ; If Z bit of CCR is set, branch to RTN_TO_18
                     1442                                ;("ScrnCnt_prv" = 0 so return to screen 18)
 8260 [04] 3A54      1443       dec     ScrnCnt          ; Decrement "ScrnCnt" variable
 8262 [03] 2003      1444       bra     SCRL_D_LFT_DONE  ; Branch to SCRL_D_LFT_DONE:
                     1445  
                     1446  RTN_TO_18:
 8264 [04] 6E1254    1447      mov     #$12,ScrnCnt      ; Move decimal 18 into "ScrnCnt" variable
                     1448  
                     1449  SCRL_D_LFT_DONE:
 8267 [05] 4E5455    1450       mov     ScrnCnt,ScrnCnt_prv  ; Move value in "ScrnCnt" to ScrnCnt_prv"
 826A [04] 114F      1451       bclr    Sw0cls,Swflags       ; Clear "Sw0cls" bit of "Swflags" variable
                     1452  
                     1453  
                     1454  DSPLY_MODE:
                     1455  
                     1456  ;****************************************************************************
                     1457  ; - Using the screen count number, determine the appropriate array for the
                     1458  ;   top line of the display and print it.
                     1459  ;
                     1460  ; - First, compare the desired screen count number with the screen count
                     1461  ;   number on the last pass through the main loop. If it is the same, skip
                     1462  ;   over, otherwise update the top line of the display. This is to eliminate
                     1463  ;   "digit rattle" caused by rapid screen updates.
                     1464  ;****************************************************************************
                     1465  
                     1466  TOPLIN_SUB:
 826C [03] B654      1467       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 826E [03] B156      1468       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 8270 [03] 2706      1469       beq     NO_CHNG_TOP          ; If Z bit of CCR is clear, branch to
                     1470                                    ; NO_CHNG_TOP:(ScrnCnt_Lst = ScrnCnt)
 8272 [05] CD9023    1471       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 8275 [05] 4E5456    1472       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     1473  
                     1474  NO_CHNG_TOP:
                     1475  
                     1476  DISP_BOT:
                     1477  
                     1478  ;****************************************************************************
                     1479  ; - We have 20 variables in RAM in ordered list(BotLin0 through BotLin19)
                     1480  ;   which have been initialized to ASCII $20(blank space). The variable
                     1481  ;   "DisVal" contains the offset value from the entry point of the ordered
                     1482  ;   list of variables, beginning at the variable "secl". "DisVal" matches
                     1483  ;   the variable's abbreviation on the top line on the display. Using
                     1484  ;   "DisVal", we do an ASCII conversion of each variable, and overwrite the
                     1485  ;   3 blank spaces on the bottom line beneath the matching variable
                     1486  ;   abreviation, with the appropriate numbers.
                     1487  ;****************************************************************************
                     1488  
                     1489  
                     1490  ;****************************************************************************
                     1491  ; - Load the over-write values for the bottom line string.
                     1492  ;****************************************************************************
                     1493  
 8278 [05] CD9032    1494       jsr     LOAD_SPACE             ; Jump to subroutine at LOAD_SPACE:
                     1495  
                     1496  ;****************************************************************************
                     1497  ; - Determine which screen we are in, and prepare the appropriate string for
                     1498  ;   the bottom line of the VFD
                     1499  ;****************************************************************************
                     1500  
 827B [03] B654      1501       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 827D [04] 410039    1502       cbeqa   #$00,SCRN_0_JMP      ; Compare and branch to SCRN_0_JMP:,
                     1503                                    ; if equal to decimal 0
 8280 [04] 410139    1504       cbeqa   #$01,SCRN_1_JMP      ; Compare and branch to SCRN_1_JMP:,
                     1505                                    ; if equal to decimal 1
 8283 [04] 410239    1506       cbeqa   #$02,SCRN_2_JMP      ; Compare and branch to SCRN_2_JMP:,
                     1507                                    ; if equal to decimal 2
 8286 [04] 410339    1508       cbeqa   #$03,SCRN_3_JMP      ; Compare and branch to SCRN_3_JMP:,
                     1509                                    ; if equal to decimal 3
 8289 [04] 410439    1510       cbeqa   #$04,SCRN_4_JMP      ; Compare and branch to SCRN_4_JMP:,
                     1511                                    ; if equal to decimal 4
 828C [04] 410539    1512       cbeqa   #$05,SCRN_5_JMP      ; Compare and branch to SCRN_5_JMP:,
                     1513                                    ; if equal to decimal 5
 828F [04] 410639    1514       cbeqa   #$06,SCRN_6_JMP      ; Compare and branch to SCRN_6_JMP:,
                     1515                                    ; if equal to decimal 6
 8292 [04] 410739    1516       cbeqa   #$07,SCRN_7_JMP      ; Compare and branch to SCRN_7_JMP:,
                     1517                                    ; if equal to decimal 7
 8295 [04] 410839    1518       cbeqa   #$08,SCRN_8_JMP      ; Compare and branch to SCRN_8_JMP:,
                     1519                                    ; if equal to decimal 8
 8298 [04] 410939    1520       cbeqa   #$09,SCRN_9_JMP      ; Compare and branch to SCRN_9_JMP:,
                     1521                                    ; if equal to decimal 9
 829B [04] 410A39    1522       cbeqa   #$0A,SCRN_10_JMP     ; Compare and branch to SCRN_10_JMP:,
                     1523                                    ; if equal to decimal 10
 829E [04] 410B39    1524       cbeqa   #$0B,SCRN_11_JMP     ; Compare and branch to SCRN_11_JMP:,
                     1525                                    ; if equal to decimal 11
 82A1 [04] 410C39    1526       cbeqa   #$0C,SCRN_12_JMP     ; Compare and branch to SCRN_12_JMP:,
                     1527                                    ; if equal to decimal 12
 82A4 [04] 410D39    1528       cbeqa   #$0D,SCRN_13_JMP     ; Compare and branch to SCRN_13_JMP:,
                     1529                                    ; if equal to decimal 13
 82A7 [04] 410E39    1530       cbeqa   #$0E,SCRN_14_JMP     ; Compare and branch to SCRN_14_JMP:,
                     1531                                    ; if equal to decimal 14
 82AA [04] 410F39    1532       cbeqa   #$0F,SCRN_15_JMP     ; Compare and branch to SCRN_15_JMP:,
                     1533                                    ; if equal to decimal 15
 82AD [04] 411039    1534       cbeqa   #$10,SCRN_16_JMP     ; Compare and branch to SCRN_16_JMP:,
                     1535                                    ; if equal to decimal 16
 82B0 [04] 411139    1536       cbeqa   #$11,SCRN_17_JMP     ; Compare and branch to SCRN_17_JMP:,
                     1537                                    ; if equal to decimal 17
 82B3 [04] 411239    1538       cbeqa   #$12,SCRN_18_JMP     ; Compare and branch to SCRN_18_JMP:,
                     1539                                    ; if equal to decimal 18
 82B6 [03] CC8239    1540       jmp     LOOPY                ; Jump to LOOPY(sanity check)
                     1541  
                     1542  
                     1543  SCRN_0_JMP:
 82B9 [03] CC82F2    1544       jmp     SCRN_0         ; Jump to SCRN_0:(Long branch)
                     1545  
                     1546  SCRN_1_JMP:
 82BC [03] CC837E    1547       jmp     SCRN_1         ; Jump to SCRN_1:(Long branch)
                     1548  
                     1549  SCRN_2_JMP:
 82BF [03] CC8404    1550       jmp     SCRN_2         ; Jump to SCRN_2:(Long branch)
                     1551  
                     1552  SCRN_3_JMP:
 82C2 [03] CC848B    1553       jmp     SCRN_3         ; Jump to SCRN_3:(Long branch)
                     1554  
                     1555  SCRN_4_JMP:
 82C5 [03] CC850E    1556       jmp     SCRN_4         ; Jump to SCRN_4:(Long branch)
                     1557  


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 16
MV351WM


                     1558  SCRN_5_JMP:
 82C8 [03] CC859A    1559       jmp     SCRN_5         ; Jump to SCRN_5:(Long branch)
                     1560  
                     1561  SCRN_6_JMP:
 82CB [03] CC8610    1562       jmp     SCRN_6         ; Jump to SCRN_6:(Long branch)
                     1563  
                     1564  SCRN_7_JMP:
 82CE [03] CC8692    1565       jmp     SCRN_7         ; Jump to SCRN_7:(Long branch)
                     1566  
                     1567  SCRN_8_JMP:
 82D1 [03] CC86FC    1568       jmp     SCRN_8         ; Jump to SCRN_8:(Long branch)
                     1569  
                     1570  SCRN_9_JMP:
 82D4 [03] CC8778    1571       jmp     SCRN_9         ; Jump to SCRN_9:(Long branch)
                     1572  
                     1573  SCRN_10_JMP:
 82D7 [03] CC87F8    1574       jmp     SCRN_10        ; Jump to SCRN_10:(Long branch)
                     1575  
                     1576  SCRN_11_JMP:
 82DA [03] CC8861    1577       jmp     SCRN_11        ; Jump to SCRN_11:(Long branch)
                     1578  
                     1579  SCRN_12_JMP:
 82DD [03] CC88D0    1580       jmp     SCRN_12        ; Jump to SCRN_12:(Long branch)
                     1581  
                     1582  SCRN_13_JMP:
 82E0 [03] CC8950    1583       jmp     SCRN_13        ; Jump to SCRN_13:(Long branch)
                     1584  
                     1585  SCRN_14_JMP:
 82E3 [03] CC89D4    1586       jmp     SCRN_14        ; Jump to SCRN_14:(Long branch)
                     1587  
                     1588  SCRN_15_JMP:
 82E6 [03] CC8A54    1589       jmp     SCRN_15        ; Jump to SCRN_15:(Long branch)
                     1590  
                     1591  SCRN_16_JMP:
 82E9 [03] CC8ADD    1592       jmp     SCRN_16        ; Jump to SCRN_16:(Long branch)
                     1593  
                     1594  SCRN_17_JMP:
 82EC [03] CC8B55    1595       jmp     SCRN_17        ; Jump to SCRN_17:(Long branch)
                     1596  
                     1597  SCRN_18_JMP:
 82EF [03] CC8BB7    1598       jmp     SCRN_18        ; Jump to SCRN_18:(Long branch)
                     1599  
                     1600  
                     1601  
                     1602  SCRN_0:
 82F2 [05] CD8E30    1603       jsr     CALC_RPM_HR       ; Jump to subroutine at CALC_RPM_HR:
 82F5 [03] B6F1      1604       lda     rpmhrH            ; Load accumulator with value in "rpmhrH"
 82F7 [03] B763      1605       sta     intacc1+2         ; Copy to "intacc1+2"
 82F9 [03] B6F2      1606       lda     rpmhrL            ; Load accumulator with value in "rpmhrL"
 82FB [03] B764      1607       sta     intacc1+3         ; Copy to "intacc1+3"
 82FD [05] CD8F23    1608       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8300 [03] B6B0      1609       lda     thousands         ; Load accumulator with value in "thousands"
 8302 [03] B785      1610       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8304 [03] B6B1      1611       lda     hundreds          ; Load accumulator with value in "hundreds"
 8306 [03] B786      1612       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8308 [03] B6B2      1613       lda     tens              ; Load accumulator with value in "tens"
 830A [03] B787      1614       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 830C [03] B6B3      1615       lda     ones              ; Load accumulator with value in "ones"
 830E [03] B788      1616       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8310 [02] A620      1617       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8312 [03] B789      1618       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8314 [05] CD8CDB    1619       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 8317 [03] B6DD      1620       lda     map               ; Load accumulator with value in "map"
 8319 [03] B784      1621       sta     DisVal            ; Copy to "DisVal" variable
 831B [05] CD8F0F    1622       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 831E [03] B6AD      1623       lda     AC_100            ; Load accumulator with value in "AC_100"
 8320 [03] B78A      1624       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8322 [03] B6AE      1625       lda     AC_10             ; Load accumulator with value in "AC_10"
 8324 [03] B78B      1626       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8326 [03] B6AF      1627       lda     AC_1              ; Load accumulator with value in "AC_1"
 8328 [03] B78C      1628       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 832A [02] A620      1629       lda     #$20              ; Load accumulator with ASCII ' '(space)
 832C [03] B78D      1630       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 832E [05] CD8D7C    1631       jsr     CALC_LAMBDA       ; Jump to subroutine at CALC_LAMBDA:
 8331 [05] CD8D2A    1632       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 8334 [03] B6E3      1633       lda     afr               ; Load accumulator with value in "afr"
 8336 [03] B784      1634       sta     DisVal            ; Copy to "DisVal" variable
 8338 [05] CD8F0F    1635       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 833B [03] B6AD      1636       lda     AC_100            ; Load accumulator with value in "AC_100"
 833D [03] B78E      1637       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 833F [03] B6AE      1638       lda     AC_10             ; Load accumulator with value in "AC_10"
 8341 [03] B78F      1639       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8343 [03] B6AF      1640       lda     AC_1              ; Load accumulator with value in "AC_1"
 8345 [03] B790      1641       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8347 [02] A620      1642       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8349 [03] B791      1643       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 834B [05] CD8CEF    1644       jsr     CALC_CLT          ; Jump to subroutine at CALC_CLT:
 834E [03] B6DF      1645       lda     clt               ; Load accumulator with value in "clt"
 8350 [03] B784      1646       sta     DisVal            ; Copy to "DisVal" variable
 8352 [05] CD8F0F    1647       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8355 [03] B6AD      1648       lda     AC_100            ; Load accumulator with value in "AC_100"
 8357 [03] B792      1649       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8359 [03] B6AE      1650       lda     AC_10             ; Load accumulator with value in "AC_10"
 835B [03] B793      1651       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 835D [03] B6AF      1652       lda     AC_1              ; Load accumulator with value in "AC_1"
 835F [03] B794      1653       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8361 [02] A620      1654       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8363 [03] B795      1655       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8365 [05] CD8CE5    1656       jsr     CALC_MAT          ; Jump to subroutine at CALC_MAT:
 8368 [03] B6DE      1657       lda     mat               ; Load accumulator with value in "mat"
 836A [03] B784      1658       sta     DisVal            ; Copy to "DisVal" variable
 836C [05] CD8F0F    1659       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 836F [03] B6AD      1660       lda     AC_100            ; Load accumulator with value in "AC_100"
 8371 [03] B796      1661       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8373 [03] B6AE      1662       lda     AC_10             ; Load accumulator with value in "AC_10"
 8375 [03] B797      1663       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8377 [03] B6AF      1664       lda     AC_1              ; Load accumulator with value in "AC_1"
 8379 [03] B798      1665       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 837B [03] CC8C2C    1666       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1667  
                     1668  SCRN_1:
 837E [03] B6D6      1669       lda     tpsp              ; Load accumulator with value in "tpsp"
 8380 [03] B784      1670       sta     DisVal            ; Copy to "DisVal" variable
 8382 [05] CD8F0F    1671       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8385 [03] B6AD      1672       lda     AC_100            ; Load accumulator with value in "AC_100"
 8387 [03] B785      1673       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8389 [03] B6AE      1674       lda     AC_10             ; Load accumulator with value in "AC_10"
 838B [03] B786      1675       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 838D [03] B6AF      1676       lda     AC_1              ; Load accumulator with value in "AC_1"
 838F [03] B787      1677       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8391 [02] A620      1678       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8393 [03] B788      1679       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8395 [05] CD8D8D    1680       jsr     CALC_OP           ; Jump to subroutine at CALC_OP:
 8398 [03] B6EB      1681       lda     oprs              ; Load accumulator with value in "oprs"
 839A [03] B784      1682       sta     DisVal            ; Copy to "DisVal" variable
 839C [05] CD8F0F    1683       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 839F [03] B6AD      1684       lda     AC_100            ; Load accumulator with value in "AC_100"
 83A1 [03] B789      1685       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 83A3 [03] B6AE      1686       lda     AC_10             ; Load accumulator with value in "AC_10"
 83A5 [03] B78A      1687       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 83A7 [03] B6AF      1688       lda     AC_1              ; Load accumulator with value in "AC_1"
 83A9 [03] B78B      1689       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 83AB [02] A620      1690       lda     #$20              ; Load accumulator with ASCII ' '(space)
 83AD [03] B78C      1691       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 83AF [05] CD8DA3    1692       jsr     CALC_FP           ; Jump to subroutine at CALC_FP:
 83B2 [03] B6EC      1693       lda     fprs              ; Load accumulator with value in "fprs"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 17
MV351WM


 83B4 [03] B784      1694       sta     DisVal            ; Copy to "DisVal" variable
 83B6 [05] CD8F0F    1695       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 83B9 [03] B6AD      1696       lda     AC_100            ; Load accumulator with value in "AC_100"
 83BB [03] B78D      1697       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 83BD [03] B6AE      1698       lda     AC_10             ; Load accumulator with value in "AC_10"
 83BF [03] B78E      1699       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 83C1 [03] B6AF      1700       lda     AC_1              ; Load accumulator with value in "AC_1"
 83C3 [03] B78F      1701       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 83C5 [02] A620      1702       lda     #$20              ; Load accumulator with ASCII ' '(space)
 83C7 [03] B790      1703       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 83C9 [05] CD8DB9    1704       jsr     CALC_EGT          ; Jump to subroutine at CALC_EGT:
 83CC [03] B6ED      1705       lda     egtH              ; Load accumulator with value in "egtH"
 83CE [03] B763      1706       sta     intacc1+2         ; Copy to "intacc1+2"
 83D0 [03] B6EE      1707       lda     egtL              ; Load accumulator with value in "egtL"
 83D2 [03] B764      1708       sta     intacc1+3         ; Copy to "intacc1+3"
 83D4 [05] CD8F23    1709       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 83D7 [03] B6B0      1710       lda     thousands         ; Load accumulator with value in "thousands"
 83D9 [03] B791      1711       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 83DB [03] B6B1      1712       lda     hundreds          ; Load accumulator with value in "hundreds"
 83DD [03] B792      1713       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 83DF [03] B6B2      1714       lda     tens              ; Load accumulator with value in "tens"
 83E1 [03] B793      1715       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 83E3 [03] B6B3      1716       lda     ones              ; Load accumulator with value in "ones"
 83E5 [03] B794      1717       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 83E7 [02] A620      1718       lda     #$20              ; Load accumulator with ASCII ' '(space)
 83E9 [03] B795      1719       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 83EB [05] CD8CF9    1720       jsr     CALC_VOLTS        ; Jump to subroutine at CALC_VOLTS:
 83EE [03] B6E0      1721       lda     volts             ; Load accumulator with value in "volts"
 83F0 [03] B784      1722       sta     DisVal            ; Copy to "DisVal" variable
 83F2 [05] CD8F0F    1723       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 83F5 [03] B6AD      1724       lda     AC_100            ; Load accumulator with value in "AC_100"
 83F7 [03] B796      1725       sta     Botlin17           ; Copy to "BotLin17"(18th column on left, bottom line)
 83F9 [03] B6AE      1726       lda     AC_10             ; Load accumulator with value in "AC_10"
 83FB [03] B797      1727       sta     Botlin18           ; Copy to "BotLin18"(19th column on left, bottom line)
 83FD [03] B6AF      1728       lda     AC_1              ; Load accumulator with value in "AC_1"
 83FF [03] B798      1729       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8401 [03] CC8C2C    1730       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1731  
                     1732  SCRN_2:
 8404 [02] A620      1733       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8406 [03] B785      1734       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8408 [05] CD8E24    1735       jsr     CALC_RPM          ; Jump to subroutine at CALC_RPM:
 840B [03] B6EF      1736       lda     rpmH              ; Load accumulator with value in "rpmH"
 840D [03] B763      1737       sta     intacc1+2         ; Copy to "intacc1+2"
 840F [03] B6F0      1738       lda     rpmL              ; Load accumulator with value in "rpmL"
 8411 [03] B764      1739       sta     intacc1+3         ; Copy to "intacc1+3"
 8413 [05] CD8F23    1740       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8416 [03] B6B0      1741       lda     thousands         ; Load accumulator with value in "thousands"
 8418 [03] B786      1742       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 841A [03] B6B1      1743       lda     hundreds          ; Load accumulator with value in "hundreds"
 841C [03] B787      1744       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 841E [03] B6B2      1745       lda     tens              ; Load accumulator with value in "tens"
 8420 [03] B788      1746       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8422 [03] B6B3      1747       lda     ones              ; Load accumulator with value in "ones"
 8424 [03] B789      1748       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8426 [02] A620      1749       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8428 [03] B78A      1750       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 842A [05] CD8D2A    1751       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 842D [03] B6E3      1752       lda     afr               ; Load accumulator with value in "afr"
 842F [03] B784      1753       sta     DisVal            ; Copy to "DisVal" variable
 8431 [05] CD8F0F    1754       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8434 [03] B6AD      1755       lda     AC_100            ; Load accumulator with value in "AC_100"
 8436 [03] B78B      1756       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8438 [03] B6AE      1757       lda     AC_10             ; Load accumulator with value in "AC_10"
 843A [03] B78C      1758       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 843C [03] B6AF      1759       lda     AC_1              ; Load accumulator with value in "AC_1"
 843E [03] B78D      1760       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8440 [02] A620      1761       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8442 [03] B78E      1762       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8444 [03] B6CD      1763       lda     fdSecH            ; Load accumulator with value in "fdSecH"
 8446 [03] B763      1764       sta     intacc1+2         ; Copy to "intacc1+2"
 8448 [03] B6CE      1765       lda     fdSecL            ; Load accumulator with value in "fdSecLL"
 844A [03] B764      1766       sta     intacc1+3         ; Copy to "intacc1+3"
 844C [05] CD8F01    1767       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 844F [05] CD8F23    1768       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8452 [03] B6B0      1769       lda     thousands         ; Load accumulator with value in "thousands"
 8454 [03] B78F      1770       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8456 [03] B6B1      1771       lda     hundreds          ; Load accumulator with value in "hundreds"
 8458 [03] B790      1772       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 845A [03] B6B2      1773       lda     tens              ; Load accumulator with value in "tens"
 845C [03] B791      1774       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 845E [03] B6B3      1775       lda     ones              ; Load accumulator with value in "ones"
 8460 [03] B792      1776       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8462 [02] A620      1777       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8464 [03] B793      1778       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8466 [05] CD8ECA    1779       jsr     CALC_L_HR         ; Jump to subroutine at CALC_L_HR:
 8469 [03] B6E9      1780       lda     ltrHrH            ; Load accumulator with value in "ltrHrH"
 846B [03] B763      1781       sta     intacc1+2         ; Copy to "intacc1+2"
 846D [03] B6EA      1782       lda     ltrHrL            ; Load accumulator with value in "ltrHrL"
 846F [03] B764      1783       sta     intacc1+3         ; Copy to "intacc1+3"
 8471 [05] CD8F23    1784       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8474 [03] B6B0      1785       lda     thousands         ; Load accumulator with value in "thousands"
 8476 [03] B794      1786       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8478 [03] B6B1      1787       lda     hundreds          ; Load accumulator with value in "hundreds"
 847A [03] B795      1788       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 847C [03] B6B2      1789       lda     tens              ; Load accumulator with value in "tens"
 847E [03] B796      1790       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8480 [03] B6B3      1791       lda     ones              ; Load accumulator with value in "ones"
 8482 [03] B797      1792       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8484 [02] A620      1793       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8486 [03] B798      1794       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8488 [03] CC8C2C    1795       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1796  
                     1797  SCRN_3:
 848B [05] CD8E30    1798       jsr     CALC_RPM_HR       ; Jump to subroutine at CALC_RPM_HR:
 848E [03] B6F1      1799       lda     rpmhrH            ; Load accumulator with value in "rpmhrH"
 8490 [03] B763      1800       sta     intacc1+2         ; Copy to "intacc1+2"
 8492 [03] B6F2      1801       lda     rpmhrL            ; Load accumulator with value in "rpmhrL"
 8494 [03] B764      1802       sta     intacc1+3         ; Copy to "intacc1+3"
 8496 [05] CD8F23    1803       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8499 [03] B6B0      1804       lda     thousands         ; Load accumulator with value in "thousands"
 849B [03] B785      1805       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 849D [03] B6B1      1806       lda     hundreds          ; Load accumulator with value in "hundreds"
 849F [03] B786      1807       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 84A1 [03] B6B2      1808       lda     tens              ; Load accumulator with value in "tens"
 84A3 [03] B787      1809       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 84A5 [03] B6B3      1810       lda     ones              ; Load accumulator with value in "ones"
 84A7 [03] B788      1811       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 84A9 [02] A620      1812       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84AB [03] B789      1813       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 84AD [05] CD8CDB    1814       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 84B0 [03] B6DD      1815       lda     map               ; Load accumulator with value in "map"
 84B2 [03] B784      1816       sta     DisVal            ; Copy to "DisVal" variable
 84B4 [05] CD8F0F    1817       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84B7 [03] B6AD      1818       lda     AC_100            ; Load accumulator with value in "AC_100"
 84B9 [03] B78A      1819       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 84BB [03] B6AE      1820       lda     AC_10             ; Load accumulator with value in "AC_10"
 84BD [03] B78B      1821       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 84BF [03] B6AF      1822       lda     AC_1              ; Load accumulator with value in "AC_1"
 84C1 [03] B78C      1823       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 84C3 [02] A620      1824       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84C5 [03] B78D      1825       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 84C7 [05] CD8D2A    1826       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 84CA [03] B6E3      1827       lda     afr               ; Load accumulator with value in "afr"
 84CC [03] B784      1828       sta     DisVal            ; Copy to "DisVal" variable
 84CE [05] CD8F0F    1829       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 18
MV351WM


 84D1 [03] B6AD      1830       lda     AC_100            ; Load accumulator with value in "AC_100"
 84D3 [03] B78E      1831       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 84D5 [03] B6AE      1832       lda     AC_10             ; Load accumulator with value in "AC_10"
 84D7 [03] B78F      1833       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 84D9 [03] B6AF      1834       lda     AC_1              ; Load accumulator with value in "AC_1"
 84DB [03] B790      1835       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 84DD [02] A620      1836       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84DF [03] B791      1837       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 84E1 [03] B6C4      1838       lda     Ftrimcor          ; Load accumulator with value in "Ftrimcor"
 84E3 [03] B784      1839       sta     DisVal            ; Copy to "DisVal" variable
 84E5 [05] CD8F0F    1840       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84E8 [03] B6AD      1841       lda     AC_100            ; Load accumulator with value in "AC_100"
 84EA [03] B792      1842       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 84EC [03] B6AE      1843       lda     AC_10             ; Load accumulator with value in "AC_10"
 84EE [03] B793      1844       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 84F0 [03] B6AF      1845       lda     AC_1              ; Load accumulator with value in "AC_1"
 84F2 [03] B794      1846       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 84F4 [02] A620      1847       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84F6 [03] B795      1848       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 84F8 [03] B6CB      1849       lda     pw                ; Load accumulator with value in "pw"
 84FA [03] B784      1850       sta     DisVal            ; Copy to "DisVal" variable
 84FC [05] CD8F0F    1851       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84FF [03] B6AD      1852       lda     AC_100            ; Load accumulator with value in "AC_100"
 8501 [03] B796      1853       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8503 [03] B6AE      1854       lda     AC_10             ; Load accumulator with value in "AC_10"
 8505 [03] B797      1855       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8507 [03] B6AF      1856       lda     AC_1              ; Load accumulator with value in "AC_1"
 8509 [03] B798      1857       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 850B [03] CC8C2C    1858       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1859  
                     1860  SCRN_4:
 850E [05] CD8E30    1861       jsr     CALC_RPM_HR       ; Jump to subroutine at CALC_RPM_HR:
 8511 [03] B6F1      1862       lda     rpmhrH            ; Load accumulator with value in "rpmhrH"
 8513 [03] B763      1863       sta     intacc1+2         ; Copy to "intacc1+2"
 8515 [03] B6F2      1864       lda     rpmhrL            ; Load accumulator with value in "rpmhrL"
 8517 [03] B764      1865       sta     intacc1+3         ; Copy to "intacc1+3"
 8519 [05] CD8F23    1866       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 851C [03] B6B0      1867       lda     thousands         ; Load accumulator with value in "thousands"
 851E [03] B785      1868       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8520 [03] B6B1      1869       lda     hundreds          ; Load accumulator with value in "hundreds"
 8522 [03] B786      1870       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8524 [03] B6B2      1871       lda     tens              ; Load accumulator with value in "tens"
 8526 [03] B787      1872       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 8528 [03] B6B3      1873       lda     ones              ; Load accumulator with value in "ones"
 852A [03] B788      1874       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 852C [02] A620      1875       lda     #$20              ; Load accumulator with ASCII ' '(space)
 852E [03] B789      1876       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8530 [05] CD8CDB    1877       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 8533 [03] B6DD      1878       lda     map               ; Load accumulator with value in "map"
 8535 [03] B784      1879       sta     DisVal            ; Copy to "DisVal" variable
 8537 [05] CD8F0F    1880       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 853A [03] B6AD      1881       lda     AC_100            ; Load accumulator with value in "AC_100"
 853C [03] B78A      1882       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 853E [03] B6AE      1883       lda     AC_10             ; Load accumulator with value in "AC_10"
 8540 [03] B78B      1884       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8542 [03] B6AF      1885       lda     AC_1              ; Load accumulator with value in "AC_1"
 8544 [03] B78C      1886       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8546 [02] A620      1887       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8548 [03] B78D      1888       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 854A [05] CD8E5C    1889       jsr     CALC_TRIM_ANG     ; Jump to subroutine at CALC_TRIM_ANG:
 854D [03] B6E5      1890       lda     trmAng            ; Load accumulator with value in "trmAng"
 854F [03] B784      1891       sta     DisVal            ; Copy to "DisVal" variable
 8551 [05] CD8F0F    1892       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8554 [03] B6AD      1893       lda     AC_100            ; Load accumulator with value in "AC_100"
 8556 [03] B78E      1894       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8558 [03] B6AE      1895       lda     AC_10             ; Load accumulator with value in "AC_10"
 855A [03] B78F      1896       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 855C [03] B6AF      1897       lda     AC_1              ; Load accumulator with value in "AC_1"
 855E [03] B790      1898       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8560 [02] A620      1899       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8562 [03] B791      1900       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8564 [05] CD8E75    1901       jsr     CALC_DLY_ANG      ; Jump to subroutine at CALC_DELA_ANG:
 8567 [05] CD8E86    1902       jsr     CALC_TIM_ANG      ; Jump to subroutine at CALC_TIM_ANG:
 856A [03] B6E7      1903       lda     timAng            ; Load accumulator with value in "timAng"
 856C [03] B784      1904       sta     DisVal            ; Copy to "DisVal" variable
 856E [05] CD8F0F    1905       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8571 [03] B6AD      1906       lda     AC_100            ; Load accumulator with value in "AC_100"
 8573 [03] B792      1907       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8575 [03] B6AE      1908       lda     AC_10             ; Load accumulator with value in "AC_10"
 8577 [03] B793      1909       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8579 [03] B6AF      1910       lda     AC_1              ; Load accumulator with value in "AC_1"
 857B [03] B794      1911       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 857D [02] A620      1912       lda     #$20              ; Load accumulator with ASCII ' '(space)
 857F [03] B795      1913       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8581 [05] CD8E8F    1914       jsr     CALC_MON_TIM_ANG  ; Jump to subroutine at CALC_MON_TIM_ANG:
 8584 [03] B6E8      1915       lda     monTimAng         ; Load accumulator with value in "monTimAng"
 8586 [03] B784      1916       sta     DisVal            ; Copy to "DisVal" variable
 8588 [05] CD8F0F    1917       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 858B [03] B6AD      1918       lda     AC_100            ; Load accumulator with value in "AC_100"
 858D [03] B796      1919       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 858F [03] B6AE      1920       lda     AC_10             ; Load accumulator with value in "AC_10"
 8591 [03] B797      1921       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8593 [03] B6AF      1922       lda     AC_1              ; Load accumulator with value in "AC_1"
 8595 [03] B798      1923       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8597 [03] CC8C2C    1924       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1925  
                     1926  SCRN_5:
 859A [02] A620      1927       lda     #$20              ; Load accumulator with ASCII ' '(space)
 859C [03] B785      1928       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 859E [03] B6C5      1929       lda     gammae            ; Load accumulator with value in "gammae"
 85A0 [03] B784      1930       sta     DisVal            ; Copy to "DisVal" variable
 85A2 [05] CD8F0F    1931       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85A5 [03] B6AD      1932       lda     AC_100            ; Load accumulator with value in "AC_100"
 85A7 [03] B786      1933       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 85A9 [03] B6AE      1934       lda     AC_10             ; Load accumulator with value in "AC_10"
 85AB [03] B787      1935       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 85AD [03] B6AF      1936       lda     AC_1              ; Load accumulator with value in "AC_1"
 85AF [03] B788      1937       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 85B1 [02] A620      1938       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85B3 [03] B789      1939       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 85B5 [03] B6C2      1940       lda     warmcor            ; Load accumulator with value in "warmcor"
 85B7 [03] B784      1941       sta     DisVal            ; Copy to "DisVal" variable
 85B9 [05] CD8F0F    1942       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85BC [03] B6AD      1943       lda     AC_100            ; Load accumulator with value in "AC_100"
 85BE [03] B78A      1944       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 85C0 [03] B6AE      1945       lda     AC_10             ; Load accumulator with value in "AC_10"
 85C2 [03] B78B      1946       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 85C4 [03] B6AF      1947       lda     AC_1              ; Load accumulator with value in "AC_1"
 85C6 [03] B78C      1948       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 85C8 [02] A620      1949       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85CA [03] B78D      1950       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 85CC [03] B6C3      1951       lda     aircor            ; Load accumulator with value in "aircor"
 85CE [03] B784      1952       sta     DisVal            ; Copy to "DisVal" variable
 85D0 [05] CD8F0F    1953       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85D3 [03] B6AD      1954       lda     AC_100            ; Load accumulator with value in "AC_100"
 85D5 [03] B78E      1955       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 85D7 [03] B6AE      1956       lda     AC_10             ; Load accumulator with value in "AC_10"
 85D9 [03] B78F      1957       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 85DB [03] B6AF      1958       lda     AC_1              ; Load accumulator with value in "AC_1"
 85DD [03] B790      1959       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 85DF [02] A620      1960       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85E1 [03] B791      1961       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 85E3 [03] B6C1      1962       lda     barocor           ; Load accumulator with value in "barocor"
 85E5 [03] B784      1963       sta     DisVal            ; Copy to "DisVal" variable
 85E7 [05] CD8F0F    1964       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85EA [03] B6AD      1965       lda     AC_100            ; Load accumulator with value in "AC_100"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 19
MV351WM


 85EC [03] B792      1966       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 85EE [03] B6AE      1967       lda     AC_10             ; Load accumulator with value in "AC_10"
 85F0 [03] B793      1968       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 85F2 [03] B6AF      1969       lda     AC_1              ; Load accumulator with value in "AC_1"
 85F4 [03] B794      1970       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 85F6 [02] A620      1971       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85F8 [03] B795      1972       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 85FA [03] B6C6      1973       lda     tpsaccel          ; Load accumulator with value in "tpsaccel"
 85FC [03] B784      1974       sta     DisVal            ; Copy to "DisVal" variable
 85FE [05] CD8F0F    1975       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8601 [03] B6AD      1976       lda     AC_100            ; Load accumulator with value in "AC_100"
 8603 [03] B796      1977       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8605 [03] B6AE      1978       lda     AC_10             ; Load accumulator with value in "AC_10"
 8607 [03] B797      1979       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8609 [03] B6AF      1980       lda     AC_1              ; Load accumulator with value in "AC_1"
 860B [03] B798      1981       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 860D [03] CC8C2C    1982       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1983  
                     1984  SCRN_6:
 8610 [02] A620      1985       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8612 [03] B785      1986       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8614 [03] B6BA      1987       lda     egoADC            ; Load accumulator with value in "egoADC"
 8616 [03] B784      1988       sta     DisVal            ; Copy to "DisVal" variable
 8618 [05] CD8F0F    1989       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 861B [03] B6AD      1990       lda     AC_100            ; Load accumulator with value in "AC_100"
 861D [03] B786      1991       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 861F [03] B6AE      1992       lda     AC_10             ; Load accumulator with value in "AC_10"
 8621 [03] B787      1993       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8623 [03] B6AF      1994       lda     AC_1              ; Load accumulator with value in "AC_1"
 8625 [03] B788      1995       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8627 [02] A620      1996       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8629 [03] B789      1997       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 862B [05] CD8D19    1998       jsr     CALC_EGOV         ; Jump to subroutine at CALC_EGOV:
 862E [03] B6E1      1999       lda     egoV              ; Load accumulator with value in "egoV"
 8630 [03] B784      2000       sta     DisVal            ; Copy to "DisVal" variable
 8632 [05] CD8F0F    2001       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8635 [03] B6AD      2002       lda     AC_100            ; Load accumulator with value in "AC_100"
 8637 [03] B78A      2003       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8639 [03] B6AE      2004       lda     AC_10             ; Load accumulator with value in "AC_10"
 863B [03] B78B      2005       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 863D [03] B6AF      2006       lda     AC_1              ; Load accumulator with value in "AC_1"
 863F [03] B78C      2007       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8641 [02] A620      2008       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8643 [03] B78D      2009       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8645 [05] CD8D2A    2010       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 8648 [05] CD8D7C    2011       jsr     CALC_LAMBDA       ; Jump to subroutine at CALC_LAMBDA:
 864B [03] B6E2      2012       lda     lambda            ; Load accumulator with value in "lambda"
 864D [03] B784      2013       sta     DisVal            ; Copy to "DisVal" variable
 864F [05] CD8F0F    2014       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8652 [03] B6AD      2015       lda     AC_100            ; Load accumulator with value in "AC_100"
 8654 [03] B78E      2016       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8656 [03] B6AE      2017       lda     AC_10             ; Load accumulator with value in "AC_10"
 8658 [03] B78F      2018       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 865A [03] B6AF      2019       lda     AC_1              ; Load accumulator with value in "AC_1"
 865C [03] B790      2020       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 865E [02] A620      2021       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8660 [03] B791      2022       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8662 [05] CD8D2A    2023       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 8665 [03] B6E3      2024       lda     afr               ; Load accumulator with value in "afr"
 8667 [03] B784      2025       sta     DisVal            ; Copy to "DisVal" variable
 8669 [05] CD8F0F    2026       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 866C [03] B6AD      2027       lda     AC_100            ; Load accumulator with value in "AC_100"
 866E [03] B792      2028       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8670 [03] B6AE      2029       lda     AC_10             ; Load accumulator with value in "AC_10"
 8672 [03] B793      2030       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8674 [03] B6AF      2031       lda     AC_1              ; Load accumulator with value in "AC_1"
 8676 [03] B794      2032       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8678 [02] A620      2033       lda     #$20              ; Load accumulator with ASCII ' '(space)
 867A [03] B795      2034       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 867C [03] B6C4      2035       lda     Ftrimcor          ; Load accumulator with value in "Ftrimcor"
 867E [03] B784      2036       sta     DisVal            ; Copy to "DisVal" variable
 8680 [05] CD8F0F    2037       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8683 [03] B6AD      2038       lda     AC_100            ; Load accumulator with value in "AC_100"
 8685 [03] B796      2039       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8687 [03] B6AE      2040       lda     AC_10             ; Load accumulator with value in "AC_10"
 8689 [03] B797      2041       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 868B [03] B6AF      2042       lda     AC_1              ; Load accumulator with value in "AC_1"
 868D [03] B798      2043       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 868F [03] CC8C2C    2044       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2045  
                     2046  SCRN_7:
 8692 [02] A620      2047       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8694 [03] B785      2048       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8696 [03] B6B5      2049       lda     mapADC            ; Load accumulator with value in "mapADC"
 8698 [03] B784      2050       sta     DisVal            ; Copy to "DisVal" variable
 869A [05] CD8F0F    2051       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 869D [03] B6AD      2052       lda     AC_100            ; Load accumulator with value in "AC_100"
 869F [03] B786      2053       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 86A1 [03] B6AE      2054       lda     AC_10             ; Load accumulator with value in "AC_10"
 86A3 [03] B787      2055       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 86A5 [03] B6AF      2056       lda     AC_1              ; Load accumulator with value in "AC_1"
 86A7 [03] B788      2057       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 86A9 [02] A620      2058       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86AB [03] B789      2059       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 86AD [05] CD8CDB    2060       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 86B0 [03] B6DD      2061       lda     map               ; Load accumulator with value in "map"
 86B2 [03] B784      2062       sta     DisVal            ; Copy to "DisVal" variable
 86B4 [05] CD8F0F    2063       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 86B7 [03] B6AD      2064       lda     AC_100            ; Load accumulator with value in "AC_100"
 86B9 [03] B78A      2065       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 86BB [03] B6AE      2066       lda     AC_10             ; Load accumulator with value in "AC_10"
 86BD [03] B78B      2067       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 86BF [03] B6AF      2068       lda     AC_1              ; Load accumulator with value in "AC_1"
 86C1 [03] B78C      2069       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 86C3 [02] A620      2070       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86C5 [03] B78D      2071       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 86C7 [03] B78E      2072       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 86C9 [03] B78F      2073       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 86CB [03] B790      2074       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 86CD [03] B791      2075       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 86CF [03] B6C0      2076       lda     barometer         ; Load accumulator with value in "barometer"
 86D1 [03] B784      2077       sta     DisVal            ; Copy to "DisVal" variable
 86D3 [05] CD8F0F    2078       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 86D6 [03] B6AD      2079       lda     AC_100            ; Load accumulator with value in "AC_100"
 86D8 [03] B792      2080       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 86DA [03] B6AE      2081       lda     AC_10             ; Load accumulator with value in "AC_10"
 86DC [03] B793      2082       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 86DE [03] B6AF      2083       lda     AC_1              ; Load accumulator with value in "AC_1"
 86E0 [03] B794      2084       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 86E2 [02] A620      2085       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86E4 [03] B795      2086       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 86E6 [03] B6C1      2087       lda     barocor           ; Load accumulator with value in "barocor"
 86E8 [03] B784      2088       sta     DisVal            ; Copy to "DisVal" variable
 86EA [05] CD8F0F    2089       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 86ED [03] B6AD      2090       lda     AC_100            ; Load accumulator with value in "AC_100"
 86EF [03] B796      2091       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 86F1 [03] B6AE      2092       lda     AC_10             ; Load accumulator with value in "AC_10"
 86F3 [03] B797      2093       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 86F5 [03] B6AF      2094       lda     AC_1              ; Load accumulator with value in "AC_1"
 86F7 [03] B798      2095       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 86F9 [03] CC8C2C    2096       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2097  
                     2098  SCRN_8:
 86FC [02] A620      2099       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86FE [03] B785      2100       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8700 [03] B6B9      2101       lda     battADC           ; Load accumulator with value in "battADC"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 20
MV351WM


 8702 [03] B784      2102       sta     DisVal            ; Copy to "DisVal" variable
 8704 [05] CD8F0F    2103       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8707 [03] B6AD      2104       lda     AC_100            ; Load accumulator with value in "AC_100"
 8709 [03] B786      2105       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 870B [03] B6AE      2106       lda     AC_10             ; Load accumulator with value in "AC_10"
 870D [03] B787      2107       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 870F [03] B6AF      2108       lda     AC_1              ; Load accumulator with value in "AC_1"
 8711 [03] B788      2109       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8713 [02] A620      2110       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8715 [03] B789      2111       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8717 [05] CD8CF9    2112       jsr     CALC_VOLTS        ; Jump to subroutine at CALC_VOLTS:
 871A [03] B6E0      2113       lda     volts             ; Load accumulator with value in "volts"
 871C [03] B784      2114       sta     DisVal            ; Copy to "DisVal" variable
 871E [05] CD8F0F    2115       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8721 [03] B6AD      2116       lda     AC_100            ; Load accumulator with value in "AC_100"
 8723 [03] B78A      2117       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8725 [03] B6AE      2118       lda     AC_10             ; Load accumulator with value in "AC_10"
 8727 [03] B78B      2119       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8729 [03] B6AF      2120       lda     AC_1              ; Load accumulator with value in "AC_1"
 872B [03] B78C      2121       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 872D [02] A620      2122       lda     #$20              ; Load accumulator with ASCII ' '(space)
 872F [03] B78D      2123       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8731 [03] B6B7      2124       lda     cltADC            ; Load accumulator with value in "cltADC"
 8733 [03] B784      2125       sta     DisVal            ; Copy to "DisVal" variable
 8735 [05] CD8F0F    2126       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8738 [03] B6AD      2127       lda     AC_100            ; Load accumulator with value in "AC_100"
 873A [03] B78E      2128       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 873C [03] B6AE      2129       lda     AC_10             ; Load accumulator with value in "AC_10"
 873E [03] B78F      2130       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8740 [03] B6AF      2131       lda     AC_1              ; Load accumulator with value in "AC_1"
 8742 [03] B790      2132       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8744 [02] A620      2133       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8746 [03] B791      2134       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8748 [05] CD8CEF    2135       jsr     CALC_CLT          ; Jump to subroutine at CALC_CLT:
 874B [03] B6DF      2136       lda     clt               ; Load accumulator with value in "clt"
 874D [03] B784      2137       sta     DisVal            ; Copy to "DisVal" variable
 874F [05] CD8F0F    2138       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8752 [03] B6AD      2139       lda     AC_100            ; Load accumulator with value in "AC_100"
 8754 [03] B792      2140       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8756 [03] B6AE      2141       lda     AC_10             ; Load accumulator with value in "AC_10"
 8758 [03] B793      2142       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 875A [03] B6AF      2143       lda     AC_1              ; Load accumulator with value in "AC_1"
 875C [03] B794      2144       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 875E [02] A620      2145       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8760 [03] B795      2146       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8762 [03] B6C2      2147       lda     warmcor           ; Load accumulator with value in "warmcor"
 8764 [03] B784      2148       sta     DisVal            ; Copy to "DisVal" variable
 8766 [05] CD8F0F    2149       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8769 [03] B6AD      2150       lda     AC_100            ; Load accumulator with value in "AC_100"
 876B [03] B796      2151       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 876D [03] B6AE      2152       lda     AC_10             ; Load accumulator with value in "AC_10"
 876F [03] B797      2153       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8771 [03] B6AF      2154       lda     AC_1              ; Load accumulator with value in "AC_1"
 8773 [03] B798      2155       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8775 [03] CC8C2C    2156       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2157  
                     2158  SCRN_9:
 8778 [03] B6BF      2159       lda     egtADC            ; Load accumulator with value in "egtADC"
 877A [03] B784      2160       sta     DisVal            ; Copy to "DisVal" variable
 877C [05] CD8F0F    2161       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 877F [03] B6AD      2162       lda     AC_100            ; Load accumulator with value in "AC_100"
 8781 [03] B785      2163       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8783 [03] B6AE      2164       lda     AC_10             ; Load accumulator with value in "AC_10"
 8785 [03] B786      2165       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8787 [03] B6AF      2166       lda     AC_1              ; Load accumulator with value in "AC_1"
 8789 [03] B787      2167       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 878B [02] A620      2168       lda     #$20              ; Load accumulator with ASCII ' '(space)
 878D [03] B788      2169       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 878F [05] CD8DB9    2170       jsr     CALC_EGT          ; Jump to subroutine at CALC_EGT:
 8792 [03] B6ED      2171       lda     egtH              ; Load accumulator with value in "egtH"
 8794 [03] B763      2172       sta     intacc1+2         ; Copy to "intacc1+2"
 8796 [03] B6EE      2173       lda     egtL              ; Load accumulator with value in "egtL"
 8798 [03] B764      2174       sta     intacc1+3         ; Copy to "intacc1+3"
 879A [05] CD8F23    2175       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 879D [03] B6B0      2176       lda     thousands         ; Load accumulator with value in "thousands"
 879F [03] B789      2177       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 87A1 [03] B6B1      2178       lda     hundreds          ; Load accumulator with value in "hundreds"
 87A3 [03] B78A      2179       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 87A5 [03] B6B2      2180       lda     tens              ; Load accumulator with value in "tens"
 87A7 [03] B78B      2181       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 87A9 [03] B6B3      2182       lda     ones              ; Load accumulator with value in "ones"
 87AB [03] B78C      2183       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 87AD [02] A620      2184       lda     #$20              ; Load accumulator with ASCII ' '(space)
 87AF [03] B78D      2185       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 87B1 [03] B6B6      2186       lda     matADC            ; Load accumulator with value in "matADC"
 87B3 [03] B784      2187       sta     DisVal            ; Copy to "DisVal" variable
 87B5 [05] CD8F0F    2188       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 87B8 [03] B6AD      2189       lda     AC_100            ; Load accumulator with value in "AC_100"
 87BA [03] B78E      2190       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 87BC [03] B6AE      2191       lda     AC_10             ; Load accumulator with value in "AC_10"
 87BE [03] B78F      2192       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 87C0 [03] B6AF      2193       lda     AC_1              ; Load accumulator with value in "AC_1"
 87C2 [03] B790      2194       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 87C4 [02] A620      2195       lda     #$20              ; Load accumulator with ASCII ' '(space)
 87C6 [03] B791      2196       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 87C8 [05] CD8CE5    2197       jsr     CALC_MAT          ; Jump to subroutine at CALC_MAT:
 87CB [03] B6DE      2198       lda     mat               ; Load accumulator with value in "mat"
 87CD [03] B784      2199       sta     DisVal            ; Copy to "DisVal" variable
 87CF [05] CD8F0F    2200       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 87D2 [03] B6AD      2201       lda     AC_100            ; Load accumulator with value in "AC_100"
 87D4 [03] B792      2202       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 87D6 [03] B6AE      2203       lda     AC_10             ; Load accumulator with value in "AC_10"
 87D8 [03] B793      2204       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 87DA [03] B6AF      2205       lda     AC_1              ; Load accumulator with value in "AC_1"
 87DC [03] B794      2206       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 87DE [02] A620      2207       lda     #$20              ; Load accumulator with ASCII ' '(space)
 87E0 [03] B795      2208       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 87E2 [03] B6C3      2209       lda     aircor            ; Load accumulator with value in "aircor"
 87E4 [03] B784      2210       sta     DisVal            ; Copy to "DisVal" variable
 87E6 [05] CD8F0F    2211       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 87E9 [03] B6AD      2212       lda     AC_100            ; Load accumulator with value in "AC_100"
 87EB [03] B796      2213       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 87ED [03] B6AE      2214       lda     AC_10             ; Load accumulator with value in "AC_10"
 87EF [03] B797      2215       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 87F1 [03] B6AF      2216       lda     AC_1              ; Load accumulator with value in "AC_1"
 87F3 [03] B798      2217       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 87F5 [03] CC8C2C    2218       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2219  
                     2220  SCRN_10:
 87F8 [02] A620      2221       lda     #$20              ; Load accumulator with ASCII ' '(space)
 87FA [03] B785      2222       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 87FC [03] B6BB      2223       lda     ftrmADC           ; Load accumulator with value in "ftrimADC"
 87FE [03] B784      2224       sta     DisVal            ; Copy to "DisVal" variable
 8800 [05] CD8F0F    2225       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8803 [03] B6AD      2226       lda     AC_100            ; Load accumulator with value in "AC_100"
 8805 [03] B786      2227       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8807 [03] B6AE      2228       lda     AC_10             ; Load accumulator with value in "AC_10"
 8809 [03] B787      2229       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 880B [03] B6AF      2230       lda     AC_1              ; Load accumulator with value in "AC_1"
 880D [03] B788      2231       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 880F [02] A620      2232       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8811 [03] B789      2233       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8813 [03] B78A      2234       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8815 [03] B6C4      2235       lda     Ftrimcor          ; Load accumulator with value in "Ftrimcor"
 8817 [03] B784      2236       sta     DisVal            ; Copy to "DisVal" variable
 8819 [05] CD8F0F    2237       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 21
MV351WM


 881C [03] B6AD      2238       lda     AC_100            ; Load accumulator with value in "AC_100"
 881E [03] B78B      2239       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8820 [03] B6AE      2240       lda     AC_10             ; Load accumulator with value in "AC_10"
 8822 [03] B78C      2241       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8824 [03] B6AF      2242       lda     AC_1              ; Load accumulator with value in "AC_1"
 8826 [03] B78D      2243       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8828 [02] A620      2244       lda     #$20              ; Load accumulator with ASCII ' '(space)
 882A [03] B78E      2245       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 882C [03] B78F      2246       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 882E [03] B6BC      2247       lda     itrmADC           ; Load accumulator with value in "itrmADC"
 8830 [03] B784      2248       sta     DisVal            ; Copy to "DisVal" variable
 8832 [05] CD8F0F    2249       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8835 [03] B6AD      2250       lda     AC_100            ; Load accumulator with value in "AC_100"
 8837 [03] B790      2251       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8839 [03] B6AE      2252       lda     AC_10             ; Load accumulator with value in "AC_10"
 883B [03] B791      2253       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 883D [03] B6AF      2254       lda     AC_1              ; Load accumulator with value in "AC_1"
 883F [03] B792      2255       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8841 [02] A620      2256       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8843 [03] B793      2257       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8845 [03] B794      2258       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8847 [03] B6D2      2259       lda     trmAngFac         ; Load accumulator with value in "trmAngFac"
 8849 [03] B784      2260       sta     DisVal            ; Copy to "DisVal" variable
 884B [05] CD8F0F    2261       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 884E [03] B6AD      2262       lda     AC_100            ; Load accumulator with value in "AC_100"
 8850 [03] B795      2263       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8852 [03] B6AE      2264       lda     AC_10             ; Load accumulator with value in "AC_10"
 8854 [03] B796      2265       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8856 [03] B6AF      2266       lda     AC_1              ; Load accumulator with value in "AC_1"
 8858 [03] B797      2267       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 885A [02] A620      2268       lda     #$20              ; Load accumulator with ASCII ' '(space)
 885C [03] B798      2269       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 885E [03] CC8C2C    2270       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2271  
                     2272  SCRN_11:
 8861 [02] A620      2273       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8863 [03] B785      2274       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8865 [03] B6BD      2275       lda     opADC             ; Load accumulator with value in "opADC"
 8867 [03] B784      2276       sta     DisVal            ; Copy to "DisVal" variable
 8869 [05] CD8F0F    2277       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 886C [03] B6AD      2278       lda     AC_100            ; Load accumulator with value in "AC_100"
 886E [03] B786      2279       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8870 [03] B6AE      2280       lda     AC_10             ; Load accumulator with value in "AC_10"
 8872 [03] B787      2281       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8874 [03] B6AF      2282       lda     AC_1              ; Load accumulator with value in "AC_1"
 8876 [03] B788      2283       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8878 [02] A620      2284       lda     #$20              ; Load accumulator with ASCII ' '(space)
 887A [03] B789      2285       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 887C [03] B78A      2286       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 887E [05] CD8D8D    2287       jsr     CALC_OP           ; Jump to subroutine at CALC_OP:
 8881 [03] B6EB      2288       lda     oprs              ; Load accumulator with value in "oprs"
 8883 [03] B784      2289       sta     DisVal            ; Copy to "DisVal" variable
 8885 [05] CD8F0F    2290       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8888 [03] B6AD      2291       lda     AC_100            ; Load accumulator with value in "AC_100"
 888A [03] B78B      2292       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 888C [03] B6AE      2293       lda     AC_10             ; Load accumulator with value in "AC_10"
 888E [03] B78C      2294       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8890 [03] B6AF      2295       lda     AC_1              ; Load accumulator with value in "AC_1"
 8892 [03] B78D      2296       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8894 [02] A620      2297       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8896 [03] B78E      2298       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8898 [03] B78F      2299       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 889A [03] B6BE      2300       lda     fpADC             ; Load accumulator with value in "fpADC"
 889C [03] B784      2301       sta     DisVal            ; Copy to "DisVal" variable
 889E [05] CD8F0F    2302       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 88A1 [03] B6AD      2303       lda     AC_100            ; Load accumulator with value in "AC_100"
 88A3 [03] B790      2304       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 88A5 [03] B6AE      2305       lda     AC_10             ; Load accumulator with value in "AC_10"
 88A7 [03] B791      2306       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 88A9 [03] B6AF      2307       lda     AC_1              ; Load accumulator with value in "AC_1"
 88AB [03] B792      2308       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 88AD [02] A620      2309       lda     #$20              ; Load accumulator with ASCII ' '(space)
 88AF [03] B793      2310       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 88B1 [03] B794      2311       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 88B3 [05] CD8DA3    2312       jsr     CALC_FP           ; Jump to subroutine at CALC_FP:
 88B6 [03] B6EC      2313       lda     fprs              ; Load accumulator with value in "fprs"
 88B8 [03] B784      2314       sta     DisVal            ; Copy to "DisVal" variable
 88BA [05] CD8F0F    2315       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 88BD [03] B6AD      2316       lda     AC_100            ; Load accumulator with value in "AC_100"
 88BF [03] B795      2317       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 88C1 [03] B6AE      2318       lda     AC_10             ; Load accumulator with value in "AC_10"
 88C3 [03] B796      2319       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 88C5 [03] B6AF      2320       lda     AC_1              ; Load accumulator with value in "AC_1"
 88C7 [03] B797      2321       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 88C9 [02] A620      2322       lda     #$20              ; Load accumulator with ASCII ' '(space)
 88CB [03] B798      2323       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 88CD [03] CC8C2C    2324       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2325  
                     2326  SCRN_12:
 88D0 [03] B6C9      2327       lda     pwcalcH           ; Load accumulator with value in "pwcalcH"
 88D2 [03] B763      2328       sta     intacc1+2         ; Copy to "intacc1+2"
 88D4 [03] B6CA      2329       lda     pwcalcL           ; Load accumulator with value in "pwcalcL"
 88D6 [03] B764      2330       sta     intacc1+3         ; Copy to "intacc1+3"
 88D8 [05] CD8F01    2331       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 88DB [05] CD8F23    2332       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 88DE [03] B6B0      2333       lda     thousands         ; Load accumulator with value in "thousands"
 88E0 [03] B785      2334       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 88E2 [03] B6B1      2335       lda     hundreds          ; Load accumulator with value in "hundreds"
 88E4 [03] B786      2336       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 88E6 [03] B6B2      2337       lda     tens              ; Load accumulator with value in "tens"
 88E8 [03] B787      2338       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 88EA [03] B6B3      2339       lda     ones              ; Load accumulator with value in "ones"
 88EC [03] B788      2340       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 88EE [02] A620      2341       lda     #$20              ; Load accumulator with ASCII ' '(space)
 88F0 [03] B789      2342       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 88F2 [03] B6CB      2343       lda     pw               ; Load accumulator with value in "pw"
 88F4 [03] B784      2344       sta     DisVal            ; Copy to "DisVal" variable
 88F6 [05] CD8F0F    2345       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 88F9 [03] B6AD      2346       lda     AC_100            ; Load accumulator with value in "AC_100"
 88FB [03] B78A      2347       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 88FD [03] B6AE      2348       lda     AC_10             ; Load accumulator with value in "AC_10"
 88FF [03] B78B      2349       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8901 [03] B6AF      2350       lda     AC_1              ; Load accumulator with value in "AC_1"
 8903 [03] B78C      2351       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8905 [02] A620      2352       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8907 [03] B78D      2353       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8909 [03] B6CC      2354       lda     fd                ; Load accumulator with value in "fd"
 890B [03] B784      2355       sta     DisVal            ; Copy to "DisVal" variable
 890D [05] CD8F0F    2356       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8910 [03] B6AD      2357       lda     AC_100            ; Load accumulator with value in "AC_100"
 8912 [03] B78E      2358       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8914 [03] B6AE      2359       lda     AC_10             ; Load accumulator with value in "AC_10"
 8916 [03] B78F      2360       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8918 [03] B6AF      2361       lda     AC_1              ; Load accumulator with value in "AC_1"
 891A [03] B790      2362       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 891C [02] A620      2363       lda     #$20              ; Load accumulator with ASCII ' '(space)
 891E [03] B791      2364       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8920 [03] B6C8      2365       lda     vecurr            ; Load accumulator with value in "vecurr"
 8922 [03] B784      2366       sta     DisVal            ; Copy to "DisVal" variable
 8924 [05] CD8F0F    2367       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8927 [03] B6AD      2368       lda     AC_100            ; Load accumulator with value in "AC_100"
 8929 [03] B792      2369       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 892B [03] B6AE      2370       lda     AC_10             ; Load accumulator with value in "AC_10"
 892D [03] B793      2371       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 892F [03] B6AF      2372       lda     AC_1              ; Load accumulator with value in "AC_1"
 8931 [03] B794      2373       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 22
MV351WM


 8933 [02] A620      2374       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8935 [03] B795      2375       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8937 [05] CD8DF0    2376       jsr     CALC_DUTY         ; Jump to subroutine at CALC_DUTY:
 893A [03] B6E4      2377       lda     duty              ; Load accumulator with value in "duty"
 893C [03] B784      2378       sta     DisVal            ; Copy to "DisVal" variable
 893E [05] CD8F0F    2379       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8941 [03] B6AD      2380       lda     AC_100            ; Load accumulator with value in "AC_100"
 8943 [03] B796      2381       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8945 [03] B6AE      2382       lda     AC_10             ; Load accumulator with value in "AC_10"
 8947 [03] B797      2383       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8949 [03] B6AF      2384       lda     AC_1              ; Load accumulator with value in "AC_1"
 894B [03] B798      2385       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 894D [03] CC8C2C    2386       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2387  
                     2388  SCRN_13:
 8950 [02] A620      2389       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8952 [03] B785      2390       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8954 [05] CD8E30    2391       jsr     CALC_RPM_HR       ; Jump to subroutine at CALC_RPM_HR:
 8957 [03] B6F1      2392       lda     rpmhrH            ; Load accumulator with value in "rpmhrH"
 8959 [03] B763      2393       sta     intacc1+2         ; Copy to "intacc1+2"
 895B [03] B6F2      2394       lda     rpmhrL            ; Load accumulator with value in "rpmhrL"
 895D [03] B764      2395       sta     intacc1+3         ; Copy to "intacc1+3"
 895F [05] CD8F23    2396       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8962 [03] B6B0      2397       lda     thousands         ; Load accumulator with value in "thousands"
 8964 [03] B786      2398       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8966 [03] B6B1      2399       lda     hundreds          ; Load accumulator with value in "hundreds"
 8968 [03] B787      2400       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 896A [03] B6B2      2401       lda     tens              ; Load accumulator with value in "tens"
 896C [03] B788      2402       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 896E [03] B6B3      2403       lda     ones              ; Load accumulator with value in "ones"
 8970 [03] B789      2404       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8972 [02] A620      2405       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8974 [03] B78A      2406       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8976 [03] B6CF      2407       lda     tachH             ; Load accumulator with value in "tachH"
 8978 [03] B763      2408       sta     intacc1+2         ; Copy to "intacc1+2"
 897A [03] B6D0      2409       lda     tachL             ; Load accumulator with value in "tachL"
 897C [03] B764      2410       sta     intacc1+3         ; Copy to "intacc1+3"
 897E [05] CD8F01    2411       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 8981 [05] CD8F23    2412       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8984 [03] B6B0      2413       lda     thousands         ; Load accumulator with value in "thousands"
 8986 [03] B78B      2414       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8988 [03] B6B1      2415       lda     hundreds          ; Load accumulator with value in "hundreds"
 898A [03] B78C      2416       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 898C [03] B6B2      2417       lda     tens              ; Load accumulator with value in "tens"
 898E [03] B78D      2418       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8990 [03] B6B3      2419       lda     ones              ; Load accumulator with value in "ones"
 8992 [03] B78E      2420       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8994 [02] A620      2421       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8996 [03] B78F      2422       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8998 [03] B6D4      2423       lda     monpH             ; Load accumulator with value in "monpH"
 899A [03] B763      2424       sta     intacc1+2         ; Copy to "intacc1+2"
 899C [03] B6D5      2425       lda     monpL             ; Load accumulator with value in "monpL"
 899E [03] B764      2426       sta     intacc1+3         ; Copy to "intacc1+3"
 89A0 [05] CD8F01    2427       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 89A3 [05] CD8F23    2428       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 89A6 [03] B6B0      2429       lda     thousands         ; Load accumulator with value in "thousands"
 89A8 [03] B790      2430       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 89AA [03] B6B1      2431       lda     hundreds          ; Load accumulator with value in "hundreds"
 89AC [03] B791      2432       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 89AE [03] B6B2      2433       lda     tens              ; Load accumulator with value in "tens"
 89B0 [03] B792      2434       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 89B2 [03] B6B3      2435       lda     ones              ; Load accumulator with value in "ones"
 89B4 [03] B793      2436       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 89B6 [02] A620      2437       lda     #$20              ; Load accumulator with ASCII ' '(space)
 89B8 [03] B794      2438       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 89BA [03] B6B4      2439       lda     secl              ; Load accumulator with value in "secl"
 89BC [03] B784      2440       sta     DisVal            ; Copy to "DisVal" variable
 89BE [05] CD8F0F    2441       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 89C1 [03] B6AD      2442       lda     AC_100            ; Load accumulator with value in "AC_100"
 89C3 [03] B795      2443       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 89C5 [03] B6AE      2444       lda     AC_10             ; Load accumulator with value in "AC_10"
 89C7 [03] B796      2445       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 89C9 [03] B6AF      2446       lda     AC_1              ; Load accumulator with value in "AC_1"
 89CB [03] B797      2447       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 89CD [02] A620      2448       lda     #$20              ; Load accumulator with ASCII ' '(space)
 89CF [03] B798      2449       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 89D1 [03] CC8C2C    2450       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2451  
                     2452  SCRN_14:
 89D4 [05] CD8E24    2453       jsr     CALC_RPM          ; Jump to subroutine at CALC_RPM:
 89D7 [03] B6EF      2454       lda     rpmH              ; Load accumulator with value in "rpmH"
 89D9 [03] B763      2455       sta     intacc1+2         ; Copy to "intacc1+2"
 89DB [03] B6F0      2456       lda     rpmL              ; Load accumulator with value in "rpmL"
 89DD [03] B764      2457       sta     intacc1+3         ; Copy to "intacc1+3"
 89DF [05] CD8F23    2458       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 89E2 [03] B6B0      2459       lda     thousands         ; Load accumulator with value in "thousands"
 89E4 [03] B785      2460       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 89E6 [03] B6B1      2461       lda     hundreds          ; Load accumulator with value in "hundreds"
 89E8 [03] B786      2462       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 89EA [03] B6B2      2463       lda     tens              ; Load accumulator with value in "tens"
 89EC [03] B787      2464       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 89EE [03] B6B3      2465       lda     ones              ; Load accumulator with value in "ones"
 89F0 [03] B788      2466       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 89F2 [02] A620      2467       lda     #$20              ; Load accumulator with ASCII ' '(space)
 89F4 [03] B789      2468       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 89F6 [05] CD8CDB    2469       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 89F9 [03] B6DD      2470       lda     map               ; Load accumulator with value in "map"
 89FB [03] B784      2471       sta     DisVal            ; Copy to "DisVal" variable
 89FD [05] CD8F0F    2472       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A00 [03] B6AD      2473       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A02 [03] B78A      2474       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8A04 [03] B6AE      2475       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A06 [03] B78B      2476       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8A08 [03] B6AF      2477       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A0A [03] B78C      2478       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8A0C [02] A620      2479       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A0E [03] B78D      2480       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8A10 [03] B6D1      2481       lda     spkAngFac         ; Load accumulator with value in "spkAngFac"
 8A12 [03] B784      2482       sta     DisVal            ; Copy to "DisVal" variable
 8A14 [05] CD8F0F    2483       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A17 [03] B6AD      2484       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A19 [03] B78E      2485       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8A1B [03] B6AE      2486       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A1D [03] B78F      2487       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8A1F [03] B6AF      2488       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A21 [03] B790      2489       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8A23 [02] A620      2490       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A25 [03] B791      2491       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8A27 [03] B6D3      2492       lda     dlyAngFac         ; Load accumulator with value in "dlyAngFac"
 8A29 [03] B784      2493       sta     DisVal            ; Copy to "DisVal" variable
 8A2B [05] CD8F0F    2494       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A2E [03] B6AD      2495       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A30 [03] B792      2496       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8A32 [03] B6AE      2497       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A34 [03] B793      2498       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8A36 [03] B6AF      2499       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A38 [03] B794      2500       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8A3A [02] A620      2501       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A3C [03] B795      2502       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8A3E [03] B6D2      2503       lda     trmAngFac         ; Load accumulator with value in "trmAngFac"
 8A40 [03] B784      2504       sta     DisVal            ; Copy to "DisVal" variable
 8A42 [05] CD8F0F    2505       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A45 [03] B6AD      2506       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A47 [03] B796      2507       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8A49 [03] B6AE      2508       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A4B [03] B797      2509       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 23
MV351WM


 8A4D [03] B6AF      2510       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A4F [03] B798      2511       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8A51 [03] CC8C2C    2512       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2513  
                     2514  SCRN_15:
 8A54 [05] CD8E24    2515       jsr     CALC_RPM          ; Jump to subroutine at CALC_RPM:
 8A57 [03] B6EF      2516       lda     rpmH              ; Load accumulator with value in "rpmH"
 8A59 [03] B763      2517       sta     intacc1+2         ; Copy to "intacc1+2"
 8A5B [03] B6F0      2518       lda     rpmL              ; Load accumulator with value in "rpmL"
 8A5D [03] B764      2519       sta     intacc1+3         ; Copy to "intacc1+3"
 8A5F [05] CD8F23    2520       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8A62 [03] B6B0      2521       lda     thousands         ; Load accumulator with value in "thousands"
 8A64 [03] B785      2522       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8A66 [03] B6B1      2523       lda     hundreds          ; Load accumulator with value in "hundreds"
 8A68 [03] B786      2524       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8A6A [03] B6B2      2525       lda     tens              ; Load accumulator with value in "tens"
 8A6C [03] B787      2526       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 8A6E [03] B6B3      2527       lda     ones              ; Load accumulator with value in "ones"
 8A70 [03] B788      2528       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8A72 [02] A620      2529       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A74 [03] B789      2530       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8A76 [05] CD8E5C    2531       jsr     CALC_TRIM_ANG     ; Jump to subroutine at CALC_TRIM_ANG:
 8A79 [03] B6E5      2532       lda     trmAng            ; Load accumulator with value in "trmAng"
 8A7B [03] B784      2533       sta     DisVal            ; Copy to "DisVal" variable
 8A7D [05] CD8F0F    2534       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A80 [03] B6AD      2535       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A82 [03] B78A      2536       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8A84 [03] B6AE      2537       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A86 [03] B78B      2538       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8A88 [03] B6AF      2539       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A8A [03] B78C      2540       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8A8C [02] A620      2541       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A8E [03] B78D      2542       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8A90 [05] CD8E75    2543       jsr     CALC_DLY_ANG      ; Jump to subroutine at CALC_DLY_ANG:
 8A93 [03] B6E6      2544       lda     dlyAng            ; Load accumulator with value in "dlyAng"
 8A95 [03] B784      2545       sta     DisVal            ; Copy to "DisVal" variable
 8A97 [05] CD8F0F    2546       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A9A [03] B6AD      2547       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A9C [03] B78E      2548       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8A9E [03] B6AE      2549       lda     AC_10             ; Load accumulator with value in "AC_10"
 8AA0 [03] B78F      2550       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8AA2 [03] B6AF      2551       lda     AC_1              ; Load accumulator with value in "AC_1"
 8AA4 [03] B790      2552       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8AA6 [02] A620      2553       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8AA8 [03] B791      2554       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8AAA [05] CD8E86    2555       jsr     CALC_TIM_ANG      ; Jump to subroutine at CALC_TIM_ANG:
 8AAD [03] B6E7      2556       lda     timAng            ; Load accumulator with value in "timAng"
 8AAF [03] B784      2557       sta     DisVal            ; Copy to "DisVal" variable
 8AB1 [05] CD8F0F    2558       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8AB4 [03] B6AD      2559       lda     AC_100            ; Load accumulator with value in "AC_100"
 8AB6 [03] B792      2560       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8AB8 [03] B6AE      2561       lda     AC_10             ; Load accumulator with value in "AC_10"
 8ABA [03] B793      2562       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8ABC [03] B6AF      2563       lda     AC_1              ; Load accumulator with value in "AC_1"
 8ABE [03] B794      2564       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8AC0 [02] A620      2565       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8AC2 [03] B795      2566       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8AC4 [05] CD8E8F    2567       jsr     CALC_MON_TIM_ANG  ; Jump to subroutine at CALC_MON_TIM_ANG:
 8AC7 [03] B6E8      2568       lda     monTimAng         ; Load accumulator with value in "monTimAng"
 8AC9 [03] B784      2569       sta     DisVal            ; Copy to "DisVal" variable
 8ACB [05] CD8F0F    2570       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8ACE [03] B6AD      2571       lda     AC_100            ; Load accumulator with value in "AC_100"
 8AD0 [03] B796      2572       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8AD2 [03] B6AE      2573       lda     AC_10             ; Load accumulator with value in "AC_10"
 8AD4 [03] B797      2574       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8AD6 [03] B6AF      2575       lda     AC_1              ; Load accumulator with value in "AC_1"
 8AD8 [03] B798      2576       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8ADA [03] CC8C2C    2577       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2578  
                     2579  SCRN_16:
                     2580  ;CHK_FP:
 8ADD [05] 00D905    2581       brset   FPon,portAbits,SET_FP  ; If "FPon" bit of "portAbits" is set, branch to SET_FP:
 8AE0 [04] 6E4E85    2582       mov     #'N',Botlin0           ; Move "N" into "Botlin0"(1st column on left, bottom line)
 8AE3 [03] 2003      2583       bra     SET_FP_DONE            ; Branch to SET_FP_DONE:
                     2584  
                     2585  SET_FP:
 8AE5 [04] 6E5985    2586       mov     #'Y',Botlin0           ; Move "Y" into "Botlin0"(1st column on left, bottom line)
                     2587  
                     2588  SET_FP_DONE:
 8AE8 [02] A620      2589       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8AEA [03] B786      2590       sta     Botlin1                ; Copy to "BotLin1"(2nd column on left, bottom line)
 8AEC [03] B787      2591       sta     Botlin2                ; Copy to "BotLin2"(3d column on left, bottom line)
                     2592  
                     2593  ;CHK_RN:
 8AEE [05] 00D705    2594       brset   running,engine,SET_RN  ; If "running" bit of "engine" is set, branch to SET_RN:
 8AF1 [04] 6E4E88    2595       mov     #'N',Botlin3           ; Move "N" into "Botlin3"(4th column on left, bottom line)
 8AF4 [03] 2003      2596       bra     SET_RN_DONE            ; Branch to SET_RN_DONE:
                     2597  
                     2598  SET_RN:
 8AF6 [04] 6E5988    2599       mov     #'Y',Botlin3           ; Move "Y" into "Botlin3"(4th column on left, bottom line)
                     2600  
                     2601  SET_RN_DONE:
 8AF9 [02] A620      2602       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8AFB [03] B789      2603       sta     Botlin4                ; Copy to "BotLin4"(5th column on left, bottom line)
 8AFD [03] B78A      2604       sta     Botlin5                ; Copy to "BotLin5"(6th column on left, bottom line)
                     2605  
                     2606  ;CHK_CR:
 8AFF [05] 02D705    2607       brset   crank,engine,SET_CR    ; If "crank" bit of "engine" is set, branch to SET_CR:
 8B02 [04] 6E4E8B    2608       mov     #'N',Botlin6           ; Move "N" into "Botlin6"(7th column on left, bottom line)
 8B05 [03] 2003      2609       bra     SET_CR_DONE            ; Branch to SET_CR_DONE:
                     2610  
                     2611  SET_CR:
 8B07 [04] 6E598B    2612       mov     #'Y',Botlin6           ; Move "Y" into "Botlin6"(7th column on left, bottom line)
                     2613  
                     2614  SET_CR_DONE:
 8B0A [02] A620      2615       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B0C [03] B78C      2616       sta     Botlin7                ; Copy to "BotLin7"(8th column on left, bottom line)
 8B0E [03] B78D      2617       sta     Botlin8                ; Copy to "BotLin8"(9th column on left, bottom line)
                     2618  
                     2619  ;CHK_SW:
 8B10 [05] 04D705    2620       brset   startw,engine,SET_SW   ; If "startw" bit of "engine" is set, branch to SET_SW:
 8B13 [04] 6E4E8E    2621       mov     #'N',Botlin9           ; Move "N" into "Botlin9"(10th column on left, bottom line)
 8B16 [03] 2003      2622       bra     SET_SW_DONE            ; Branch to SET_SW_DONE:
                     2623  
                     2624  SET_SW:
 8B18 [04] 6E598E    2625       mov     #'Y',Botlin9           ; Move "Y" into "Botlin9"(10th column on left, bottom line)
                     2626  
                     2627  SET_SW_DONE:
 8B1B [02] A620      2628       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B1D [03] B78F      2629       sta     Botlin10               ; Copy to "BotLin10"(11th column on left, bottom line)
 8B1F [03] B790      2630       sta     Botlin11               ; Copy to "BotLin11"(12th column on left, bottom line)
                     2631  
                     2632  ;CHK_RW:
 8B21 [05] 06D705    2633       brset   warmup,engine,SET_RW   ; If "warmup" bit of "engine" is set, branch to SET_RW:
 8B24 [04] 6E4E91    2634       mov     #'N',Botlin12          ; Move "N" into "Botlin12"(13th column on left, bottom line)
 8B27 [03] 2003      2635       bra     SET_RW_DONE            ; Branch to SET_RW_DONE:
                     2636  
                     2637  SET_RW:
 8B29 [04] 6E5991    2638       mov     #'Y',Botlin12           ; Move "Y" into "Botlin12"(13th column on left, bottom line)
                     2639  
                     2640  SET_RW_DONE:
 8B2C [02] A620      2641       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B2E [03] B792      2642       sta     Botlin13               ; Copy to "BotLin13"(14th column on left, bottom line)
 8B30 [03] B793      2643       sta     Botlin14               ; Copy to "BotLin14"(15th column on left, bottom line)
                     2644  
                     2645  ;CHK_AC:


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 24
MV351WM


 8B32 [05] 08D705    2646       brset   tpsaen,engine,SET_AC   ; If "tpsaen" bit of "engine" is set, branch to SET_AC:
 8B35 [04] 6E4E94    2647       mov     #'N',Botlin15          ; Move "N" into "Botlin15"(16th column on left, bottom line)
 8B38 [03] 2003      2648       bra     SET_AC_DONE            ; Branch to SET_AC_DONE:
                     2649  
                     2650  SET_AC:
 8B3A [04] 6E5994    2651       mov     #'Y',Botlin15          ; Move "Y" into "Botlin15"(16th column on left, bottom line)
                     2652  
                     2653  SET_AC_DONE:
 8B3D [02] A620      2654       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B3F [03] B795      2655       sta     Botlin16               ; Copy to "BotLin16"(17th column on left, bottom line)
 8B41 [03] B796      2656       sta     Botlin17               ; Copy to "BotLin17"(18th column on left, bottom line)
                     2657  
                     2658  ;CHK_DC:
 8B43 [05] 0AD705    2659       brset   tpsden,engine,SET_DC   ; If "tpsden" bit of "engine" is set, branch to SET_DC:
 8B46 [04] 6E4E97    2660       mov     #'N',Botlin18          ; Move "N" into "Botlin18"(19th column on left, bottom line)
 8B49 [03] 2003      2661       bra     SET_DC_DONE            ; Branch to SET_DC_DONE:
                     2662  
                     2663  SET_DC:
 8B4B [04] 6E5997    2664       mov     #'Y',Botlin18          ; Move "Y" into "Botlin18"(19th column on left, bottom line)
                     2665  
                     2666  SET_DC_DONE:
 8B4E [02] A620      2667       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B50 [03] B798      2668       sta     Botlin19               ; Copy to "BotLin19"(20th column on left, bottom line)
 8B52 [03] CC8C2C    2669       jmp     CHK_FRZ_DISP            ; Jump to CHK_FRZ_DISP:
                     2670  
                     2671  SCRN_17:
                     2672  ;CHK_EA:
 8B55 [05] 00DA05    2673       brset   EAon,portCbits,SET_EA   ; If "EAon" bit of "portCbits" is set, branch to SET_EA:
 8B58 [04] 6E4E85    2674       mov     #'N',Botlin0            ; Move "N" into "Botlin0"(1st column on left, bottom line)
 8B5B [03] 2003      2675       bra     SET_EA_DONE             ; Branch to SET_EA_DONE:
                     2676  
                     2677  SET_EA:
 8B5D [04] 6E5985    2678       mov     #'Y',Botlin0            ; Move "Y" into "Botlin0"(1st column on left, bottom line)
                     2679  
                     2680  SET_EA_DONE:
 8B60 [02] A620      2681       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8B62 [03] B786      2682       sta     Botlin1                 ; Copy to "BotLin1"(2nd column on left, bottom line)
 8B64 [03] B787      2683       sta     Botlin2                 ; Copy to "BotLin2"(3d column on left, bottom line)
                     2684  
                     2685  ;CHK_RL:
 8B66 [05] 0AD805    2686       brset   REVL,alarmbits,SET_RL   ; If "REVL" bit of "alarmbits" is set, branch to SET_RL:
 8B69 [04] 6E4E88    2687       mov     #'N',Botlin3            ; Move "N" into "Botlin3"(4th column on left, bottom line)
 8B6C [03] 2003      2688       bra     SET_RL_DONE             ; Branch to SET_RL_DONE:
                     2689  
                     2690  SET_RL:
 8B6E [04] 6E5988    2691       mov     #'Y',Botlin3            ; Move "Y" into "Botlin3"(4th column on left, bottom line)
                     2692  
                     2693  SET_RL_DONE:
 8B71 [02] A620      2694       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8B73 [03] B789      2695       sta     Botlin4                 ; Copy to "BotLin4"(5th column on left, bottom line)
 8B75 [03] B78A      2696       sta     Botlin5                 ; Copy to "BotLin5"(6th column on left, bottom line)
                     2697  
                     2698  ;CHK_FC:
 8B77 [05] 0CD805    2699       brset   fldClr,alarmbits,SET_FC ; If "fldClr" bit of "alarmbits" is set, branch to SET_FC:
 8B7A [04] 6E4E8B    2700       mov     #'N',Botlin6            ; Move "N" into "Botlin6"(7th column on left, bottom line)
 8B7D [03] 2003      2701       bra     SET_FC_DONE             ; Branch to SET_FC_DONE:
                     2702  
                     2703  SET_FC:
 8B7F [04] 6E598B    2704       mov     #'Y',Botlin6            ; Move "Y" into "Botlin6"(7th column on left, bottom line)
                     2705  
                     2706  SET_FC_DONE:
 8B82 [02] A620      2707       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8B84 [03] B78C      2708       sta     Botlin7                 ; Copy to "BotLin7"(8th column on left, bottom line)
 8B86 [03] B78D      2709       sta     Botlin8                 ; Copy to "BotLin8"(9th column on left, bottom line)
 8B88 [03] B78E      2710       sta     Botlin9                 ; Copy to "BotLin9"(10th column on left, bottom line)
 8B8A [03] B78F      2711       sta     Botlin10                ; Copy to "BotLin10"(11th column on left, bottom line)
 8B8C [03] B790      2712       sta     Botlin11                ; Copy to "BotLin11"(12th column on left, bottom line)
 8B8E [03] B791      2713       sta     Botlin12                ; Copy to "BotLin12"(13th column on left, bottom line)
 8B90 [03] B792      2714       sta     Botlin13                ; Copy to "BotLin13"(14th column on left, bottom line)
 8B92 [03] B793      2715       sta     Botlin14                ; Copy to "BotLin14"(15th column on left, bottom line)
                     2716  
                     2717   ;CHK_FT:
 8B94 [05] 0AD905    2718       brset   FTen,portAbits,SET_FT   ; If "FTen" bit of "portAbits" is set, branch to SET_FT:
 8B97 [04] 6E4E94    2719       mov     #'N',Botlin15            ; Move "N" into "Botlin15"(16th column on left, bottom line)
 8B9A [03] 2003      2720       bra     SET_FT_DONE             ; Branch to SET_FT_DONE:
                     2721  
                     2722  SET_FT:
 8B9C [04] 6E5994    2723       mov     #'Y',Botlin15            ; Move "Y" into "Botlin15"(16th column on left, bottom line)
                     2724  
                     2725  SET_FT_DONE:
 8B9F [02] A620      2726       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8BA1 [03] B795      2727       sta     Botlin16                 ; Copy to "BotLin16"(17th column on left, bottom line)
 8BA3 [03] B796      2728       sta     Botlin17                 ; Copy to "BotLin17"(18th column on left, bottom line)
                     2729  
                     2730  ;CHK_IT:
 8BA5 [05] 04D905    2731       brset   ITen,portAbits,SET_IT   ; If "ITen" bit of "portAbits" is set, branch to SET_IT:
 8BA8 [04] 6E4E97    2732       mov     #'N',Botlin18           ; Move "N" into "Botlin18"(19th column on left, bottom line)
 8BAB [03] 2003      2733       bra     SET_IT_DONE             ; Branch to SET_IT_DONE:
                     2734  
                     2735  SET_IT:
 8BAD [04] 6E5997    2736       mov     #'Y',Botlin18           ; Move "Y" into "Botlin18"(19th column on left, bottom line)
                     2737  
                     2738  SET_IT_DONE:
 8BB0 [02] A620      2739       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8BB2 [03] B798      2740       sta     Botlin19                ; Copy to "BotLin19"(20th column on left, bottom line)
 8BB4 [03] CC8C2C    2741       jmp     CHK_FRZ_DISP            ; Jump to CHK_FRZ_DISP:
                     2742  
                     2743  SCRN_18:
                     2744  ;CHK_EA1:
 8BB7 [05] 00DA05    2745       brset   EAon,portCbits,SET_EA1  ; If "EAon" bit of "portCbits" is set, branch to SET_EA1:
 8BBA [04] 6E4E85    2746       mov     #'N',Botlin0            ; Move "N" into "Botlin0"(1st column on left, bottom line)
 8BBD [03] 2003      2747       bra     SET_EA1_DONE            ; Branch to SET_EA1_DONE:
                     2748  
                     2749  SET_EA1:
 8BBF [04] 6E5985    2750       mov     #'Y',Botlin0            ; Move "Y" into "Botlin0"(1st column on left, bottom line)
                     2751  
                     2752  SET_EA1_DONE:
 8BC2 [02] A620      2753       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8BC4 [03] B786      2754       sta     Botlin1                 ; Copy to "BotLin1"(2nd column on left, bottom line)
 8BC6 [03] B787      2755       sta     Botlin2                 ; Copy to "BotLin2"(3d column on left, bottom line)
                     2756  
                     2757  ;CHK_HT:
 8BC8 [05] 02D805    2758       brset   HET,alarmbits,SET_HT    ; If "HET" bit of "alarmbits" is set, branch to SET_HT:
 8BCB [04] 6E4E88    2759       mov     #'N',Botlin3            ; Move "N" into "Botlin3"(4th column on left, bottom line)
 8BCE [03] 2003      2760       bra     SET_HT_DONE             ; Branch to SET_HT_DONE:
                     2761  
                     2762  SET_HT:
 8BD0 [04] 6E5988    2763       mov     #'Y',Botlin3            ; Move "Y" into "Botlin3"(4th column on left, bottom line)
                     2764  
                     2765  SET_HT_DONE:
 8BD3 [02] A620      2766       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8BD5 [03] B789      2767       sta     Botlin4                 ; Copy to "BotLin4"(5th column on left, bottom line)
 8BD7 [03] B78A      2768       sta     Botlin5                 ; Copy to "BotLin5"(6th column on left, bottom line)
                     2769  
                     2770  ;CHK_LO:
 8BD9 [05] 00D805    2771       brset   LOP,alarmbits,SET_LO    ; If "LOP" bit of "alarmbits" is set, branch to SET_LO:
 8BDC [04] 6E4E8B    2772       mov     #'N',Botlin6            ; Move "N" into "Botlin6"(7th column on left, bottom line)
 8BDF [03] 2003      2773       bra     SET_LO_DONE             ; Branch to SET_LO_DONE:
                     2774  
                     2775  SET_LO:
 8BE1 [04] 6E598B    2776       mov     #'Y',Botlin6            ; Move "Y" into "Botlin6"(7th column on left, bottom line)
                     2777  
                     2778  SET_LO_DONE:
 8BE4 [02] A620      2779       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8BE6 [03] B78C      2780       sta     Botlin7                 ; Copy to "BotLin7"(8th column on left, bottom line)
 8BE8 [03] B78D      2781       sta     Botlin8                 ; Copy to "BotLin8"(9th column on left, bottom line)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 25
MV351WM


                     2782  
                     2783  ;CHK_LF:
 8BEA [05] 04D805    2784       brset   LFP,alarmbits,SET_LF    ; If "LFP" bit of "alarmbits" is set, branch to SET_LF:
 8BED [04] 6E4E8E    2785       mov     #'N',Botlin9            ; Move "N" into "Botlin9"(10th column on left, bottom line)
 8BF0 [03] 2003      2786       bra     SET_LF_DONE             ; Branch to SET_LF_DONE:
                     2787  
                     2788  SET_LF:
 8BF2 [04] 6E598E    2789       mov     #'Y',Botlin9            ; Move "Y" into "Botlin9"(10th column on left, bottom line)
                     2790  
                     2791  SET_LF_DONE:
 8BF5 [02] A620      2792       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8BF7 [03] B78F      2793       sta     Botlin10                ; Copy to "BotLin10"(11th column on left, bottom line)
 8BF9 [03] B790      2794       sta     Botlin11                ; Copy to "BotLin11"(12th column on left, bottom line)
                     2795  
                     2796  ;CHK_HF:
 8BFB [05] 06D805    2797       brset   HFP,alarmbits,SET_HF    ; If "HFP" bit of "alarmbits" is set, branch to SET_HF:
 8BFE [04] 6E4E91    2798       mov     #'N',Botlin12           ; Move "N" into "Botlin12"(13th column on left, bottom line)
 8C01 [03] 2003      2799       bra     SET_HF_DONE             ; Branch to SET_HF_DONE:
                     2800  
                     2801  SET_HF:
 8C03 [04] 6E5991    2802       mov     #'Y',Botlin12           ; Move "Y" into "Botlin12"(13th column on left, bottom line)
                     2803  
                     2804  SET_HF_DONE:
 8C06 [02] A620      2805       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8C08 [03] B792      2806       sta     Botlin13                ; Copy to "BotLin13"(14th column on left, bottom line)
 8C0A [03] B793      2807       sta     Botlin14                ; Copy to "BotLin14"(15th column on left, bottom line)
                     2808  
                     2809  ;CHK_ET:
 8C0C [05] 08D805    2810       brset   HEGT,alarmbits,SET_ET   ; If "HEGT" bit of "alarmbits" is set, branch to SET_ET:
 8C0F [04] 6E4E94    2811       mov     #'N',Botlin15           ; Move "N" into "Botlin15"(16th column on left, bottom line)
 8C12 [03] 2003      2812       bra     SET_ET_DONE             ; Branch to SET_ET_DONE:
                     2813  
                     2814  SET_ET:
 8C14 [04] 6E5994    2815       mov     #'Y',Botlin15           ; Move "Y" into "Botlin15"(16th column on left, bottom line)
                     2816  
                     2817  SET_ET_DONE:
 8C17 [02] A620      2818       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8C19 [03] B795      2819       sta     Botlin16                ; Copy to "BotLin16"(17th column on left, bottom line)
 8C1B [03] B796      2820       sta     Botlin17                ; Copy to "BotLin17"(18th column on left, bottom line)
                     2821  
                     2822  ;CHK_KN:
 8C1D [05] 0ED805    2823       brset   knock,alarmbits,SET_KN  ; If "knock" bit of "alarmbits" is set, branch to SET_KN:
 8C20 [04] 6E4E97    2824       mov     #'N',Botlin18           ; Move "N" into "Botlin18"(19th column on left, bottom line)
 8C23 [03] 2003      2825       bra     SET_KN_DONE             ; Branch to SET_KN_DONE:
                     2826  
                     2827  SET_KN:
 8C25 [04] 6E5997    2828       mov     #'Y',Botlin18           ; Move "Y" into "Botlin18"(19th column on left, bottom line)
                     2829  
                     2830  SET_KN_DONE:
 8C28 [02] A620      2831       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8C2A [03] B798      2832       sta     Botlin19                ; Copy to "BotLin19"(20th column on left, bottom line)
                     2833  
                     2834  
                     2835  ;***************************************************************************
                     2836  ; - Check to see if we have had a "display freeze" command and branch
                     2837  ;   accordingly. (This feature was from a previous version but left in
                     2838  ;   for ease of programming)
                     2839  ;***************************************************************************
                     2840  
                     2841  CHK_FRZ_DISP:
 8C2C [05] 02530F    2842       brset    frz,flags,NO_CHNG_DB     ; If "frz" bit of "flags" variable
                     2843                                         ; is set, branch to NO_CHNG_DB:
                     2844  
                     2845  
                     2846  ;****************************************************************************
                     2847  ; - Compare all the characters on the bottom line commanded, to those of the
                     2848  ;   previous bottom line. If they are different, update the bottom line,
                     2849  ;   otherwise, skip over. This is to eliminate display  "digit rattle"
                     2850  ;   caused by rapid screen updates.
                     2851  ;****************************************************************************
                     2852  
                     2853  BOTLIN_CHK_D:
 8C2F [05] CD9171    2854       jsr     CMP_BOTLIN                   ; Jump to subroutine at CMP_BOTLIN:
 8C32 [05] 0B5309    2855       brclr   LinChng,flags,NO_CHNG_DB     ; If "LinChng" bit of "flags"
                     2856                                            ; variable is clear, branch to
                     2857                                            ; NO_CHNG_DB:
                     2858  
                     2859  ;****************************************************************************
                     2860  ; - Set up the VFD to place the first character in the bottom line, extreme
                     2861  ;   left hand position
                     2862  ;****************************************************************************
                     2863  
 8C35 [05] CD90C9    2864       jsr     VFD_START_BOT      ; Jump to subroutine at VFD_START_BOT:
                     2865  
                     2866  ;***************************************************************************
                     2867  ; - Print the bottom line of the VFD display
                     2868  ;***************************************************************************
                     2869  
                     2870  PRINT_BOT_D:
 8C38 [03] 450085    2871       ldhx    #BotLin0       ; Load index register with address of
                     2872                              ; entry point for bottom line of VFD
 8C3B [05] CD905D    2873       jsr     PRINT_LINE     ; Jump to subroutine at PRINT_LINE:
                     2874  
                     2875  NO_CHNG_DB:
 8C3E [03] CC8239    2876       jmp     LOOPY          ; Jump to LOOPY:(End of program loop while in
                     2877                              ; "Display" mode)
                     2878  
                     2879  
                     2880  ;****************************************************************************
                     2881  ;
                     2882  ; * * * * * * * * * * * * * * Interrupt Section * * * * * * * * * * * * * *
                     2883  ;
                     2884  ; NOTE!!! If the interrupt service routine modifies the H register, or uses
                     2885  ; the indexed addressing mode, save the H register (pshh) and then restore
                     2886  ; it (pulh) prior to exiting the routine
                     2887  ;
                     2888  ;****************************************************************************
                     2889  
                     2890  ;****************************************************************************
                     2891  ;
                     2892  ; -------- Following interrupt service routines in priority order ----------
                     2893  ;
                     2894  ; TIM2CH0_ISR: - TIM2 CH0 Interrupt (1000uS clock tick)(1.0mS)
                     2895  ;
                     2896  ; SCIRCV_ISR:  - SCI receive
                     2897  ;
                     2898  ; SCITX_ISR:   - SCI transmit (Not used)
                     2899  ;
                     2900  ;
                     2901  ;***************************************************************************
                     2902  
                     2903  ;****************************************************************************
                     2904  ;============================================================================
                     2905  ; - TIM2 CH0 Interrupt (1000uS clock tick)(1.0mS)
                     2906  ; - Generate time rates:
                     2907  ;   Milliseconds,(for contact de-bounce counters)
                     2908  ;   5 Milleseconds,(for auto-repeat and auto-repeat command counters)
                     2909  ;   250 Milliseconds,(for real time variable display updates)
                     2910  ;============================================================================
                     2911  ;****************************************************************************
                     2912  
                     2913  TIM2CH0_ISR:
 8C41 [02] 8B        2914       pshh                  ; Push value in index register Hi byte to stack
 8C42 [03] B630      2915       lda     T2SC0         ; Load accumulator with value in TIM2 CH0 Status
                     2916                             ; and Control Register (Arm CHxF flag clear)
 8C44 [04] 1F30      2917       bclr    CHxF,T2SC0    ; Clear CHxF bit of TIM2 CH0 Status and


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 26
MV351WM


                     2918                             ; Control Register
 8C46 [03] B632      2919       lda     T2CH0L        ; Load accumulator with value in TIM2 CH0 OC
                     2920                             ; register Lo byte
 8C48 [02] ABE8      2921       add     #$E8          ; Add (A)<-(A)+(#) decimal 232
 8C4A [01] 97        2922       tax                   ; Transfer value in accumulator to index
                     2923                             ; register Lo byte
 8C4B [03] B631      2924       lda     T2CH0H        ; Load accumulator with value in TIM2 CH0 OC
                     2925                             ; register Hi byte
 8C4D [02] A903      2926       adc     #$03          ; Add with carry decimal 768 (A)<-(A)+(#)+(C)
                     2927                             ;(total = ~1000uS)
 8C4F [03] B731      2928       sta     T2CH0H        ; Copy result to TIM2 CH0 OC register Hi byte
 8C51 [03] BF32      2929       stx     T2CH0L        ; Copy value in index register Lo byte
                     2930                             ; to TIM2 CH0 OC register Lo byte
                     2931                             ;(new output compare value)
                     2932  
                     2933  ;============================================================================
                     2934  ;*********************** 1.0 millisecond section ****************************
                     2935  ;============================================================================
                     2936  
                     2937  
                     2938  ;****************************************************************************
                     2939  ; - Check the value of the contact de-bounce counter variables, if other
                     2940  ;   than zero, decrement them.
                     2941  ;****************************************************************************
                     2942  
 8C53 [03] B640      2943       lda     Sw0DB              ; Load accumulator with value in "Sw0DB"
                     2944                                  ; variable
 8C55 [03] 2702      2945       beq     Sw0DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2946                                  ; Sw0DB_CHK_DONE:
 8C57 [04] 3A40      2947       dec     Sw0DB              ; Decrement "Sw0DB" variable
                     2948  
                     2949  Sw0DB_CHK_DONE:
                     2950  
 8C59 [03] B643      2951       lda     Sw1DB              ; Load accumulator with value in "Sw1DB"
                     2952                                  ; variable
 8C5B [03] 2702      2953       beq     Sw1DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2954                                  ; Sw1DB_CHK_DONE:
 8C5D [04] 3A43      2955       dec     Sw1DB              ; Decrement "Sw1DB" variable
                     2956  
                     2957  Sw1DB_CHK_DONE:
                     2958  
 8C5F [03] B646      2959       lda     Sw2DB              ; Load accumulator with value in "Sw2DB"
                     2960                                  ; variable
 8C61 [03] 2702      2961       beq     Sw2DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2962                                  ; Sw2DB_CHK_DONE:
 8C63 [04] 3A46      2963       dec     Sw2DB              ; Decrement "Sw2DB" variable
                     2964  
                     2965  Sw2DB_CHK_DONE:
                     2966  
 8C65 [03] B649      2967       lda     Sw3DB              ; Load accumulator with value in "Sw3DB"
                     2968                                  ; variable
 8C67 [03] 2702      2969       beq     Sw3DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2970                                  ; Sw3DB_CHK_DONE:
 8C69 [04] 3A49      2971       dec     Sw3DB              ; Decrement "Sw3DB" variable
                     2972  
                     2973  Sw3DB_CHK_DONE:
                     2974  
                     2975  
                     2976  ;****************************************************************************
                     2977  ; - Increment millisecond counter
                     2978  ;****************************************************************************
                     2979  
                     2980  INC_mS:
 8C6B [04] 3C5F      2981       inc     mS                  ; Increment Millisecond counter
 8C6D [03] B65F      2982       lda     mS                  ; Load accumulator with value in
                     2983                                   ; Millisecond counter
 8C6F [02] A105      2984       cmp     #$05                ; Compare it with decimal 5
 8C71 [03] 2648      2985       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     2986                                   ; branch to TIM2CH0_ISR_DONE:
                     2987  
                     2988  ;============================================================================
                     2989  ;************************** 5 Millisecond section ***************************
                     2990  ;============================================================================
                     2991  
                     2992  ;****************************************************************************
                     2993  ; - Check the value of the contact auto-repeat command counter variables,
                     2994  ;   if other than zero, decrement them.
                     2995  ;****************************************************************************
                     2996  
 8C73 [03] B641      2997       lda     Sw0ARC             ; Load accumulator with value in "Sw0ARC"
                     2998                                  ; variable
 8C75 [03] 2702      2999       beq     SW0ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     3000                                  ; SW0ARC_CHK_DONE:
 8C77 [04] 3A41      3001       dec     Sw0ARC             ; Decrement "Sw0ARC" variable
                     3002  
                     3003  SW0ARC_CHK_DONE:
                     3004  
 8C79 [03] B644      3005       lda     Sw1ARC             ; Load accumulator with value in "Sw1ARC"
                     3006                                  ; variable
 8C7B [03] 2702      3007       beq     SW1ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     3008                                  ; SW1ARC_CHK_DONE:
 8C7D [04] 3A44      3009       dec     Sw1ARC             ; Decrement "Sw1ARC" variable
                     3010  
                     3011  SW1ARC_CHK_DONE:
                     3012  
 8C7F [03] B647      3013       lda     Sw2ARC             ; Load accumulator with value in "Sw2ARC"
                     3014                                  ; variable
 8C81 [03] 2702      3015       beq     SW2ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     3016                                  ; SW2ARC_CHK_DONE:
 8C83 [04] 3A47      3017       dec     Sw2ARC             ; Decrement "Sw2ARC" variable
                     3018  
                     3019  SW2ARC_CHK_DONE:
                     3020  
 8C85 [03] B64A      3021       lda     Sw3ARC             ; Load accumulator with value in "Sw3ARC"
                     3022                                  ; variable
 8C87 [03] 2702      3023       beq     SW3ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     3024                                  ; SW3ARC_CHK_DONE:
 8C89 [04] 3A4A      3025       dec     Sw3ARC             ; Decrement "Sw3ARC" variable
                     3026  
                     3027  SW3ARC_CHK_DONE:
                     3028  
                     3029  
                     3030  ;****************************************************************************
                     3031  ; - Check the value of the contact auto-repeat counter variables, if other
                     3032  ;   than zero, decrement them.
                     3033  ;****************************************************************************
                     3034  
 8C8B [03] B642      3035       lda     Sw0AR              ; Load accumulator with value in "Sw0AR"
                     3036                                  ; variable
 8C8D [03] 2702      3037       beq     SW0AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3038                                  ; SW0AR_CHK_DONE:
 8C8F [04] 3A42      3039       dec     Sw0AR              ; Decrement "Sw0AR" variable
                     3040  
                     3041  SW0AR_CHK_DONE:
                     3042  
 8C91 [03] B645      3043       lda     Sw1AR              ; Load accumulator with value in "Sw1AR"
                     3044                                  ; variable
 8C93 [03] 2702      3045       beq     SW1AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3046                                  ; SW1AR_CHK_DONE:
 8C95 [04] 3A45      3047       dec     Sw1AR              ; Decrement "Sw1AR" variable
                     3048  
                     3049  SW1AR_CHK_DONE:
                     3050  
 8C97 [03] B648      3051       lda     Sw2AR              ; Load accumulator with value in "Sw2AR"
                     3052                                  ; variable
 8C99 [03] 2702      3053       beq     SW2AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 27
MV351WM


                     3054                                  ; SW2AR_CHK_DONE:
 8C9B [04] 3A48      3055       dec     Sw2AR              ; Decrement "Sw2AR" variable
                     3056  
                     3057  SW2AR_CHK_DONE:
                     3058  
 8C9D [03] B64B      3059       lda     Sw3AR              ; Load accumulator with value in "Sw3AR"
                     3060                                  ; variable
 8C9F [03] 2702      3061       beq     SW3AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     3062                                  ; SW3AR_CHK_DONE:
 8CA1 [04] 3A4B      3063       dec     Sw3AR              ; Decrement "Sw3AR" variable
                     3064  
                     3065  SW3AR_CHK_DONE:
                     3066  
                     3067  
                     3068  ;****************************************************************************
                     3069  ; - Increment 5 millisecond counter
                     3070  ;****************************************************************************
                     3071  
                     3072  INC_mSx5:
 8CA3 [03] 3F5F      3073       clr     mS                  ; Clear Millisecond counter
 8CA5 [04] 3C60      3074       inc     mSx5                ; Increment 5 Millisecond counter
 8CA7 [03] B660      3075       lda     mSx5                ; Load accumulator with value in
                     3076                                   ; 5 Millesecond counter
 8CA9 [02] A132      3077       cmp     #$32                ; Compare it with decimal 50
 8CAB [03] 260E      3078       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     3079                                   ; branch to TIM2CH0_ISR_DONE:
                     3080  
                     3081  ;============================================================================
                     3082  ;************************* 250 Millisecond section **************************
                     3083  ;============================================================================
                     3084  
                     3085  ;***************************************************************************
                     3086  ; - Send the letter 'A' command to update the real time variables.
                     3087  ;***************************************************************************
                     3088  
 8CAD [03] B616      3089       lda     SCS1                    ; Load accumulator with value in SCI
                     3090                                       ; Control Register 1
                     3091                                       ;(Clear transmitter empty bit)
                     3092                                       ;(Clears all by read)
 8CAF [04] 6E4118    3093       mov     #'A',SCDR               ; Move ASCII'A' to SCI Data Register
                     3094                                       ;(Transmitter is running, so data
                     3095                                       ; shift starts now!)
 8CB2 [03] 3F5C      3096       clr     ByteCnt                 ; Clear "ByteCnt" variable
 8CB4 [04] 6E2A5D    3097       mov     #$2A,ByteGoal           ; Move decimal 42 into "ByteGoal"
                     3098                                       ;(one more than the number of real
                     3099                                       ; time variables for display,41)
                     3100  
                     3101  ;**************************************************************************
                     3102  ; - Enable receiver full interrupt.
                     3103  ;**************************************************************************
                     3104  
 8CB7 [04] 1A14      3105       bset    SCRIE,SCC2     ; Set "SCRIE" bit of SCI Control Register 2
                     3106                              ;(SCRF enabled to generate CPU Interrupt)
                     3107  
                     3108  UPDATE_DONE:
 8CB9 [03] 3F60      3109       clr     mSx5           ; Clear 5 Millisecond counter
                     3110  
                     3111  TIM2CH0_ISR_DONE:
 8CBB [02] 8A        3112       pulh                  ; Pull value from stack to index register Hi byte
 8CBC [07] 80        3113       rti                   ; Return from interrupt
                     3114  
                     3115  
                     3116  ;***************************************************************************
                     3117  ;
                     3118  ; ---------------- MS_ECU Serial Communications Interface -----------------
                     3119  ;
                     3120  ; Communications are established when a command character is sent, the
                     3121  ; particular character sets the mode:
                     3122  ;
                     3123  ; "A" = Receive realtime variables via txport.(53 bytes)(MS->MV)
                     3124  ;
                     3125  ;***************************************************************************
                     3126  
                     3127  ;***************************************************************************
                     3128  ;===========================================================================
                     3129  ; - SCI Receive Interrupt
                     3130  ;===========================================================================
                     3131  ;***************************************************************************
                     3132  
                     3133  ;***************************************************************************
                     3134  ; - Enter here when have received RS 232 byte
                     3135  ;   (SCRF bit of SCS1 set)
                     3136  ;***************************************************************************
                     3137  
                     3138  SCIRCV_ISR:
 8CBD [02] 8B        3139       pshh                 ; Push value in index register Hi byte to Stack
                     3140  
                     3141  ;***************************************************************************
                     3142  ; - Clear status register to allow next interrupt
                     3143  ;***************************************************************************
                     3144  
 8CBE [03] B616      3145       lda     SCS1     ; Load accumulator with value in SCI Register 1
                     3146  
                     3147  ;***************************************************************************
                     3148  ; - Transfer received byte from register to buffer
                     3149  ;***************************************************************************
                     3150  
 8CC0 [03] B618      3151       lda     SCDR        ; Load accumulator with value in SCI Data Register
 8CC2 [03] B75E      3152       sta     readbuf     ; Copy to "readbuf" variable
                     3153  
                     3154  ;***************************************************************************
                     3155  ; - We are in "Display" mode, transfer received byte from buffer to real
                     3156  ;   time variable.
                     3157  ;***************************************************************************
                     3158  
                     3159  RCVNG_VAR:
 8CC4 [03] BE5C      3160       ldx     ByteCnt           ; Load index register Lo byte with value in
                     3161                                 ; "ByteCnt" variable
 8CC6 [01] 8C        3162       clrh                      ; Clear index register hi byte
 8CC7 [03] B65E      3163       lda     readbuf           ; Load accumulator with value in "readbuf"
 8CC9 [03] E7B4      3164       sta     secl,x            ; Copy to address at "secl", offset in index
                     3165                                 ; register Lo byte
                     3166  
                     3167  NEXT_RCV_BYTE:
 8CCB [04] 3C5C      3168       inc     ByteCnt          ; Increment value in "ByteCnt"(ByteCnt=ByteCnt+1)
 8CCD [03] B65C      3169       lda     ByteCnt          ; Load accumulator w3ith value in "ByteCnt"
 8CCF [03] B15D      3170       cmp     ByteGoal         ; Compare value in accumulator (ByteCnt")to
                     3171                                ; value in "ByteGoal" variable
 8CD1 [03] 2304      3172       bls     SCIRCV_ISR_DONE  ; If C or Z bits of CCR are set,(A<=M),
                     3173                                ; branch to SCIRCV_ISR_DONE:
                     3174  
                     3175  ;***************************************************************************
                     3176  ; - Done receiving - kill receive interrupt enable
                     3177  ;***************************************************************************
                     3178  
 8CD3 [03] 3F5C      3179       clr     ByteCnt           ; Clear "ByteCnt" variable
 8CD5 [04] 1B14      3180       bclr    SCRIE,SCC2        ; Clear "SCRIE" bit of SCI Control Register 2
                     3181                                 ;(SCRF not enabled to generate CPU interrupt)
                     3182  
                     3183  SCIRCV_ISR_DONE:
 8CD7 [02] 8A        3184       pulh                ; Pull value from stack to index register Hi byte
 8CD8 [07] 80        3185       rti                 ; Return from interrupt
                     3186  
                     3187  
                     3188  ;**************************************************************************
                     3189  ;==========================================================================


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 28
MV351WM


                     3190  ; - SCI Transmit Interrupt
                     3191  ;==========================================================================
                     3192  ;**************************************************************************
                     3193  
                     3194  ;**************************************************************************
                     3195  ; - Enter here when the RS232 transmit buffer is empty
                     3196  ;   (SCTE bit of SCS1 is set)(Not used)
                     3197  ;**************************************************************************
                     3198  
                     3199  SCITX_ISR:
 8CD9 [07] 80        3200       rti                ; Return from interrupt
                     3201  
                     3202  
                     3203  ;**************************************************************************
                     3204  ;==========================================================================
                     3205  ;- Dummy ISR vector ( This should never be called, but, just in case.)
                     3206  ;==========================================================================
                     3207  ;**************************************************************************
                     3208  
                     3209  Dummy:
 8CDA [07] 80        3210       rti     ; Return from interrupt
                     3211  
                     3212  
                     3213  ;***************************************************************************
                     3214  ;
                     3215  ; ---------------------------- SUBROUTINES --------------------------------
                     3216  ;
                     3217  ; - CALC_MAP
                     3218  ; - CALC_MAT
                     3219  ; - CALC_CLT
                     3220  ; - CALC_VOLTS
                     3221  ; - CALC_EGOV
                     3222  ; - CALC_AFR
                     3223  ; - CALC_LAMBDA
                     3224  ; - CALC_OP
                     3225  ; - CALC_FP
                     3226  ; - CALC_EGT
                     3227  ; - CALC_DUTY
                     3228  ; - CALC_RPM
                     3229  ; - CALC_RPM_HR
                     3230  ; - CALC_TRIM_ANG
                     3231  ; - CALC_DLY_ANG
                     3232  ; - CALC_TIM_ANG
                     3233  ; - CALC_MON_TIM_ANG
                     3234  ; - CALC_L_HR
                     3235  ; - DIV_BY_TEN
                     3236  ;
                     3237  ;-------------------------------------------------------------------------
                     3238  ;
                     3239  ; - CONV_8BIT_ASCII
                     3240  ; - CONV_16BIT_ASCII
                     3241  ; - SW0_CHK
                     3242  ; - SW1_CHK
                     3243  ; - DELAY300
                     3244  ; - PRNT_TOPLN_DSP
                     3245  ; - LOAD_SPACE
                     3246  ; - PRINT_LINE
                     3247  ; - GET_VECT_ADDR
                     3248  ; - ADD_A_TO_HX
                     3249  ; - LDA_W_HX_PL_A
                     3250  ; - VFD_START_TOP
                     3251  ; - VFD_START_BOT
                     3252  ; - VFD_SEND
                     3253  ; - Long Delay      (for VFD instruction/data transfer)
                     3254  ; - Short Delay     (for VFD instruction/data transfer)
                     3255  ; - VFD Display
                     3256  ; - CMP_BOTLIN
                     3257  ; - ORD_TABLE_FIND (Ordered Table Search)
                     3258  ; - LININTERP      (Linear Interpolation)
                     3259  ; - UDVD32         (32 x 16 divide)
                     3260  ; - DIVROUND       (Round after 16 x 8 division)
                     3261  ; - UMUL32         (16 x 16 multiply)
                     3262  ;
                     3263  ;***************************************************************************
                     3264  
                     3265  ;***********************************************************************************************
                     3266  ; - This subroutine uses "mapADC" and the "KPAFACTOR4250rjh" table to look up the value of "kpa"
                     3267  ;***********************************************************************************************
                     3268  
                     3269  CALC_MAP:
 8CDB [01] 8C        3270       clrh                         ; Clear index register Hi byte
 8CDC [03] B6B5      3271       lda     mapADC               ; Load accumulator with value in MAP ADC
 8CDE [01] 97        3272       tax                          ; Copy to index register Lo byte
 8CDF [04] D6F400    3273       lda     KPAFACTOR4250rjh,x   ; Load accumulator with value in KPAFACTOR4250rjh table
                     3274                                    ; (offset in index register Lo byte)
 8CE2 [03] B7DD      3275       sta     map                  ; Copy to Manifold Air Pressure in Kilopascals
 8CE4 [04] 81        3276       rts                          ; Return from subroutine
                     3277  
                     3278  ;***********************************************************************************************
                     3279  ; - This subroutine uses "matADC" and the "thermfactor" table to look up the value of "mat"
                     3280  ;***********************************************************************************************
                     3281  
                     3282  CALC_MAT:
 8CE5 [01] 8C        3283       clrh                      ; Clear index register Hi byte
 8CE6 [03] B6B6      3284       lda     matADC            ; Load accumulator with value in Manifold Air Temperature ADC
 8CE8 [01] 97        3285       tax                       ; Copy to index register Lo byte
 8CE9 [04] D6F500    3286       lda     thermfactor,x     ; Load accumulator with value in thermfactor table,
                     3287                                 ; (offset in index register Lo byte(modified for Ford sensor)
 8CEC [03] B7DE      3288       sta     mat               ; Copy to Manifold Air Temp in degreesF+40
 8CEE [04] 81        3289       rts                       ; Return from subroutine
                     3290  
                     3291  ;***********************************************************************************************
                     3292  ; - This subroutine uses "cltADC" and the "thermfactor" table to look up the value of "clt"
                     3293  ;***********************************************************************************************
                     3294  
                     3295  CALC_CLT:
 8CEF [01] 8C        3296       clrh                      ; Clear index register Hi byte
 8CF0 [03] B6B7      3297       lda     cltADC            ; Load accumulator with value in EngineTemperature ADC
 8CF2 [01] 97        3298       tax                       ; Copy to index register Lo byte
 8CF3 [04] D6F500    3299       lda     thermfactor,x     ; Load accumulator with value in thermfactor table,
                     3300                                 ; (offset in index register Lo byte(modified for Ford sensor))
 8CF6 [03] B7DF      3301       sta     clt               ; Copy to Engine Temp in degreesF+40
 8CF8 [04] 81        3302       rts                       ; Return from subroutine
                     3303  
                     3304  ;***********************************************************************************************
                     3305  ; - This subroutine calculates battery voltage * 10 from battery
                     3306  ;   voltage ADC
                     3307  ;   Batt ADC/255 * 30 = battery voltage
                     3308  ;   (battADC * 300)/255  = volts(battery voltage * 10)(for integer math)
                     3309  ;**********************************************************************************************
                     3310  
                     3311  CALC_VOLTS:
                     3312  
                     3313  ;***************************************************************************
                     3314  ; - Load variables and multiply to obtain the dividend
                     3315  ;***************************************************************************
                     3316  
 8CF9 [03] 3F6C      3317       clr     tmp4       ; Clear tmp4
 8CFB [03] B6B9      3318       lda     battADC    ; Load accumulator with value in Battery voltage ADC
 8CFD [03] B76B      3319       sta     tmp3       ; Copy to tmp3
 8CFF [02] A601      3320       lda     #$1        ; Load accumulator with decimal 300 Hi byte(1 x 256 = 256)
 8D01 [03] B76A      3321       sta     tmp2       ; Copy to tmp4
 8D03 [02] A62C      3322       lda     #$2C       ; Load accumulator with decimal 300 Lo byte (44)
 8D05 [03] B769      3323       sta     tmp1       ; Copy to tmp1
 8D07 [05] CD9364    3324       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3325  


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 29
MV351WM


                     3326  ;****************************************************************************
                     3327  ; - Load 16 bit dividend ("battADC" x 300) and divide by 255
                     3328  ;****************************************************************************
                     3329  
 8D0A [03] B66E      3330       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8D0C [02] 87        3331       psha               ; Push value in accumulator to stack
 8D0D [02] 8A        3332       pulh               ; Pull value from stack to index register Hi byte((A)to(H))
 8D0E [03] B66D      3333       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8D10 [02] AEFF      3334       ldx     #$FF       ; Load index register Lo byte with decimal 255
 8D12 [07] 52        3335       div                ; Divide A<-(H:A)/(X);H<-Remainder
 8D13 [05] CD9351    3336       jsr     DIVROUND   ; Jump to subroutine at DIVROUND:(round result)
 8D16 [03] B7E0      3337       sta     volts      ; Copy to "volts"(battery voltage x 10)
 8D18 [04] 81        3338       rts                ; Return from subroutine
                     3339  
                     3340  ;***********************************************************************************************
                     3341  ; - This subroutine calculates Exhaust Gas Oxygen sensor voltage * 10 from Exhaust Gas Oxygen
                     3342  ;   sensor ADC
                     3343  ;   egoADC/255 * 5 = ego voltage
                     3344  ;   (egoADC * 50)/255  = egoV(ego voltage * 10)(for integer math)
                     3345  ;**********************************************************************************************
                     3346  
                     3347  CALC_EGOV:
 8D19 [02] A632      3348       lda     #$32       ; Load accumulator with decimal 50(5 x 10 for integer math)
 8D1B [01] 97        3349       tax                ; Transfer value in accumulator to index register Lo byte
 8D1C [03] B6BA      3350       lda     egoADC     ; Load accumulator with value in "egoADC"
 8D1E [05] 42        3351       mul                ; Multiply X:A<-(X)x(A)
 8D1F [02] 89        3352       pshx               ; Push value in index register Lo byte to stack
 8D20 [02] 8A        3353       pulh               ; Pull value from stack to index register Hi byte((X)to(H))
 8D21 [02] AEFF      3354       ldx     #$FF       ; Load index register Lo byte with decimal 255
 8D23 [07] 52        3355       div                ; Divide A<-(H:A)/(X);H<-Remainder
 8D24 [05] CD9351    3356       jsr     DIVROUND   ; Jump to subroutine at DIVROUND:(round result)
 8D27 [03] B7E1      3357       sta     egoV       ; Copy to "egoV"(ego voltage  x 10)
 8D29 [04] 81        3358       rts                ; Return from subroutine
                     3359  
                     3360  ;***********************************************************************************************
                     3361  ; - This subroutine uses "egoADC" to calculate "afr"(Air/Fuel ratio x 10) using the Innovate
                     3362  ;   LC-1 WB unit
                     3363  ;   AFR = 7.35 + (egoADC * 0.05898040)
                     3364  ;   For integer math:
                     3365  ;   AFR = (7.35*100 + (((egoADC*1000)*59)/10000))/10
                     3366  ;   AFR = (735 + (((egoADC*59000)/10000))/10
                     3367  ;***********************************************************************************************
                     3368  
                     3369  CALC_AFR:
                     3370  
                     3371  ;***********************************************************************************************
                     3372  ; - Load variables and multiply to obtain the dividend(egoADC*59,000)
                     3373  ;***********************************************************************************************
                     3374  
 8D2A [03] 3F6C      3375       clr     tmp4       ; Clear tmp4
 8D2C [03] B6BA      3376       lda     egoADC     ; Load accumulator with value in "egoADC"
 8D2E [03] B76B      3377       sta     tmp3       ; Copy to tmp3
 8D30 [02] A6E6      3378       lda     #$E6       ; Load accumulator with decimal 59000 Hi byte(230 x 256 = 58880)
 8D32 [03] B76A      3379       sta     tmp2       ; Copy to tmp2
 8D34 [02] A678      3380       lda     #$78       ; Load accumulator with decimal 59000 Lo byte(120)
 8D36 [03] B769      3381       sta     tmp1       ; Copy to tmp1
 8D38 [05] CD9364    3382       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3383  
                     3384  ;***********************************************************************************************
                     3385  ; - Load 24 bit dividend ("egoADC" x 59,000)
                     3386  ;***********************************************************************************************
                     3387  
 8D3B [03] 3F61      3388       clr     intacc1    ; Clear intacc1
 8D3D [03] B66F      3389       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8D3F [03] B762      3390       sta     intacc1+1  ; Copy to intacc1+1
 8D41 [03] B66E      3391       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8D43 [03] B763      3392       sta     intacc1+2  ; Copy to intacc1+2
 8D45 [03] B66D      3393       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8D47 [03] B764      3394       sta     intacc1+3  ; Copy to intacc1+3
                     3395  
                     3396  ;***********************************************************************************************
                     3397  ; - Load 16 bit divisor (10,000) and divide
                     3398  ;***********************************************************************************************
                     3399  
 8D49 [02] A627      3400       lda     #$27       ; Load accumulator with decimal 10,000 Hi byte(39 x 256 = 9984)
 8D4B [03] B765      3401       sta     intacc2    ; Copy to intacc2
 8D4D [02] A610      3402       lda     #$10       ; Load accumulator with decimal 10,000 Lo byte(16)
 8D4F [03] B766      3403       sta     intacc2+1  ; Copy to intacc2+1 variable
 8D51 [05] CD92C5    3404       jsr     udvd32     ; jump to udvd32 subroutine(intacc1:32 = intacc1:32 / intacc2:16)
                     3405  
                     3406  ;***********************************************************************************************
                     3407  ; - Add 735 to the result
                     3408  ;   02:DF + intacc1+2:intacc1+3 = tmp1:tmp2(maximum 64762)
                     3409  ;***********************************************************************************************
                     3410  
 8D54 [03] B663      3411       lda     intacc1+2  ; Load accumulator with value in intacc1+2 (result mid Lo byte)
 8D56 [02] A1FC      3412       cmp     #$FC       ; Compare with decimal 252
 8D58 [03] 2202      3413       bhi     RAIL_AFR   ; If (A)>(M) branch to RAIL_AFR:
 8D5A [03] 2004      3414       bra     CONT_AFR   ; Branch to CONT_AFR:
                     3415  
                     3416  RAIL_AFR:
 8D5C [02] A6FC      3417       lda     #$FC       ; Load accumulator with decimal 252
 8D5E [03] B763      3418       sta     intacc1+2  ; Copy to "intacc1+2"
                     3419  
                     3420  CONT_AFR:
 8D60 [03] B664      3421       lda     intacc1+3  ; Load accumulator with value in intacc1+3(result Lo byte)
 8D62 [02] ABDF      3422       add     #$DF       ; Add (A)<-)(A)+(M) (decimal 735 Lo byte)(223)
 8D64 [01] 97        3423       tax                ; Transfer value in accumulator to index register Lo byte
                     3424                          ; (temporary store result)
 8D65 [03] B663      3425       lda     intacc1+2  ; Load accumulator with value in intacc1+3(result Mid Lo byte)
 8D67 [02] A902      3426       adc     #$02       ; Add with carry (A)<-(A)+(M)+(C)(decimal 735 Hi byte(2 x 256 = 512)
 8D69 [03] B769      3427       sta     tmp1       ; Copy result to "tmp1"(result Hi byte)
 8D6B [03] BF6A      3428       stx     tmp2       ; Result Lo byte
                     3429  
                     3430  ;***********************************************************************************************
                     3431  ; - Divide the result by 10
                     3432  ;   afr(AFR x 10) = tmp1:tmp2 / 10
                     3433  ;***********************************************************************************************
                     3434  
 8D6D [03] B669      3435       lda     tmp1       ; Load accumulator with value in "tmp1" result Hi byte)
 8D6F [02] 87        3436       psha               ; Push value in accumulator onto stack
 8D70 [02] 8A        3437       pulh               ; Pull value from stack to index register Hi byte(A to H)
 8D71 [03] B66A      3438       lda     tmp2       ; Load accumulator with value in "tmp2"(result Lo byte)
 8D73 [02] AE0A      3439       ldx     #$0A       ; Load index register Lo byte with decimal 10
 8D75 [07] 52        3440       div                ; Divide A<-(H:A)/(X);H<-Remainder
 8D76 [05] CD9351    3441       jsr     DIVROUND   ; Jump to subroutine at DIVROUND:(round result)
 8D79 [03] B7E3      3442       sta     afr        ; Copy result to "afr"(AFR x 10)
 8D7B [04] 81        3443       rts                ; Return from subroutine
                     3444  
                     3445  
                     3446  ;***********************************************************************************************
                     3447  ; - This subroutine uses "afr" to calculate the value of "lambda"(LAMBDA x 100)
                     3448  ;   LAMBDA = AFR / 14.7
                     3449  ;   For integer math:
                     3450  ;   lambda = ((AFR*10) / (14.7*10))*100
                     3451  ;   lambda = (afr/147)*100
                     3452  ;   lambda = (afr*100)/147
                     3453  ;***********************************************************************************************
                     3454  
                     3455  CALC_LAMBDA:
 8D7C [02] A664      3456       lda     #$64       ; Load accumulator with decimal 100
 8D7E [01] 97        3457       tax                ; Transfer value in accumulator to index register Lo byte
 8D7F [03] B6E3      3458       lda     afr        ; Load accumulator with value in "afr"
 8D81 [05] 42        3459       mul                ; Multiply X:A<-(X)x(A)
 8D82 [02] 89        3460       pshx               ; Push value in index register Lo byte to stack(result Hi byte)
 8D83 [02] 8A        3461       pulh               ; Pull value from stack to index register Hi byte((X)to(H))


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 30
MV351WM


 8D84 [02] AE93      3462       ldx     #$93       ; Load index register Lo byte  with decimal 147(14.7*10)
 8D86 [07] 52        3463       div                ; Divide A<-(H:A)/(X);H<-Remainder
 8D87 [05] CD9351    3464       jsr     DIVROUND   ; Jump to subroutine at DIVROUND:(round result)
 8D8A [03] B7E2      3465       sta     lambda     ; Copy to "lambda"(LAMBDA x 10)
 8D8C [04] 81        3466       rts                ; Return from subroutine
                     3467  
                     3468  
                     3469  ;***********************************************************************************************
                     3470  ; - This subroutine uses "opADC" to calculate the value of "oprs"(engine oil pressure in PSI)
                     3471  ;   Oil pressure and Fuel pressure transducers 1-5V, 0-100 PSI
                     3472  ;***********************************************************************************************
                     3473  
                     3474  CALC_OP:
                     3475  
                     3476  ;***********************************************************************************************
                     3477  ; - Linear Interpolation of ADC value:
                     3478  ;   tmp1 = 51 (1 volt)
                     3479  ;   tmp2 = 255 ( 5 volts)
                     3480  ;   tmp3 = Lo end of scale
                     3481  ;   tmp4 = Hi end of scale
                     3482  ;   tmp5 = ADC value
                     3483  ;   tmp6 = Result
                     3484  ;***********************************************************************************************
                     3485  
 8D8D [04] 6E3369    3486       mov     #$33,tmp1         ; Move decimal 51 to "tmp1"(1 volt)
 8D90 [04] 6EFF6A    3487       mov     #$FF,tmp2         ; Move decimal 255 to "tmp2"(5 volts)
 8D93 [04] 6E646C    3488       mov     #$64,tmp4         ; Move decimal 100 to "tmp4" (100 PSI)
 8D96 [03] 3F6B      3489       clr     tmp3              ; Clear "tmp3"(0 PSI)
 8D98 [05] 4EBD6D    3490       mov     opADC,tmp5        ; Move value in "opADC" to "tmp5"(ADC value)
 8D9B [05] CD9273    3491       jsr     lininterp         ; Jump to subroutine at linenterp:
 8D9E [03] B66E      3492       lda     tmp6              ; Load accumulator with value in "tmp6"(Result)
 8DA0 [03] B7EB      3493       sta     oprs              ; Copy to "oprs"(engine oil pressure in PSI)
 8DA2 [04] 81        3494       rts                       ; Return from subroutine
                     3495  
                     3496  
                     3497  ;***********************************************************************************************
                     3498  ; - This subroutine uses "fpADC" to calculate the value of "fprs"(Fuel pressure in PSI)
                     3499  ;   Oil pressure and Fuel pressure transducers 1-5V, 0-100 PSI
                     3500  ;***********************************************************************************************
                     3501  
                     3502  CALC_FP:
                     3503  
                     3504  ;***********************************************************************************************
                     3505  ; - Linear Interpolation of ADC value:
                     3506  ;   tmp1 = 51 (1 volt)
                     3507  ;   tmp2 = 255 ( 5 volts)
                     3508  ;   tmp3 = Lo end of scale
                     3509  ;   tmp4 = Hi end of scale
                     3510  ;   tmp5 = ADC value
                     3511  ;   tmp6 = Result
                     3512  ;***********************************************************************************************
                     3513  
 8DA3 [04] 6E3369    3514       mov     #$33,tmp1         ; Move decimal 51 to "tmp1"(1 volt)
 8DA6 [04] 6EFF6A    3515       mov     #$FF,tmp2         ; Move decimal 255 to "tmp2"(5 volts)
 8DA9 [04] 6E646C    3516       mov     #$64,tmp4         ; Move decimal 100 to "tmp4" (100 PSI)
 8DAC [03] 3F6B      3517       clr     tmp3              ; Clear "tmp3"(0 PSI)
 8DAE [05] 4EBE6D    3518       mov     fpADC,tmp5        ; Move value in "fpADC" to "tmp5"(ADC value)
 8DB1 [05] CD9273    3519       jsr     lininterp         ; Jump to subroutine at linenterp:
 8DB4 [03] B66E      3520       lda     tmp6              ; Load accumulator with value in "tmp6"(Result)
 8DB6 [03] B7EC      3521       sta     fprs              ; Copy to "fprs"(Fuel pressure in PSI)
 8DB8 [04] 81        3522       rts                       ; Return from subroutine
                     3523  
                     3524  ;***********************************************************************************************
                     3525  ; - This subroutine uses "egtADC" to calculate the value of "egtH:egtL"(Exhaust Gas Temperature
                     3526  ;   in degrees F)
                     3527  ;   EGT amplifier 0.0027v @ 0C (32F), 5.022v @ 720C (1328F) Resolution ~5 degrees F
                     3528  ;   egtH:egtL = (((egtADC-0)*(1328-32))/(255-0))+32
                     3529  ;   egtH:egtL = ((egtADC*(1296)/255)+32)
                     3530  ;   egtH:egtL = (egtADC*5.082352941)+32)
                     3531  ;   For integer math:
                     3532  ;   egtH:egtL = (egtADC*50824/10000)+32
                     3533  ;***********************************************************************************************
                     3534  
                     3535  CALC_EGT:
                     3536  
                     3537  ;***********************************************************************************************
                     3538  ; - Load variables and multiply to obtain the dividend("egtADC" x 50824)
                     3539  ;***********************************************************************************************
                     3540  
 8DB9 [03] 3F6C      3541       clr     tmp4       ; Clear tmp4
 8DBB [03] B6BF      3542       lda     egtADC     ; Load accumulator with value in "egtADC"
 8DBD [03] B76B      3543       sta     tmp3       ; Copy to tmp3
 8DBF [02] A6C6      3544       lda     #$C6       ; Load accumulator with decimal 50824 Hi byte(198 x 256 = 50688)
 8DC1 [03] B76A      3545       sta     tmp2       ; Copy to tmp2
 8DC3 [02] A688      3546       lda     #$88       ; Load accumulator with decimal 50824 Lo byte(136)
 8DC5 [03] B769      3547       sta     tmp1       ; Copy to tmp1
 8DC7 [05] CD9364    3548       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3549  
                     3550  ;***********************************************************************************************
                     3551  ; - Load 24 bit dividend ("egtADC" x 50824)
                     3552  ;***********************************************************************************************
                     3553  
 8DCA [03] 3F61      3554       clr     intacc1    ; Clear intacc1
 8DCC [03] B66F      3555       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8DCE [03] B762      3556       sta     intacc1+1  ; Copy to intacc1+1
 8DD0 [03] B66E      3557       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8DD2 [03] B763      3558       sta     intacc1+2  ; Copy to intacc1+2
 8DD4 [03] B66D      3559       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8DD6 [03] B764      3560       sta     intacc1+3  ; Copy to intacc1+3
                     3561  
                     3562  ;***********************************************************************************************
                     3563  ; - Load 16 bit divisor (10,000) and divide
                     3564  ;***********************************************************************************************
                     3565  
 8DD8 [02] A627      3566       lda     #$27       ; Load accumulator with decimal 10,000 Hi byte(39 x 256 = 9984)
 8DDA [03] B765      3567       sta     intacc2    ; Copy to intacc2
 8DDC [02] A610      3568       lda     #$10       ; Load accumulator with decimal 10,000 Lo byte(16)
 8DDE [03] B766      3569       sta     intacc2+1  ; Copy to intacc2+1 variable
 8DE0 [05] CD92C5    3570       jsr     udvd32     ; jump to udvd32 subroutine(intacc1:32 = intacc1:32 / intacc2:16)
                     3571  
                     3572  ;***********************************************************************************************
                     3573  ; - Add 32 to the result
                     3574  ;   #$20 + intacc1+2:intacc1+3 = egtH:egtL
                     3575  ;***********************************************************************************************
                     3576  
                     3577  
 8DE3 [03] B664      3578       lda     intacc1+3  ; Load accumulator with value in "intacc1+3"(result Lo byte)
 8DE5 [02] AB20      3579       add     #$20       ; Add (A)<-)(A)+(M) (decimal 32)
 8DE7 [03] B7EE      3580       sta     egtL       ; copy to "egtL"(exhaust gas temperature Lo byte)
 8DE9 [03] B663      3581       lda     intacc1+2  ; Load accumulator with value in "intacc1+2"(result Hi byte)
 8DEB [02] A900      3582       adc     #$00       ; Add with carry (A)<-(A)+(M)+(C)(just the carry)
 8DED [03] B7ED      3583       sta     egtH       ; copy to "egtH"(exhaust gas temperature Hi byte)
 8DEF [04] 81        3584       rts                ; Return from subroutine
                     3585  
                     3586  ;***********************************************************************************************
                     3587  ; - Duty cycle % integer rounded, "Duty", is calculated by multiplying the pulse width in mmsec
                     3588  ;   by 10000 and dividing the product by the period between injector bank firing events.
                     3589  ;   the time period between Injector bank firing events is determined from the injector firing
                     3590  ;   strategy. MSnS351WM uses 2 squirts alternating which fires a bank every 8 ignition events.
                     3591  ;   The period between injector firing events will then be tachH:tachL x 2. Because tachH:tachL
                     3592  ;   x 8 can become too large for UDV32 pw x 10000 is divided by 2 instead.
                     3593  ;
                     3594  ;   ((pw x 10000) / 8) / tachH:tachL = duty
                     3595  ;   or
                     3596  ;   (pw x 1250) / tachH:tachL = duty
                     3597  ;


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 31
MV351WM


                     3598  ;***********************************************************************************************
                     3599  
                     3600  CALC_DUTY:
                     3601  
                     3602  ;***************************************************************************
                     3603  ; - Load variables and multiply to obtain the dividend
                     3604  ;***************************************************************************
                     3605  
 8DF0 [03] 3F6C      3606       clr     tmp4       ; Clear tmp4
 8DF2 [03] B6CB      3607       lda     pw         ; Load accumulator with value in "pw"
 8DF4 [03] B76B      3608       sta     tmp3       ; Copy to tmp3
 8DF6 [02] A604      3609       lda     #$4        ; Load accumulator with decimal 4 (4 x 256 = 1024)
 8DF8 [03] B76A      3610       sta     tmp2       ; Copy to tmp4
 8DFA [02] A6E2      3611       lda     #$E2       ; Load accumulator with decimal 226 (226 + 1024 = 1250)
 8DFC [03] B769      3612       sta     tmp1       ; Copy to tmp1
 8DFE [05] CD9364    3613       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3614  
                     3615  ;****************************************************************************
                     3616  ; - Load 24 bit dividend (1250 x "pw")
                     3617  ;****************************************************************************
                     3618  
 8E01 [03] 3F61      3619       clr     intacc1    ; Clear intacc1
 8E03 [03] B66F      3620       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8E05 [03] B762      3621       sta     intacc1+1  ; Copy to intacc1+1
 8E07 [03] B66E      3622       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8E09 [03] B763      3623       sta     intacc1+2  ; Copy to intacc1+2
 8E0B [03] B66D      3624       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8E0D [03] B764      3625       sta     intacc1+3  ; Copy to intacc1+3
                     3626  
                     3627  ;****************************************************************************
                     3628  ; - Load 16 bit divisor (tachH:tachL) and divide
                     3629  ;****************************************************************************
                     3630  
 8E0F [03] B6CF      3631       lda     tachH      ; Load accumulator with "tachH"(Pip period) Hi byte
 8E11 [03] B765      3632       sta     intacc2    ; Copy to intacc2
 8E13 [03] B6D0      3633       lda     tachL      ; Load accumulator with "tachL"(Pip period) Lo byte
 8E15 [03] B766      3634       sta     intacc2+1  ; Copy to intacc2+1 variable
 8E17 [05] CD92C5    3635       jsr     udvd32     ; jump to udvd32 subroutine
                     3636                          ; (intacc1:32 = intacc1:32 / intacc2:16)
 8E1A [03] B664      3637       lda     intacc1+3  ; Load accumulator with value in intacc1+3 variable
                     3638                          ; (8-bit result)
 8E1C [03] BE66      3639       ldx     intacc2+1  ; Load index retgister Lo byte with value in intacc2+1
                     3640                          ; (8 bit remainder)
 8E1E [05] CD9351    3641       jsr     DIVROUND   ; Jump to "DIVROUND" subroutine (round result)
                     3642  
                     3643  
                     3644  ;****************************************************************************
                     3645  ; - Save the result as "duty"
                     3646  ;****************************************************************************
                     3647  
 8E21 [03] B7E4      3648       sta     duty       ; Copy to "duty"(DUTY CYCLE%)
 8E23 [04] 81        3649       rts                ; Return from subroutine
                     3650  
                     3651  
                     3652  ;***********************************************************************************************
                     3653  ; - This subroutine uses "rpm20" to calculate engine RPM to 4 digits for display
                     3654  ;***********************************************************************************************
                     3655  
                     3656  CALC_RPM:
 8E24 [03] BEC7      3657       ldx     rpm20        ; Load index register Lo byte with value in engine RPM/20
 8E26 [02] A614      3658       lda     #$14         ; Load accumulator with decimal 20
 8E28 [05] 42        3659       mul                  ; Multiply (X:A)<-(X)x(A)
 8E29 [03] B7F0      3660       sta     rpmL         ; Copy value in accumulator to engine RPM Hi Byte
 8E2B [02] 89        3661       pshx                 ; Push value in index register Lo byte to stack
 8E2C [02] 86        3662       pula                 ; Pull value in stack to accumulator(X to A)
 8E2D [03] B7EF      3663       sta     rpmH         ; Copy to engine RPM Hi byte
 8E2F [04] 81        3664       rts                  ; Return from subroutine
                     3665  
                     3666  ;***********************************************************************************************
                     3667  ; - This subroutine uses "tachH:tachL" to calculate engine RPM to 4 digits for display
                     3668  ;   "tachH:tachL" is the 1uS time period between PIP(IRQ) signals. Rollover occurs at
                     3669  ;   305.18 RPM 6 cyl, and 228.885 RPM 8 cyl so we ignore any engine speeds less than 320 RPM
                     3670  ;   for 6 cyl($140) and 240 RPM for 8 cyl($F0)
                     3671  ;***********************************************************************************************
                     3672  
                     3673  CALC_RPM_HR:
                     3674  
                     3675  ;***********************************************************************************************
                     3676  ;
                     3677  ; -------------------------------------- RPM CALCULATION ---------------------------------------
                     3678  ;
                     3679  ; RPM = CONSTANT/PERIOD
                     3680  ; Where:
                     3681  ; RPM     = Engine RPM
                     3682  ; RPM_K   = 16 bit constant using 1uS clock tick (1mhz)
                     3683  ;           ((1,000,000 tick per second * 60 seconds per minute)/number of cylinders
                     3684  ; RPM_P   = 16 bit period count between IRQ pulsed lines in 1uS resolution
                     3685  ;
                     3686  ;   RPM_K
                     3687  ;   ----- = RPM
                     3688  ;   RPM_P
                     3689  ;
                     3690  
                     3691  ; Where:
                     3692  ; rpmhrH:rpmhrL             = Engine RPM
                     3693  ; rpmK:rpmK+1:rpmK+2:rpmK+3 = 32 bit constant using 1uS clock tick
                     3694  ; tachH:tachL               = 16 bit period count between IRQ pulsed lines in 1uS resolution
                     3695  ;
                     3696  ;   rpmk:rpmk+1:rpmk+2:rpmk+3
                     3697  ;   ------------------------- = rpmhrH:rpmhrL
                     3698  ;       tachH:tachL
                     3699  ;
                     3700  ; 6cyl 4stroke RPMK = ((1,000,000*60)/3) = 20,000,000($01312D00)
                     3701  ; 8cyl 4stroke RPMK = ((1,000,000*60)/4) = 15,000,000($00E4E1C0)
                     3702  ; 6cyl RPM resolution is ~.05@~1000, ~.20@~2000, ~.76@~3000, and ~1.28@~5000
                     3703  ; 8cyl RPM resolution is ~.06@~1000, ~.27@~2000, ~.61@~3000, and ~1.72@~5000
                     3704  ;***********************************************************************************************
                     3705  
 8E30 [03] B6C7      3706       lda     rpm20             ; Load accumulator with value in "rpm20"
 8E32 [02] A110      3707       cmp     #$10              ; Compare with decimal 16(320 RPM)
 8E34 [03] 2406      3708       bhs     RPM_COMP          ; If (A)=>(M) branch to RPM_COMP
 8E36 [03] 3FF2      3709       clr     rpmhrL            ; Clear "rpmhrL"
 8E38 [03] 3FF1      3710       clr     rpmhrH            ; Clear "rpmhrH"
 8E3A [03] 201F      3711       bra     RPM_CALC_DONE     ; Branch to RPM_CALC_DONE:
                     3712  
                     3713  RPM_COMP:
                     3714  
 8E3C [02] A600      3715       lda     #$00          ; Load accumulator with $00 ("rpmK" 8 cyl)
 8E3E [03] B761      3716       sta     intacc1       ; Copy to intacc1 variable
 8E40 [02] A6E4      3717       lda     #$E4          ; Load accumulator with $E4 ("rpmK+1" 8 cyl)
 8E42 [03] B762      3718       sta     intacc1+1     ; Copy to intacc1+1 variable
 8E44 [02] A6E1      3719       lda     #$E1          ; Load accumulator with $E1 ("rpmK+2" 8 cyl)
 8E46 [03] B763      3720       sta     intacc1+2     ; Copy to "intacc1+2
 8E48 [02] A6C0      3721       lda     #$C0          ; Load accumulator with $C0 ("rpmK+3" 8 cyl)
 8E4A [03] B764      3722       sta     intacc1+3     ; Copy to "intacc1+3"
 8E4C [04] 55CF      3723       ldhx    tachH         ; Load index register with value in tachH:tachL
 8E4E [04] 3565      3724       sthx    intacc2       ; Copy value in index register to intacc2 variable
 8E50 [05] CD92C5    3725       jsr     udvd32        ; Jump to subroutine udvd32 (32x16 divide)
 8E53 [03] B664      3726       lda     intacc1+3     ; Load accumulator with value in intacc1+3(result Lo byte)
 8E55 [03] B7F2      3727       sta     rpmhrL        ; Copy to "rpmhrL"
 8E57 [03] B663      3728       lda     intacc1+2     ; Load accumulator with value in intacc1+2(result Mid Lo byte)
 8E59 [03] B7F1      3729       sta     rpmhrH        ; Copy to "rpmhrH"
                     3730  
                     3731  RPM_CALC_DONE:
 8E5B [04] 81        3732       rts                   ; Return from subroutine
                     3733  


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 32
MV351WM


                     3734  
                     3735  ;***********************************************************************************************
                     3736  ; - This subroutine calculates "trmAng"(Ignition Trim Angle). Ignition Trim Angle of 10 degrees
                     3737  ;   (pot mid point) is 0 degrees ignition trim (no change). Ignition Trim Angle of 20 degrees
                     3738  ;   (pot full CW)is 10 degrees ignition trim advance. Ignition Trim Angle of 0 degrees
                     3739  ;   (pot full CCW) is 10 degrees ignition trim retard.
                     3740  ;
                     3741  ;    "trmAngFac" is 57 to 0 from itrmADC 0 to 255, 28 being mid point. "trmAng" can be
                     3742  ;    calculated by inverting "trmAngFac" and interpolating.
                     3743  ;
                     3744  ;***********************************************************************************************
                     3745  
                     3746  ;***********************************************************************************************
                     3747  ; - Linear Interpolation of ADC value:
                     3748  ;   tmp1 = 0 (trmAngFac = 0)
                     3749  ;   tmp2 = 57 (trmAngFac = 57)
                     3750  ;   tmp3 = Lo end of scale (0 degrees)
                     3751  ;   tmp4 = Hi end of scale (20 degrees)
                     3752  ;   tmp5 = inverted "trmAngFac" value
                     3753  ;   tmp6 = Result
                     3754  ;***********************************************************************************************
                     3755  
                     3756  CALC_TRIM_ANG:
 8E5C [04] 6E0069    3757       mov     #$0,tmp1          ; Move decimal 0 to "tmp1"(trmAngFac = 0)
 8E5F [04] 6E396A    3758       mov     #$39,tmp2         ; Move decimal 57 to "tmp2"(trmAngFac = 57)
 8E62 [04] 6E146C    3759       mov     #$14,tmp4         ; Move decimal 20 to "tmp4" (20 degrees)
 8E65 [03] 3F6B      3760       clr     tmp3              ; Clear "tmp3"(0 degrees)
 8E67 [02] A639      3761       lda     #$39              ; Load accumulator with decimal 57
 8E69 [03] B0D2      3762       sub     trmAngFac         ; Subtract A<(A)-(M)(invert "trmAngFac")
 8E6B [03] B76D      3763       sta     tmp5              ; Store result in "tmp5"
 8E6D [05] CD9273    3764       jsr     lininterp         ; Jump to subroutine at linenterp:
 8E70 [03] B66E      3765       lda     tmp6              ; Load accumulator with value in "tmp6"(Result)
 8E72 [03] B7E5      3766       sta     trmAng            ; Copy to "trmAng"(Ignition Trim Angle)
 8E74 [04] 81        3767       rts                       ; Return from subroutine
                     3768  
                     3769  
                     3770  ;***********************************************************************************************
                     3771  ; - This subroutine calculates "dlyAng"(Ignition Delay Angle)
                     3772  ;   dlyAng = dlyAngFac / 255 x 90
                     3773  ;   dlyAng = dlyAngFac * 90 /255 (for integer math)
                     3774  ;***********************************************************************************************
                     3775  
                     3776  CALC_DLY_ANG:
 8E75 [02] A65A      3777       lda     #$5A           ; Load accumulator with decimal 90
 8E77 [01] 97        3778       tax                    ; Transfer value in accumulator to index register Lo byte
 8E78 [03] B6D3      3779       lda     dlyAngFac      ; Load accumulator with value in "dlyAngFac"
 8E7A [05] 42        3780       mul                    ; Multiply X:A<-(X)x(A)
 8E7B [02] 89        3781       pshx                   ; Push value in index register Lo byte to stack
 8E7C [02] 8A        3782       pulh                   ; Pull value from stack to index register Hi byte((X)to(H))
 8E7D [02] AEFF      3783       ldx     #$FF           ; Load index register Lo byte with decimal 255
 8E7F [07] 52        3784       div                    ; Divide A<-(H:A)/(X);H<-Remainder
 8E80 [05] CD9351    3785       jsr     DIVROUND       ; Jump to subroutine at DIVROUND:(round result)
 8E83 [03] B7E6      3786       sta     dlyAng         ; Copy to "dlyAng"(Ignition Delay Angle)
 8E85 [04] 81        3787       rts                    ; Return from subroutine
                     3788  
                     3789  
                     3790  ;***********************************************************************************************
                     3791  ; - This subroutine calculates "timAng"(Ignition Timing Angle)
                     3792  ;   timAng = 90 - dlyAng + 10
                     3793  ;***********************************************************************************************
                     3794  
                     3795  CALC_TIM_ANG:
 8E86 [02] A65A      3796       lda     #$5A       ; Load accumulator with decimal 90
 8E88 [03] B0E6      3797       sub     dlyAng     ; Subtract A<(A)-(M)
 8E8A [02] AB0A      3798       add     #$0A       ; Add A<-(A)+(M) decimal 10
 8E8C [03] B7E7      3799       sta     timAng     ; Copy result to "timAng"(Ignition Timing Angle)
 8E8E [04] 81        3800       rts                ; Return from subroutine
                     3801  
                     3802  ;***********************************************************************************************
                     3803  ;
                     3804  ; ------------------------- Computation of Monitored Ignition Timing ---------------------------
                     3805  ;
                     3806  ; In the Keyboard interrupt section, we grabbed a timestamp when the coil was actually fired.
                     3807  ; From this, we subtracted the timestamp of the PIP signal to determine the Monitor Delay
                     3808  ; Period. (this should be the same as the Delay Period.) We can do the spark calculations
                     3809  ; in reverse to determine the Monitor Delay Angle Factor.
                     3810  ; The formula for determining the Delay Period is:
                     3811  ;
                     3812  ; PIP Period(tachH:tachL) * Delay Angle Factor / PIP Angle Factor = Delay Period.
                     3813  ; So, the Monitor Period * PIP Angle Factor / PIP Period = Monitor Delay Angle Factor.
                     3814  ; The Monitor Delay Angle Factor * PIP Angle  / PIP Angle Factor = Monitor Delay Angle.
                     3815  ; The PIP Angle - Monitor Delay Angle = Monitor Firing Angle
                     3816  ; The Monitor Firing Angle + Static Timing Angle(10 degrees) = Monitored Ignition Timing
                     3817  ; in degrees BTDC.
                     3818  ;
                     3819  ; monpH:monpL * $01:00 / tachH:tachL = monDlyAngFac
                     3820  ; monDlyAngFac * PIP_ANGLE / $01:00 = monDlyAng
                     3821  ; PIP_ANGLE - monDlyAng = monFrngAng
                     3822  ; monFrngAng + STATIC_TIMING_ANGLE = monTimAng
                     3823  ;
                     3824  ;***********************************************************************************************
                     3825  
                     3826  ;***********************************************************************************************
                     3827  ; - Calculate Monitored ignition timing in degrees BTDC.
                     3828  ;***********************************************************************************************
                     3829  
                     3830  CALC_MON_TIM_ANG:
                     3831  
                     3832  ;***********************************************************************************************
                     3833  ; - Check for minimum RPM for ignition periods to be meaningfull for ignition calculations
                     3834  ;***********************************************************************************************
                     3835  
 8E8F [03] B6C7      3836       lda     rpm20             ; Load accumulator with value in "rpm20"
 8E91 [02] A110      3837       cmp     #$10              ; Compare with decimal 16(320 RPM)
 8E93 [03] 2404      3838       bhs     LOAD_PIP_PRD      ; If (A)=>(M) branch to LOAD_PIP_PRD
 8E95 [03] 3FE8      3839       clr     monTimAng         ; Clear "monTimAng"
 8E97 [03] 2030      3840       bra     CALC_MTA_DONE     ; Branch to CALC_MTA_DONE:
                     3841  
                     3842  
                     3843  ;***********************************************************************************************
                     3844  ; - Load 16 bit divisor(PIP Period (tachH:tachL))
                     3845  ;***********************************************************************************************
                     3846  
                     3847  LOAD_PIP_PRD:
 8E99 [03] B6CF      3848       lda     tachH        ; Load accumulator with value in "tachH"(PIP period Hi byte)
 8E9B [03] B765      3849       sta     intacc2      ; Copy to intacc2 variable
 8E9D [03] B6D0      3850       lda     tachL        ; Load accumulator with value in "tachL"(PIP period Lo byte)
 8E9F [03] B766      3851       sta     intacc2+1    ; Copy to intacc2+1 variable
 8EA1 [03] 3F67      3852       clr     intacc2+2    ; Clear intacc2+2 variable
 8EA3 [03] 3F68      3853       clr     intacc2+3    ; Clear intacc2+3 variable
                     3854  
                     3855  ;***********************************************************************************************
                     3856  ; - Load 24 bit dividend(Monitor Period * 256) and divide
                     3857  ;***********************************************************************************************
                     3858  
 8EA5 [03] 3F61      3859       clr     intacc1         ; Clear intacc1 variable
 8EA7 [03] B6D4      3860       lda     monpH           ; Load accumulator with value in "monpH"
 8EA9 [03] B762      3861       sta     intacc1+1       ; Copy  to intacc1+1 variable
 8EAB [03] B6D5      3862       lda     monpL           ; Load accumulator with value in "monpL"
 8EAD [03] B763      3863       sta     intacc1+2       ; Copy to intacc1+2 variable
 8EAF [03] 3F64      3864       clr     intacc1+3       ; Clear intacc1+3 variable(multiply by 256)
 8EB1 [05] CD92C5    3865       jsr     udvd32          ; jump to udvd32 subroutine (intacc1:32 = intacc1:32 / intacc2:16)
 8EB4 [03] B664      3866       lda     intacc1+3       ; Load accumulator with value in intacc1+3 variable
                     3867                               ; (8-bit result)
 8EB6 [03] BE66      3868       ldx     intacc2+1       ; Load index retgister Lo byte with value in intacc2+1
                     3869                               ; (8 bit remainder)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 33
MV351WM


 8EB8 [03] B7F3      3870       sta     monDlyAngFac    ; Copy result to Monitor Delay Angle Factor variable
                     3871  
                     3872  ;***********************************************************************************************
                     3873  ; - Multiply by PIP Angle and divide by 256(8cyl PIP Angle = 90)
                     3874  ;***********************************************************************************************
                     3875  
 8EBA [02] AE5A      3876       ldx     #$5A            ; Load index register Lo byte with "PIP Angle"(decimal 90)
 8EBC [05] 42        3877       mul                     ; Multiply (X:A)<-(X)*(A)
 8EBD [03] BFF4      3878       stx     monDlyAng       ; Copy to Monitor Delay Angle variable
                     3879  
                     3880  ;***********************************************************************************************
                     3881  ; - Calculate "monTimAng"
                     3882  ;***********************************************************************************************
                     3883  
 8EBF [02] A65A      3884       lda     #$5A            ; Load index register Lo byte with "PIP Angle"(decimal 90)
 8EC1 [03] B0F4      3885       sub     monDlyAng       ; Subtract (A<-(A)-(M))
 8EC3 [03] B7F5      3886       sta     monFrngAng      ; Copy to Monitor Firing Angle variable
 8EC5 [02] AB0A      3887       add     #$0A            ; Add (A)<-(A)+(M) Static Timing Angle (always 10 degrees)
 8EC7 [03] B7E8      3888       sta     monTimAng       ; Copy to Measured ignition timing in degrees BTDC variable
                     3889  
                     3890  CALC_MTA_DONE:
 8EC9 [04] 81        3891       rts                     ; Return from subroutine
                     3892  
                     3893  ;***********************************************************************************************
                     3894  ; - This subroutine calculates "ltrHrH:ltrHrL"(Fuel burn in Litres/Hour over a 1 second period
                     3895  ;   x 10) using the variables "fdSecH:fdSecL" which is the accumulated fuel delivery injector
                     3896  ;   pulse width over a 1 second period, and time.
                     3897  ;   Fuel Burn Rate = inj on time per sec * inj bank flow litres per sec * 3600
                     3898  ;   Fuel Burn Rate = (fdSecH:fdSecL) * .000013313 * 3600
                     3899  ;   Fuel Burn Rate = (fdSecH:fdSecL) * .0479268
                     3900  ;   ltrHr = (fdSecH:fdSecL) * .0479268
                     3901  ;   ltrHr = (fdSecH:fdSecL) * 479 / 1000(for integer math)
                     3902  ;
                     3903  ; REVISON!!
                     3904  ;   WitchHunter Performance actual flow data:
                     3905  ;   Bank CC/min = 828.5
                     3906  ;   Average pressure across the injectors (calculated from data logs) = 45PSI
                     3907  ;   Adjusted flow rate Bank CC/min = 842
                     3908  ;   Fuel Burn Rate = inj on time per sec * inj bank flow litres per sec * 3600
                     3909  ;   Fuel Burn Rate = (fdSecH:fdSecL) * .000014033 * 3600
                     3910  ;   Fuel Burn Rate = (fdSecH:fdSecL) * .0505
                     3911  ;   ltrHr = (fdSecH:fdSecL) * .0505
                     3912  ;   ltrHr = (fdSecH:fdSecL) * 505 / 1000(for integer math)
                     3913  ;
                     3914  ; - REVISED 4/13/12: Configurable constants from Megasquirt, BnkflowHmv:BnkflowLmv, are now
                     3915  ;   used instead of hard coded flow rate of 359 to fine tune calculations.
                     3916  ;
                     3917  ;***********************************************************************************************
                     3918  
                     3919  CALC_L_HR:
                     3920  
                     3921  ;***************************************************************************
                     3922  ; - Load variables and multiply to obtain the dividend
                     3923  ;***************************************************************************
                     3924  
 8ECA [03] B6CD      3925       lda     fdSecH     ; Load accumulator with value in "fdSecH"
 8ECC [03] B76C      3926       sta     tmp4       ; Copy to tmp4
 8ECE [03] B6CE      3927       lda     fdSecL     ; Load accumulator with value in "fdSecL"
 8ED0 [03] B76B      3928       sta     tmp3       ; Copy to tmp3
                     3929  ;*     lda     #$01       ; Load accumulator with decimal 505 Hi byte
                     3930  ;*                        ; (1 x 256 = 256)
 8ED2 [03] B6DB      3931       lda     BnkflowHmv ; Load accumulator with bank flow rate Hi byte
 8ED4 [03] B76A      3932       sta     tmp2       ; Copy to tmp4
                     3933  ;*     lda     #$F9       ; Load accumulator with decimal 505 Lo byte
                     3934  ;*                        ; (249)
 8ED6 [03] B6DC      3935       lda     BnkflowLmv ; Load accumulator with bank flow rate Lo byte
 8ED8 [03] B769      3936       sta     tmp1       ; Copy to tmp1
 8EDA [05] CD9364    3937       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3938  
                     3939  ;****************************************************************************
                     3940  ; - Load 32 bit dividend (fdSecH:fdSecL x 355)
                     3941  ;****************************************************************************
                     3942  
 8EDD [03] B670      3943       lda     tmp8       ; Load accumulator with value in tmp8 (result Hi byte)
 8EDF [03] B761      3944       sta     intacc1    ; Copy to intacc1
 8EE1 [03] B66F      3945       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8EE3 [03] B762      3946       sta     intacc1+1  ; Copy to intacc1+1
 8EE5 [03] B66E      3947       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8EE7 [03] B763      3948       sta     intacc1+2  ; Copy to intacc1+2
 8EE9 [03] B66D      3949       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8EEB [03] B764      3950       sta     intacc1+3  ; Copy to intacc1+3
                     3951  
                     3952  ;****************************************************************************
                     3953  ; - Load 16 bit divisor (1000) and divide
                     3954  ;****************************************************************************
                     3955  
 8EED [02] A603      3956       lda     #$03       ; Load accumulator with decimal 1000 Hi byte
                     3957                          ; (3 x 256 = 768)
 8EEF [03] B765      3958       sta     intacc2    ; Copy to intacc2
 8EF1 [02] A6E8      3959       lda     #$E8       ; Load accumulator with decimal 1000 Lo byte
                     3960                          ; (232)
 8EF3 [03] B766      3961       sta     intacc2+1  ; Copy to intacc2+1 variable
 8EF5 [05] CD92C5    3962       jsr     udvd32     ; jump to udvd32 subroutine
                     3963                          ; (intacc1:32 = intacc1:32 / intacc2:16)
                     3964  
                     3965  ;****************************************************************************
                     3966  ; - Save the result as "ltrHrH:ltrHrL"
                     3967  ;****************************************************************************
                     3968  
 8EF8 [03] B664      3969       lda     intacc1+3  ; Load accumulator with value in intacc1+3
                     3970                          ; (quotient Lo byte)
 8EFA [03] B7EA      3971       sta     ltrHrL     ; Copy to "ltrHrH"(Litre/Hr x10 Hi byte)
 8EFC [03] B663      3972       lda     intacc1+2  ; Load accumulator with value in intacc1+2
                     3973                          ; (quotient Mid Lo byte)
 8EFE [03] B7E9      3974       sta     ltrHrH     ; Copy to "ltrHrH"(Litre/Hr x10 Lo byte)
 8F00 [04] 81        3975       rts                ; Return from subroutine
                     3976  
                     3977  
                     3978  ;***********************************************************************************************
                     3979  ; - This subroutine divides a 16 bit variable loaded in "intacc1+2:intacc1+3" by 10 so the
                     3980  ;   result can fit in the 4 digit display. ( uS resolution is now in mmS)
                     3981  ;***********************************************************************************************
                     3982  
                     3983  DIV_BY_TEN:
                     3984  
                     3985  ;****************************************************************************
                     3986  ; - Clear the dividend Hi and Mid Hi bytes
                     3987  ;****************************************************************************
                     3988  
 8F01 [03] 3F61      3989       clr     intacc1     ; Clear intacc1
 8F03 [03] 3F62      3990       clr     intacc1+1   ; Clear intacc1+1
                     3991  
                     3992  ;****************************************************************************
                     3993  ; - Load the 8 bit divisor and divide by 10. The 16 bit quotient remains in
                     3994  ;   "intacc1+2:intacc1+3" for direct use in the "CONV_16BIT_ASCII" subroutine
                     3995  ;****************************************************************************
                     3996  
 8F05 [03] 3F65      3997       clr     intacc2       ; Clear "intacc2"
 8F07 [02] A60A      3998       lda     #$0A          ; Load accumulator with decimal 10
 8F09 [03] B766      3999       sta     intacc2+1     ; Copy to "intacc2+1
 8F0B [05] CD92C5    4000       jsr     udvd32        ; Jump to udv32:
 8F0E [04] 81        4001       rts                   ; Return from subroutine
                     4002  
                     4003  ;****************************************************************************
                     4004  ; - This subroutine takes a byte value in the accumulator, transfers it to
                     4005  ;   the index register Lo byte, and converts it to a 3 variable string,


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 34
MV351WM


                     4006  ;   stored temporarily in variables "AC_100", AC_10", and "AC_1"
                     4007  ;****************************************************************************
                     4008  
                     4009  CONV_8BIT_ASCII:
 8F0F [01] 8C        4010       clrh                      ; Clear index register hi byte
 8F10 [03] B684      4011       lda     disVal            ; Load accumulator with value in "disVal"
 8F12 [01] 97        4012       tax                       ; Transfer value in accumulator to index
                     4013                                 ; register Lo byte(8 bit value)
 8F13 [04] D6F000    4014       lda     ASCII_CONV_100,x  ; Load accumulator with value in
                     4015                                 ; ASCII_CONV_100 table, offset in index
                     4016                                 ; register Lo byte(ASCII 100s value)
 8F16 [03] B7AD      4017       sta     AC_100            ; Copy to "AC_100" variable
 8F18 [04] D6F100    4018       lda     ASCII_CONV_10,x   ; Load accumulator with value in
                     4019                                 ; ASCII_CONV_10 table, offset in index
                     4020                                 ; register Lo byte(ASCII 10s value)
 8F1B [03] B7AE      4021       sta     AC_10             ; Copy to "AC_10" variable
 8F1D [04] D6F200    4022       lda     ASCII_CONV_1,x    ; Load accumulator with value in
                     4023                                 ; ASCII_CONV_1 table, offset in index
                     4024                                 ; register Lo byte(ASCII 1s value)
 8F20 [03] B7AF      4025       sta     AC_1              ; Copy to "AC_1" variable
 8F22 [04] 81        4026       rts                       ; Return from subroutine
                     4027  
                     4028  
                     4029  ;***********************************************************************************************
                     4030  ;  - This subroutine takes a 16 bit value previously stored in "intacc1+2:intacc1+3"
                     4031  ;    and converts it to a 4 variable string, stored temporarily as "thousands", "hundreds",
                     4032  ;    "tens", and "ones"
                     4033  ;***********************************************************************************************
                     4034  
                     4035  CONV_16BIT_ASCII:
                     4036  
 8F23 [03] 3F61      4037       clr     intacc1    ; Clear intacc1
 8F25 [03] 3F62      4038       clr     intacc1+1  ; Clear intacc1+1
                     4039  
                     4040  ;***********************************************************************************************
                     4041  ; - Load 16 bit divisor (decimal 1000) and divide (1000s digit)
                     4042  ;***********************************************************************************************
                     4043  
 8F27 [02] A603      4044       lda     #$3        ; Load accumulator with decimal 1000 Hi byte(3 x 256 = 768)
 8F29 [03] B765      4045       sta     intacc2    ; Copy to intacc2
 8F2B [02] A6E8      4046       lda     #$E8       ; Load accumulator with decimal 1000 Lo byte(232)
 8F2D [03] B766      4047       sta     intacc2+1  ; Copy to intacc2+1 variable
 8F2F [05] CD92C5    4048       jsr     udvd32     ; jump to udvd32 subroutine
                     4049                          ; (intacc1:32 = intacc1:32 / intacc2:16)
                     4050  
                     4051  ;***********************************************************************************************
                     4052  ; - Convert the result to ASCII and save the 1000s digit
                     4053  ;***********************************************************************************************
                     4054  
 8F32 [03] B664      4055       lda     intacc1+3         ; Load accumulator with value in intacc1+3(result  Lo byte)
 8F34 [03] B784      4056       sta     disval            ; Copy to "disVal"
 8F36 [05] CD8F0F    4057       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8F39 [03] B6AF      4058       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8F3B [03] B7B0      4059       sta     thousands         ; Copy to "thousands"
                     4060  
                     4061  ;***********************************************************************************************
                     4062  ; - Load remainder as 16 bit dividend and divide by 100 (100s digit)
                     4063  ;***********************************************************************************************
                     4064  
 8F3D [01] 8C        4065       clrh               ; Clear index register Hi byte
 8F3E [03] B665      4066       lda     intacc2    ; Load accumulator with value in intacc2(remainder Hi byte)
 8F40 [02] 87        4067       psha               ; push value in accumulator onto stack
 8F41 [02] 8A        4068       pulh               ; pull value from stack to index register Hi byte(A to H)
 8F42 [03] B666      4069       lda     intacc2+1  ; Load accumulator with value in intacc2+1(remainder Lo byte)
 8F44 [02] AE64      4070       ldx     #$64       ; Load index register Lo byte with decimal 100
 8F46 [07] 52        4071       div                ; A<-(H:A)/(X):(H)<-Rem
 8F47 [03] B784      4072       sta     disval     ; Copy to "disVal"
                     4073  
                     4074  
                     4075  ;***********************************************************************************************
                     4076  ; - Save remainder for next calculation
                     4077  ;***********************************************************************************************
                     4078  
 8F49 [02] 8B        4079       pshh               ; Push value in index register Hi byte to stack
 8F4A [02] 88        4080       pulx               ; Pull value from stack to index register Lo byte(H to A)
 8F4B [03] BF69      4081       stx     tmp1       ; Copy value in index register Lo byte to tmp1 variable
                     4082  
                     4083  ;***********************************************************************************************
                     4084  ; - Convert the result to ASCII and save the 100s digit
                     4085  ;***********************************************************************************************
                     4086  
 8F4D [05] CD8F0F    4087       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8F50 [03] B6AF      4088       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8F52 [03] B7B1      4089       sta     hundreds          ; Copy to "hundreds"
                     4090  
                     4091  ;***********************************************************************************************
                     4092  ; - Load remainder as 8 bit dividend and divide by 10 (10s digit)
                     4093  ;***********************************************************************************************
                     4094  
 8F54 [01] 8C        4095       clrh               ; clear index register Hi byte
 8F55 [03] B669      4096       lda     tmp1       ; Load accumulator with value in tmp1(remainder)
 8F57 [02] AE0A      4097       ldx     #$A        ; Load index register Lo byte with decimal 10
 8F59 [07] 52        4098       div                ; A<-(H:A)/(X):(H)<-Rem
 8F5A [03] B784      4099       sta     disval     ; Copy to "disVal"
                     4100  
                     4101  ;***********************************************************************************************
                     4102  ; - Save remainder for next calculation
                     4103  ;***********************************************************************************************
                     4104  
 8F5C [02] 8B        4105       pshh               ; Push value in index register Hi byte to stack
 8F5D [02] 88        4106       pulx               ; Pull value from stack to index register Lo byte (H to X)
 8F5E [03] BF69      4107       stx     tmp1       ; Copy value in index register Lo byte to tmp1 variable
                     4108  
                     4109  ;***********************************************************************************************
                     4110  ; - Convert the result to ASCII and save the 10s digit
                     4111  ;***********************************************************************************************
                     4112  
 8F60 [05] CD8F0F    4113       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8F63 [03] B6AF      4114       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8F65 [03] B7B2      4115       sta     tens              ; Copy to "tens"
                     4116  
                     4117  ;***********************************************************************************************
                     4118  ; - Convert the remainder to ASCII and save the 1s digit
                     4119  ;***********************************************************************************************
                     4120  
 8F67 [03] B669      4121       lda     tmp1              ; Load accumulator with value in tmp1(remainder)
 8F69 [03] B784      4122       sta     disval            ; Copy to "disVal"
 8F6B [05] CD8F0F    4123       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8F6E [03] B6AF      4124       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8F70 [03] B7B3      4125       sta     ones              ; Copy to "ones"
 8F72 [04] 81        4126       rts                       ; Return from subroutine
                     4127  
                     4128  
                     4129  ;***********************************************************************************************
                     4130  ; - This subroutine checks the state of the Display Screen next
                     4131  ;   button on PTA0 and updates the switch status flag.
                     4132  ;   The switch status flag is cleared every pass through the main loop after
                     4133  ;   the routine relevent to that flag is completed.
                     4134  ;   Edge detection is provided from both open to closed, and closed to open.
                     4135  ;   Auto-repeat at 2HZ is commanded as long as the contacts remain closed
                     4136  ;   for a period of 1 second or more.
                     4137  ;   Auto-repeat is prevented in the open state.
                     4138  ;***********************************************************************************************
                     4139  
                     4140  SW0_CHK:
 8F73 [03] B640      4141       lda     Sw0DB                      ; Load accumulator with value in Switch


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 35
MV351WM


                     4142                                          ; #0 de-bounce counter variable
 8F75 [03] 2642      4143       bne     SW0_CHK_DONE               ; If Z bit of CCR is clear, branch to
                     4144                                          ; SW0_CHK_DONE: ("Sw0DB" not = 0,
                     4145                                          ; de-bounce in progress, skip over)
 8F77 [05] 00002D    4146       brset   Sw0,porta,SW0_OPN          ; If "Sw0" bit of Port A is set,(Hi)
                     4147                                          ; branch to Sw0_OPN: (contacts are open)
 8F7A [05] 004C08    4148       brset   Sw0LP,LPflags,SW0_ARC_CHK  ; If "Sw0LP" bit of "LPflags"
                     4149                                          ; variable is set, branch to SW0_ARC_CHK:
                     4150                                          ; (contacts closed, bit is already set,
                     4151                                          ; check for auto-repeat command)
 8F7D [04] 6E6440    4152       mov     #$64,Sw0DB                 ; Move decimal 100 into Switch #0
                     4153                                          ; de-bounce counter variable (100mS)
 8F80 [04] 104C      4154       bset    Sw0LP,LPflags              ; Set "Sw0LP" bit of "LPflags" variable
 8F82 [03] CC8FA0    4155       jmp     SW0_CLS                    ; Jump to SW0_CLS:
                     4156  
                     4157  SW0_ARC_CHK:
 8F85 [05] 004D08    4158       brset   Sw0LP,ARCflags,SW0_ARC_PROG  ; If "Sw0LP" bit of "ARCflags"
                     4159                                            ; variable is set, branch to SW0_ARC_PROG:
                     4160                                            ;(auto-repeat command check in progress)
 8F88 [04] 6EC841    4161       mov     #$C8,Sw0ARC                  ; Move decimal 200 into Switch #0
                     4162                                            ; auto-repeat command counter variable(1Sec)
 8F8B [04] 104D      4163       bset    Sw0LP,ARCflags               ; Set "Sw0LP" bit of "ARCflags" variable
 8F8D [03] CC8FB9    4164       jmp     SW0_CHK_DONE                 ; Jump to SW0_CHK_DONE:
                     4165  
                     4166  SW0_ARC_PROG:
 8F90 [03] B641      4167       lda     Sw0ARC                      ; Load accumulator with value in Switch
                     4168                                           ; #0 auto repeat command timer counter
 8F92 [03] 2625      4169       bne     SW0_CHK_DONE                ; If Z bit of CCR is clear, branch to
                     4170                                           ; SW0_CHK_DONE: ("Sw0ARC" not = 0,
                     4171                                           ; auto-repeat command check in progress,
                     4172                                           ; skip over)
 8F94 [05] 004E05    4173       brset   Sw0LP,ARflags,SW0_AR_PROG   ; If "Sw0LP" bit of "ARflags"
                     4174                                           ; variable is set, branch to SW0_AR_PROG:
                     4175                                           ;(auto-repeat check in progress)
 8F97 [04] 6E6442    4176       mov     #$64,Sw0AR                  ; Move decimal 100 into Contact Set #0
                     4177                                           ; auto-repeat counter variable(500mS)
 8F9A [04] 104E      4178       bset    Sw0LP,ARflags               ; Set "Sw0LP" bit of "ARflags" variable
                     4179  
                     4180  SW0_AR_PROG:
 8F9C [03] B642      4181       lda     Sw0AR                       ; Load accumulator with value in Contact
                     4182                                           ; Set #0 auto repeat timer counter var
 8F9E [03] 2619      4183       bne     SW0_CHK_DONE                ; If Z bit of CCR is clear, branch to
                     4184                                           ; SW0_CHK_DONE: ("Sw0DB" not = 0,
                     4185                                           ; auto-repeat check in progress,
                     4186                                           ; skip over)
                     4187  SW0_CLS:
 8FA0 [04] 104F      4188       bset    Sw0cls,Swflags              ; Set "Sw0cls" bit of "Swflags" variable
 8FA2 [04] 114E      4189       bclr    Sw0LP,ARflags               ; Clear "Sw0LP" bit of "ARflags" variable
 8FA4 [03] CC8FB9    4190       jmp     SW0_CHK_DONE                ; Jump to SW0_CHK_DONE:
                     4191  
                     4192  SW0_OPN:
 8FA7 [05] 014C0F    4193       brclr   Sw0LP,LPflags,SW0_CHK_DONE  ; If "Sw0LP" bit of "LPflags"
                     4194                                           ; variable is clear, branch to SW0_CHK_DONE:
                     4195                                           ; (contact set open, and bit is already
                     4196                                           ; clear, so skip over)
 8FAA [04] 6E6440    4197       mov     #$64,Sw0DB                  ; Move decimal 100 into Contact Set #0
                     4198                                           ; de-bounce counter variable (100mS)
 8FAD [04] 114C      4199       bclr    Sw0LP,LPflags               ; Clear "Sw0LP" bit of "LPflags" variable
 8FAF [03] 3F42      4200       clr     Sw0AR                       ; Clear Sw0 auto-repeat timer counter
 8FB1 [04] 114E      4201       bclr    Sw0LP,ARflags               ; Clear "Sw0LP" bit of "ARflags" variable
 8FB3 [03] 3F41      4202       clr     Sw0ARC                      ; Clear "Sw0" auto-repeat command timer counter
 8FB5 [04] 114D      4203       bclr    Sw0LP,ARCflags              ; Clear "Sw0LP" bit of "ARCflags" variable
 8FB7 [04] 114F      4204       bclr    Sw0cls,Swflags              ; Clear "Sw0cls" bit of "Swflags" variable
                     4205  
                     4206  SW0_CHK_DONE:
 8FB9 [04] 81        4207       rts                                 ; Return from subroutine
                     4208  
                     4209  
                     4210  ;****************************************************************************
                     4211  ; - This subroutine checks the state of the Display Screen previous
                     4212  ;   button on PTA1 and updates the switch status flag.
                     4213  ;   The switch status flag is cleared every pass through the main loop after
                     4214  ;   the routine relevent to that flag is completed.
                     4215  ;   Edge detection is provided from both open to closed, and closed to open.
                     4216  ;   Auto-repeat at 2HZ is commanded as long as the contacts remain closed
                     4217  ;   for a period of 1 second or more.
                     4218  ;   Auto-repeat is prevented in the open state.
                     4219  ;****************************************************************************
                     4220  
                     4221  SW1_CHK:
 8FBA [03] B643      4222       lda     Sw1DB                ; Load accumulator with value in Switch
                     4223                                    ; #1 de-bounce counter variable
 8FBC [03] 2642      4224       bne     SW1_CHK_DONE         ; If Z bit of CCR is clear, branch to
                     4225                                    ; SW1_CHK_DONE: ("Sw0DB" not = 0,
                     4226                                    ; de-bounce in progress, skip over)
 8FBE [05] 02002D    4227       brset   Sw1,porta,SW1_OPN    ; If "Sw1" bit of Port A is set,(Hi)
                     4228                                    ; branch to Sw1_OPN: (contacts are open)
 8FC1 [05] 024C08    4229       brset   Sw1LP,LPflags,SW1_ARC_CHK  ; If "Sw1LP" bit of "LPflags"
                     4230                               ; variable is set, branch to SW1_ARC_CHK:
                     4231                               ; (contacts closed, bit is already set,
                     4232                               ; check for auto-repeat command)
 8FC4 [04] 6E6443    4233       mov     #$64,Sw1DB      ; Move decimal 100 into Switch #1
                     4234                               ; de-bounce counter variable (100mS)
 8FC7 [04] 124C      4235       bset    Sw1LP,LPflags   ; Set "Sw1LP" bit of "LPflags" variable
 8FC9 [03] CC8FE7    4236       jmp     SW1_CLS         ; Jump to SW1_CLS:
                     4237  
                     4238  SW1_ARC_CHK:
 8FCC [05] 024D08    4239       brset   Sw1LP,ARCflags,SW1_ARC_PROG  ; If "Sw1LP" bit of "ARCflags"
                     4240                               ; variable is set, branch to SW1_ARC_PROG:
                     4241                               ;(auto-repeat command check in progress)
 8FCF [04] 6EC844    4242       mov     #$C8,Sw1ARC     ; Move decimal 200 into Switch #1
                     4243                               ; auto-repeat command counter variable(1Sec)
 8FD2 [04] 124D      4244       bset    Sw1LP,ARCflags  ; Set "Sw1LP" bit of "ARCflags" variable
 8FD4 [03] CC9000    4245       jmp     SW1_CHK_DONE    ; Jump to SW1_CHK_DONE:
                     4246  
                     4247  SW1_ARC_PROG:
 8FD7 [03] B644      4248       lda     Sw1ARC              ; Load accumulator with value in Switch
                     4249                                   ; #0 auto repeat command timer counter
 8FD9 [03] 2625      4250       bne     SW1_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     4251                                   ; SW1_CHK_DONE: ("Sw1ARC" not = 0,
                     4252                                   ; auto-repeat command check in progress,
                     4253                                   ; skip over)
 8FDB [05] 024E05    4254       brset   Sw1LP,ARflags,SW1_AR_PROG   ; If "Sw1LP" bit of "ARflags"
                     4255                                   ; variable is set, branch to SW1_AR_PROG:
                     4256                                   ;(auto-repeat check in progress)
 8FDE [04] 6E6445    4257       mov     #$64,Sw1AR          ; Move decimal 100 into Contact Set #1
                     4258                                   ; auto-repeat counter variable(500mS)
 8FE1 [04] 124E      4259       bset    Sw1LP,ARflags       ; Set "Sw1LP" bit of "ARflags" variable
                     4260  
                     4261  SW1_AR_PROG:
 8FE3 [03] B645      4262       lda     Sw1AR               ; Load accumulator with value in Contact
                     4263                                   ; Set #1 auto repeat timer counter var
 8FE5 [03] 2619      4264       bne     SW1_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     4265                                   ; SW1_CHK_DONE: ("Sw1DB" not = 0,
                     4266                                   ; auto-repeat check in progress,
                     4267                                   ; skip over)
                     4268  SW1_CLS:
 8FE7 [04] 124F      4269       bset    Sw1cls,Swflags      ; Set "Sw1cls" bit of "Swflags" variable
 8FE9 [04] 134E      4270       bclr    Sw1LP,ARflags       ; Clear "Sw1LP" bit of "ARflags" variable
 8FEB [03] CC9000    4271       jmp     SW1_CHK_DONE        ; Jump to SW1_CHK_DONE:
                     4272  
                     4273  SW1_OPN:
 8FEE [05] 034C0F    4274       brclr   Sw1LP,LPflags,SW1_CHK_DONE  ; If "Sw1LP" bit of "LPflags"
                     4275                                ; variable is clear, branch to SW1_CHK_DONE:
                     4276                                ; (contact set open, and bit is already
                     4277                                ; clear, so skip over)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 36
MV351WM


 8FF1 [04] 6E6443    4278       mov     #$64,Sw1DB       ; Move decimal 100 into Contact Set #1
                     4279                                ; de-bounce counter variable (100mS)
 8FF4 [04] 134C      4280       bclr    Sw1LP,LPflags    ; Clear "Sw1LP" bit of "LPflags" variable
 8FF6 [03] 3F45      4281       clr     Sw1AR            ; Clear "Sw1" auto-repeat timer counter
 8FF8 [04] 134E      4282       bclr    Sw1LP,ARflags    ; Clear "Sw1LP" bit of "ARflags" variable
 8FFA [03] 3F44      4283       clr     Sw1ARC           ; Clear "Sw1" auto-repeat command timer counter
 8FFC [04] 134D      4284       bclr    Sw1LP,ARCflags   ; Clear "Sw1LP" bit of "ARCflags" variable
 8FFE [04] 134F      4285       bclr    Sw1cls,Swflags   ; Clear "Sw1cls" bit of "Swflags" variable
                     4286  
                     4287  SW1_CHK_DONE:
 9000 [04] 81        4288       rts                      ; Return from subroutine
                     4289  
                     4290  
                     4291  ;***************************************************************************
                     4292  ; - This subroutine is a ~300mS delay used at start up for power
                     4293  ;   stabilization and between transmit bytes for downloading VE and ST
                     4294  ;   constants.
                     4295  ;***************************************************************************
                     4296  
                     4297  DELAY300:
 9001 [03] 3F69      4298       clr     tmp1     ; Clear tmp1 variable
                     4299  
                     4300  WAIT_1:
 9003 [03] 3F6A      4301       clr     tmp2     ; Clear tmp2 variable
                     4302  
                     4303  WAIT_2:
 9005 [03] 3F6B      4304       clr     tmp3     ; Clear tmp3 variable
                     4305  
                     4306  WAIT_3:
 9007 [03] B66B      4307       lda     tmp3     ; Load accumulator with value in tmp3
 9009 [01] 4C        4308       inca             ; Increment value in accumulator
 900A [03] B76B      4309       sta     tmp3     ; Copy to tmp3
 900C [02] A1C8      4310       cmp     #$C8     ; Compare value in accumulator with decimal 200
 900E [03] 25F7      4311       blo     WAIT_3   ; If C bit of CCR is set, (A<M), branch to WAIT_3:
 9010 [03] B66A      4312       lda     tmp2     ; Load accumulator with value in tmp2
 9012 [01] 4C        4313       inca             ; Increment value in accumulator
 9013 [03] B76A      4314       sta     tmp2     ; Copy to tmp2
 9015 [02] A1C8      4315       cmp     #$C8     ; Compare value in accumulator with decimal 200
 9017 [03] 25EC      4316       blo     WAIT_2   ; If C bit of CCR is set, (A<M), branch to WAIT_2:
 9019 [03] B669      4317       lda     tmp1     ; Load accumulator with value in tmp1
 901B [01] 4C        4318       inca             ; Increment value in accumulator
 901C [03] B769      4319       sta     tmp1     ; Copy to tmp1
 901E [02] A105      4320       cmp     #$05     ; Compare value in accumulator with decimal 5
 9020 [03] 25E1      4321       blo     WAIT_1   ; If C bit of CCR is set, (A<M), branch to WAIT_1:
 9022 [04] 81        4322       rts              ; Return from subroutine
                     4323  
                     4324  
                     4325  ;****************************************************************************
                     4326  ; - This subroutine prints the top line of the VFD while in "Display" mode
                     4327  ;****************************************************************************
                     4328  
                     4329  PRNT_TOPLN_DSP:
                     4330  
                     4331  ;****************************************************************************
                     4332  ; - Set up the VFD to place the first character in the top line, extreme
                     4333  ;   left hand position
                     4334  ;****************************************************************************
                     4335  
 9023 [05] CD90AB    4336       jsr     VFD_START_TOP     ; Jump to subroutine at VFD_START_TOP:
                     4337  
                     4338  ;***************************************************************************
                     4339  ; - Using the Variables Top Line Table Index vector table, and the "ScrnCnt"
                     4340  ;   offset value, load H:X with the address of the desired Variables Top
                     4341  ;   Line Table.
                     4342  ;***************************************************************************
                     4343  
 9026 [03] 45E17C    4344       ldhx    #VARS_TL_TB_IND    ; Load index register with the address of
                     4345                                  ; the first value in the Variables Top Line
                     4346                                  ; Table Index vector table
 9029 [03] B654      4347       lda     ScrnCnt            ; Load accumulator with the value in "ScrnCnt"
 902B [05] CD9074    4348       jsr     GET_VECT_ADDR      ; Jump to subroutine at GET_VECT_ADDR:
                     4349  
                     4350  ;***************************************************************************
                     4351  ; - Print the top line of the VFD display
                     4352  ;***************************************************************************
                     4353  
 902E [05] CD905D    4354       jsr     PRINT_LINE         ; Jump to subroutine at PRINT_LINE:
 9031 [04] 81        4355       rts                        ; Return from subroutine
                     4356  
                     4357  
                     4358  ;***************************************************************************
                     4359  ; - This subroutine initializes bottom line of the VFD with blank spaces
                     4360  ;***************************************************************************
                     4361  
                     4362  LOAD_SPACE:
 9032 [02] A620      4363       lda     #$20         ; Load accumulator with ASCII ' '(space)
 9034 [03] B785      4364       sta     BotLin0      ; Copy to "BotLin0" variable
 9036 [03] B786      4365       sta     BotLin1      ; Copy to "BotLin0" variable
 9038 [03] B787      4366       sta     BotLin2      ; Copy to "BotLin0" variable
 903A [03] B788      4367       sta     BotLin3      ; Copy to "BotLin0" variable
 903C [03] B789      4368       sta     BotLin4      ; Copy to "BotLin0" variable
 903E [03] B78A      4369       sta     BotLin5      ; Copy to "BotLin0" variable
 9040 [03] B78B      4370       sta     BotLin6      ; Copy to "BotLin0" variable
 9042 [03] B78C      4371       sta     BotLin7      ; Copy to "BotLin0" variable
 9044 [03] B78D      4372       sta     BotLin8      ; Copy to "BotLin0" variable
 9046 [03] B78E      4373       sta     BotLin9      ; Copy to "BotLin0" variable
 9048 [03] B78F      4374       sta     BotLin10     ; Copy to "BotLin0" variable
 904A [03] B790      4375       sta     BotLin11     ; Copy to "BotLin0" variable
 904C [03] B791      4376       sta     BotLin12     ; Copy to "BotLin0" variable
 904E [03] B792      4377       sta     BotLin13     ; Copy to "BotLin0" variable
 9050 [03] B793      4378       sta     BotLin14     ; Copy to "BotLin0" variable
 9052 [03] B794      4379       sta     BotLin15     ; Copy to "BotLin0" variable
 9054 [03] B795      4380       sta     BotLin16     ; Copy to "BotLin0" variable
 9056 [03] B796      4381       sta     BotLin17     ; Copy to "BotLin0" variable
 9058 [03] B797      4382       sta     BotLin18     ; Copy to "BotLin0" variable
 905A [03] B798      4383       sta     BotLin19     ; Copy to "BotLin0" variable
 905C [04] 81        4384       rts                  ; Return from subroutine
                     4385  
                     4386  
                     4387  ;***************************************************************************
                     4388  ; - This subroutine takes the address of the desired Line Table loaded
                     4389  ;   in H:X. Using the value in "ColNum" offset value, load the "value"
                     4390  ;   variable with the contents of the appropriate ASCCI value in the table
                     4391  ;   and display them on the top line of the VFD.
                     4392  ;***************************************************************************
                     4393  
                     4394  PRINT_LINE:
 905D [03] 3F80      4395       clr     ColNum            ; Clear "ColNum" variable
                     4396                                 ;(ColNum = 0 = 1st column on left)
 905F [03] B680      4397       lda     ColNum            ; Load accumulator with value in "ColNum"
                     4398  
                     4399  NEXT_CHAR:
 9061 [05] CD9098    4400       jsr     LDA_W_HX_PL_A     ; Jump to subroutine at LDA_W_HX_PL_A:
 9064 [03] B77E      4401       sta     value             ; Copy to "value" variable
 9066 [05] CD90E7    4402       jsr     VFD_SEND          ; Jump to subroutine at VFD_SEND:
 9069 [04] 3C80      4403       inc     ColNum            ; Increment "ColNum" (ColNum=ColNum+1)
 906B [03] B680      4404       lda     ColNum            ; Load accumulator with value in "ColNum"
 906D [02] A114      4405       cmp     #$14              ; Compare (A) with decimal 20
 906F [03] 2702      4406       beq     CHARS_DONE        ; If Z bit of CCR is set, branch to
                     4407                                 ; CHARS_DONE:
                     4408                                 ;(finished sending all display characters)
 9071 [03] 20EE      4409       bra     NEXT_CHAR         ; Branch to NEXT_CHAR:
                     4410  
                     4411  CHARS_DONE:
 9073 [04] 81        4412       rts                       ; Return from subroutine
                     4413  


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 37
MV351WM


                     4414  
                     4415  ;***************************************************************************
                     4416  ; - This subroutine loads H:X with the desired vectored address found in a
                     4417  ;   vector address table. (H:X) originally holds the address of beginning of
                     4418  ;   the vector address table. (A) holds the offset value to the desired
                     4419  ;   vector address.
                     4420  ;   The accumulator has to be multiplied by 2 before addition to the index
                     4421  ;   register H:X, since each entry in the vector table is of 2 byte length.
                     4422  ;   Since the indexed addressing mode for LDHX is missing, we cannot load
                     4423  ;   H:X with the content of memory that H:X is pointing to. To do so, we
                     4424  ;   load (A) with the Hi byte of the vector address, using indexed
                     4425  ;   addressing with zero offset, and load (X) with the Lo byte of the vector
                     4426  ;   address, again, using indexed addressing, but, with an offset of 1.
                     4427  ;   After copying (A) to (H) via push/pull operations, (H:X) contains the
                     4428  ;   vector address.
                     4429  ;   NOTE! After the final "pulh" instruction, a "jmp ,x" will jump the
                     4430  ;   program to the desired vector address.
                     4431  ;***************************************************************************
                     4432  
                     4433  GET_VECT_ADDR:
 9074 [01] 48        4434       lsla             ; Logical shift left accumulator(multiply by 2)
 9075 [02] 89        4435       pshx             ; Push value in index register Lo byte to stack
 9076 [02] 8B        4436       pshh             ; Push value in index register Hi byte to stack
 9077 [04] 9EEB02    4437       add     2,SP     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location
                     4438                        ; on stack, and SP=A, so (A=X+A)
 907A [01] 97        4439       tax              ; Transfer value in accumulator to index register Lo
                     4440                        ; byte(Copy result in to index register Lo byte)
 907B [02] 86        4441       pula             ; Pull value from stack to accumulator((H)->(A))
 907C [02] A900      4442       adc     #$00     ; Add with carry ((A)<-(A)+(M)+(C))
                     4443                        ;(This just adds the carry, if applicable)
 907E [02] 87        4444       psha             ; Push value in accumulator to stack
                     4445                        ;(modified (H) -> stack)
 907F [02] 8A        4446       pulh             ; Pull value from stack to index register Hi byte
                     4447                        ;(modified (H)->(H)
 9080 [02] 86        4448       pula             ; Pull value from stack to accumulator
                     4449                        ;(clean up stack)
 9081 [02] F6        4450       lda     ,x       ; Load accumulator with value in index register Lo
                     4451                        ;(vector Hi byte)
 9082 [03] EE01      4452       ldx     1,x      ; Load index register Lo byte with value in 1st
                     4453                        ; location on stack(vector Lo byte)
 9084 [02] 87        4454       psha             ; Push value in accumulator to stack
 9085 [02] 8A        4455       pulh             ; Pull value from stack to accumulator((A)->(H)
                     4456                        ;((H:X) now contains the desired vector address)
 9086 [04] 81        4457       rts              ; Return from subroutine
                     4458  
                     4459  
                     4460  ;***************************************************************************
                     4461  ; - This subroutine does an effective address calculation, adding the
                     4462  ;   unsigned 8 bit value in the accumulator, to the index register (H:X).
                     4463  ;   Since there is no instruction available which can add the contents of
                     4464  ;   A to H:X, the contents of H:X must first be saved to memory(stack), to
                     4465  ;   allow a memory to register addition operation. H:X is modified.
                     4466  ;   (A) contains the value of the offset from address at (H:X)
                     4467  ;***************************************************************************
                     4468  
                     4469  ADD_A_TO_HX:
 9087 [02] 89        4470       pshx            ; Push value in index register Lo byte to stack
 9088 [02] 8B        4471       pshh            ; Push value in index register Hi byte to stack
 9089 [02] 87        4472       psha            ; push value in accumulator to stack
 908A [02] 95        4473       tsx             ; Transfer value in stack to index register Lo byte
                     4474                       ;((A)->(X))
 908B [03] EB02      4475       add     2,x     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location on
                     4476                       ; stack, and x=A, so (A=X+A)
 908D [03] E702      4477       sta     2,x     ; Copy result to 2nd location on stack
 908F [01] 4F        4478       clra            ; Clear accumulator(A=0)
 9090 [03] E901      4479       adc     1,x     ; Add with carry ((A)<-(A)+(M)+(C)) In this case
                     4480                       ; 1=1st location on stack, and x=A=0, so (A=H+C+A)
 9092 [03] E701      4481       sta     1,x     ; Copy result to 1st location on stack
 9094 [02] 86        4482       pula            ; Pull value from stack to accumulator
 9095 [02] 8A        4483       pulh            ; Pull value from stack to index register Hi byte
 9096 [02] 88        4484       pulx            ; Pull value from stack to index register Lo byte
                     4485                       ;(H:X) now contains ((H:X+(A))
 9097 [04] 81        4486       rts             ; return from subroutine
                     4487  
                     4488  
                     4489  ;***************************************************************************
                     4490  ; - This subroutine loads into A, the contents of a location pointed to by
                     4491  ;   H:X plus A. H:X is preserved. This operation emulates a "lda A,X"
                     4492  ;   instruction, so called "accumulator-offset indexed addressing mode",
                     4493  ;   which is not available on the HC08 family instruction set.
                     4494  ;   (A) contains the value of the offset from address at (H:X)
                     4495  ;***************************************************************************
                     4496  
                     4497  LDA_W_HX_PL_A:
 9098 [02] 89        4498       pshx             ; Push value in index register Lo byte to stack
 9099 [02] 8B        4499       pshh             ; Push value in index register Hi byte to stack
                     4500                        ;(These 2 instructions save the original (H:X))
 909A [02] 89        4501       pshx             ; Push value in index register Lo byte to stack
 909B [02] 8B        4502       pshh             ; Push value in index register Hi byte to stack
                     4503                        ;(These 2 instructions are for the working H:X
 909C [04] 9EEB02    4504       add     2,SP     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location
                     4505                        ; on stack, and SP=A, so (A=X+A)
 909F [01] 97        4506       tax              ; Transfer value in accumulator to index register Lo
                     4507                        ; byte(Copy result in to index register Lo byte)
 90A0 [02] 86        4508       pula             ; Pull value from stack to accumulator((H)->(A))
 90A1 [02] A900      4509       adc     #$00     ; Add with carry ((A)<-(A)+(M)+(C))
                     4510                        ;(This just adds the carry, if applicable)
 90A3 [02] 87        4511       psha             ; Push value in accumulator to stack
                     4512                        ;(modified (H) to stack)
 90A4 [02] 8A        4513       pulh             ; Pull value from stack to index register Hi byte
                     4514                        ;(modified (H) to (H)
 90A5 [02] A701      4515       ais     #$01     ; Add immediate value of 1 to SP register
                     4516                        ;(clean up stack)
 90A7 [02] F6        4517       lda     ,x       ; Load accumulator with value in index register Lo
                     4518                        ; byte
                     4519                        ;(A now contains the value in the location at H:X+A)
 90A8 [02] 8A        4520       pulh             ; Pull value from stack to index register Hi byte
 90A9 [02] 88        4521       pulx             ; Pull value from stack to index register Lo byte
                     4522                        ;(these 2 instructions restore (H:X))
 90AA [04] 81        4523       rts              ; return from subroutine
                     4524  
                     4525  ;***************************************************************************
                     4526  ; - This subroutine sends an instruction byte to position the cursor in the
                     4527  ;   top left corner of the display.
                     4528  ;***************************************************************************
                     4529  
                     4530  VFD_START_TOP:
                     4531  
                     4532  ;***************************************************************************
                     4533  ; - Set up to send an instruction  byte.
                     4534  ;***************************************************************************
                     4535  
 90AB [04] 1901      4536       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B(PTB4)
 90AD [04] 1B01      4537       bclr    Rd_Wrt,PORTB     ; Clear "Rd_Wrt" bit of Port B(PTB5)
                     4538                                ;(Write Operation)
 90AF [04] 1D01      4539       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of Port B(PTB6)
                     4540                                ;(Send an instruction value)
                     4541  
                     4542  
                     4543  ;***************************************************************************
                     4544  ; - Set cursor top left Hi nibble
                     4545  ;***************************************************************************
                     4546  
 90B1 [04] 6E0802    4547       mov     #$08,PORTC       ; Move %00001000 into PortC
                     4548                                ;(Set bit4=DB7)
 90B4 [04] 1801      4549       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 38
MV351WM


 90B6 [05] CD916F    4550       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 90B9 [04] 1901      4551       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4552  
                     4553  ;***************************************************************************
                     4554  ; - Set cursor top left Lo nibble
                     4555  ;***************************************************************************
                     4556  
 90BB [04] 6E0002    4557       mov     #$00,PORTC       ; Move %00000000 into PortC
 90BE [04] 1801      4558       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 90C0 [05] CD9163    4559       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 90C3 [04] 1901      4560       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 90C5 [05] CD916F    4561       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 90C8 [04] 81        4562       rts                      ; Return from subroutine
                     4563  
                     4564  
                     4565  ;***************************************************************************
                     4566  ; - This subroutine sends an instruction byte to position the cursor in the
                     4567  ;   bottom left corner of the display.
                     4568  ;***************************************************************************
                     4569  
                     4570  VFD_START_BOT:
                     4571  
                     4572  ;***************************************************************************
                     4573  ; - Set up to send an instruction  byte.
                     4574  ;***************************************************************************
                     4575  
 90C9 [04] 1901      4576       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B(PTB4)
 90CB [04] 1B01      4577       bclr    Rd_Wrt,PORTB     ; Clear "Rd_Wrt" bit of Port B(PTB5)
                     4578                                ;(Write Operation)
 90CD [04] 1D01      4579       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of Port B(PTB6)
                     4580                                ;(Send an instruction value)
                     4581  
                     4582  
                     4583  ;***************************************************************************
                     4584  ; - Set cursor bottom left Hi nibble
                     4585  ;***************************************************************************
                     4586  
 90CF [04] 6E0C02    4587       mov     #$0C,PORTC       ; Move %00001100 into PortC
                     4588                                ;(Set bit4=DB7 and bit3=DB6)
 90D2 [04] 1801      4589       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 90D4 [05] CD916F    4590       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 90D7 [04] 1901      4591       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4592  
                     4593  ;***************************************************************************
                     4594  ; - Set cursor bottom left Lo nibble
                     4595  ;***************************************************************************
                     4596  
 90D9 [04] 6E0002    4597       mov     #$00,PORTC       ; Move %00000000 into PortC
 90DC [04] 1801      4598       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 90DE [05] CD9163    4599       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 90E1 [04] 1901      4600       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 90E3 [05] CD916F    4601       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 90E6 [04] 81        4602       rts                      ; Return from subroutine
                     4603  
                     4604  
                     4605  ;***************************************************************************
                     4606  ; - This subroutine takes a single ASCII value, held in "value" variable
                     4607  ;   and sets the appropriate bits of Port C. Interface with the VFD display
                     4608  ;   is 4 bit, so, to send an 8 bit value, bits 4,5,6 and 7 are sent first,
                     4609  ;   then the bits 0,1,2 and 3 are sent.
                     4610  ;***************************************************************************
                     4611  
                     4612  VFD_SEND:
                     4613  
                     4614  ;***************************************************************************
                     4615  ; - Data Bit 4 (PTC0)
                     4616  ;***************************************************************************
                     4617  
                     4618  CHK_DB4:
 90E7 [03] B67E      4619       lda     value       ; Load accumulator with value in "value" variable
 90E9 [02] A510      4620       bit     #DB4m       ; Logical AND (A)&(M)%00010000
 90EB [03] 2604      4621       bne     SET_DB4     ; If Z bit of CCR is clear, branch to SET_DB4:
 90ED [04] 1102      4622       bclr    DB4,PORTC   ; Clear "DB4" bit of Port C(bit0)
 90EF [03] 2002      4623       bra     CHK_DB5     ; Branch to CHK_DB5
                     4624  
                     4625  SET_DB4:
 90F1 [04] 1002      4626       bset    DB4,PORTC   ; Set "DB4" bit of Port C(bit0)
                     4627  
                     4628  ;***************************************************************************
                     4629  ; - Data Bit 5 (PTC1)
                     4630  ;***************************************************************************
                     4631  
                     4632  CHK_DB5:
 90F3 [03] B67E      4633       lda     value       ; Load accumulator with value in "value" variable
 90F5 [02] A520      4634       bit     #DB5m       ; Logical AND (A)&(M)%00100000
 90F7 [03] 2604      4635       bne     SET_DB5     ; If Z bit of CCR is clear, branch to SET_DB5:
 90F9 [04] 1302      4636       bclr    DB5,PORTC   ; Clear "DB5" bit of Port C(bit1)
 90FB [03] 2002      4637       bra     CHK_DB6     ; Branch to CHK_DB6
                     4638  
                     4639  SET_DB5:
 90FD [04] 1202      4640       bset    DB5,PORTC   ; Set "DB5" bit of Port C(bit1)
                     4641  
                     4642  ;***************************************************************************
                     4643  ; - Data Bit 6 (PTC2)
                     4644  ;***************************************************************************
                     4645  
                     4646  CHK_DB6:
 90FF [03] B67E      4647       lda     value       ; Load accumulator with value in "value" variable
 9101 [02] A540      4648       bit     #DB6m       ; Logical AND (A)&(M)%01000000
 9103 [03] 2604      4649       bne     SET_DB6     ; If Z bit of CCR is clear, branch to SET_DB6:
 9105 [04] 1502      4650       bclr    DB6,PORTC   ; Clear "DB6" bit of Port C(bit2)
 9107 [03] 2002      4651       bra     CHK_DB7     ; Branch to CHK_DB7
                     4652  
                     4653  SET_DB6:
 9109 [04] 1402      4654       bset    DB6,PORTC   ; Set "DB6" bit of Port C(bit2)
                     4655  
                     4656  ;***************************************************************************
                     4657  ; - Data Bit 7 (PTC3)
                     4658  ;***************************************************************************
                     4659  
                     4660  CHK_DB7:
 910B [03] B67E      4661       lda     value       ; Load accumulator with value in "value" variable
 910D [02] A580      4662       bit     #DB7m       ; Logical AND (A)&(M)%10000000
 910F [03] 2604      4663       bne     SET_DB7     ; If Z bit of CCR is clear, branch to SET_DB7:
 9111 [04] 1702      4664       bclr    DB7,PORTC   ; Clear "DB7" bit of Port C(bit3)
 9113 [03] 2002      4665       bra     HI_NIB      ; Branch to HI_NIB:
                     4666  
                     4667  SET_DB7:
 9115 [04] 1602      4668       bset    DB7,PORTC   ; Set "DB7" bit of Port C(bit3)
                     4669  
                     4670  ;***************************************************************************
                     4671  ; - Send the Hi nibble
                     4672  ;***************************************************************************
                     4673  
                     4674  HI_NIB:
 9117 [04] 1C01      4675       bset    Reg_Sel,PORTB    ; Set "Reg_Sel" bit of PortB(RS=1)
 9119 [05] CD916F    4676       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 911C [04] 1801      4677       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 911E [05] CD916F    4678       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     4679  
                     4680  ;***************************************************************************
                     4681  ; - Clear Enable line to set up Lo nibble
                     4682  ;***************************************************************************
                     4683  
 9121 [04] 1901      4684       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4685  


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 39
MV351WM


                     4686  ;***************************************************************************
                     4687  ; - Data Bit 0 (PTC0)
                     4688  ;***************************************************************************
                     4689  
                     4690  CHK_DB0:
 9123 [03] B67E      4691       lda     value       ; Load accumulator with value in "value" variable
 9125 [02] A501      4692       bit     #DB0m       ; Logical AND (A)&(M)%00000001
 9127 [03] 2604      4693       bne     SET_DB0     ; If Z bit of CCR is clear, branch to SET_DB0:
 9129 [04] 1102      4694       bclr    DB0,PORTC   ; Clear "DB0" bit of Port C(bit0)
 912B [03] 2002      4695       bra     CHK_DB1     ; Branch to CHK_DB1
                     4696  
                     4697  SET_DB0:
 912D [04] 1002      4698       bset    DB0,PORTC   ; Set "DB0" bit of Port C(bit0)
                     4699  
                     4700  ;***************************************************************************
                     4701  ; - Data Bit 1 (PTC1)
                     4702  ;***************************************************************************
                     4703  
                     4704  CHK_DB1:
 912F [03] B67E      4705       lda     value       ; Load accumulator with value in "value" variable
 9131 [02] A502      4706       bit     #DB1m       ; Logical AND (A)&(M)%00000010
 9133 [03] 2604      4707       bne     SET_DB1     ; If Z bit of CCR is clear, branch to SET_DB1:
 9135 [04] 1302      4708       bclr    DB1,PORTC   ; Clear "DB1" bit of Port C(bit1)
 9137 [03] 2002      4709       bra     CHK_DB2     ; Branch to CHK_DB2
                     4710  
                     4711  SET_DB1:
 9139 [04] 1202      4712       bset    DB1,PORTC   ; Set "DB1" bit of Port C(bit1)
                     4713  
                     4714  ;***************************************************************************
                     4715  ; - Data Bit 2 (PTC2)
                     4716  ;***************************************************************************
                     4717  
                     4718  CHK_DB2:
 913B [03] B67E      4719       lda     value       ; Load accumulator with value in "value" variable
 913D [02] A504      4720       bit     #DB2m       ; Logical AND (A)&(M)%00000100
 913F [03] 2604      4721       bne     SET_DB2     ; If Z bit of CCR is clear, branch to SET_DB2:
 9141 [04] 1502      4722       bclr    DB2,PORTC   ; Clear "DB2" bit of Port C(bit2)
 9143 [03] 2002      4723       bra     CHK_DB3     ; Branch to CHK_DB3
                     4724  
                     4725  SET_DB2:
 9145 [04] 1402      4726       bset    DB2,PORTC   ; Set "DB2" bit of Port C(bit2)
                     4727  
                     4728  ;***************************************************************************
                     4729  ; - Data Bit 3 (PTC3)
                     4730  ;***************************************************************************
                     4731  
                     4732  CHK_DB3:
 9147 [03] B67E      4733       lda     value       ; Load accumulator with value in "value" variable
 9149 [02] A508      4734       bit     #DB3m       ; Logical AND (A)&(M)%00001000
 914B [03] 2604      4735       bne     SET_DB3     ; If Z bit of CCR is clear, branch to SET_DB3:
 914D [04] 1702      4736       bclr    DB3,PORTC   ; Clear "DB3" bit of Port C(bit3)
 914F [03] 2002      4737       bra     LO_NIB      ; Branch to LO_NIB:
                     4738  
                     4739  SET_DB3:
 9151 [04] 1602      4740       bset    DB3,PORTC   ; Set "DB3" bit of Port C(bit3)
                     4741  
                     4742  ;***************************************************************************
                     4743  ; - Send the Lo nibble
                     4744  ;***************************************************************************
                     4745  
                     4746  LO_NIB:
 9153 [04] 1801      4747       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 9155 [05] CD9163    4748       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
                     4749                                ;(timing requirement)
                     4750  
                     4751  ;***************************************************************************
                     4752  ; - Clear Enable and Register Select to set up for next transmit
                     4753  ;***************************************************************************
                     4754  
 9158 [04] 1901      4755       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 915A [05] CD916F    4756       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 915D [04] 1D01      4757       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of PortB(RS=0)
 915F [05] CD916F    4758       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 9162 [04] 81        4759       rts                      ; Return from subroutine
                     4760  
                     4761  
                     4762  ;****************************************************************************
                     4763  ; - This is the delay time from the point at which the data bits have been
                     4764  ;   configured, and the "enable" bit set, to the point at which the "enable"
                     4765  ;   bit is cleared.(min 0.45uS)
                     4766  ;   One pass through the loop takes ~1.5uS, bus frequency of ~8mHZ
                     4767  ;****************************************************************************
                     4768  
                     4769  LONG_DELAY:
 9163 [03] 3F69      4770       clr     tmp1       ; Clear tmp1 variable
                     4771  
                     4772  WAIT_4:
 9165 [03] B669      4773       lda     tmp1       ; Load accumulator with value in tmp1 variable
 9167 [01] 4C        4774       inca               ; Increment value in accumulator
 9168 [03] B769      4775       sta     tmp1       ; Copy to tmp1 variable
 916A [02] A102      4776       cmp     #$02       ; Compare value in accumulator with decimal 2
 916C [03] 25F7      4777       blo     WAIT_4     ; If C bit of CCR is set, (A<M), branch to
                     4778                          ; WAIT_4:(~3uS delay for timing requirements)
 916E [04] 81        4779       rts                ; Return from subroutine
                     4780  
                     4781  
                     4782  ;****************************************************************************
                     4783  ; - This is the delay time from the point at which the "enable" bit has been
                     4784  ;   cleared, to the point where the data bits can be re-configured.
                     4785  ;   (min 0.01uS) One NOP takes ~0.125uS, bus frequency of ~8mHZ
                     4786  ;****************************************************************************
                     4787  
                     4788  SHORT_DELAY:
 916F [01] 9D        4789       nop                ; No operation(1 bus cycle)
 9170 [04] 81        4790       rts                ; Return from subroutine
                     4791  
                     4792  
                     4793  ;****************************************************************************
                     4794  ; - This subroutine compares all the characters on the bottom line commanded,
                     4795  ;   to those of the previous bottom line. If they are different, update the
                     4796  ;   bottom line, otherwise, skip over. This is to eliminate display
                     4797  ;   "digit rattle" caused by rapid screen updates.
                     4798  ;****************************************************************************
                     4799  
                     4800  CMP_BOTLIN:
 9171 [03] B685      4801       lda     Botlin0         ; Load accumulator with value in "Botlin0"
 9173 [03] B199      4802       cmp     Botlin0L        ; Compare it with the value in "Botlin0L"
 9175 [03] 2705      4803       beq     NO_CHNG_BL0     ; If Z bit of CCR is set, branch to NO_CHNG_BL0
                     4804                               ;(A=M)
 9177 [03] B799      4805       sta     Botlin0L        ; Copy "Botlin0" to "Botlin0L"
 9179 [03] CC924F    4806       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4807  
                     4808  NO_CHNG_BL0:
 917C [03] B686      4809       lda     Botlin1         ; Load accumulator with value in "Botlin1"
 917E [03] B19A      4810       cmp     Botlin1L        ; Compare it with the value in "Botlin1L"
 9180 [03] 2705      4811       beq     NO_CHNG_BL1     ; If Z bit of CCR is set, branch to NO_CHNG_BL1
                     4812                               ;(A=M)
 9182 [03] B79A      4813       sta     Botlin1L        ; Copy "Botlin1" to "Botlin1L"
 9184 [03] CC924F    4814       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4815  
                     4816  NO_CHNG_BL1:
 9187 [03] B687      4817       lda     Botlin2         ; Load accumulator with value in "Botlin2"
 9189 [03] B19B      4818       cmp     Botlin2L        ; Compare it with the value in "Botlin2L"
 918B [03] 2705      4819       beq     NO_CHNG_BL2     ; If Z bit of CCR is set, branch to NO_CHNG_BL2
                     4820                               ;(A=M)
 918D [03] B79B      4821       sta     Botlin2L        ; Copy "Botlin2" to "Botlin2L"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 40
MV351WM


 918F [03] CC924F    4822       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4823  
                     4824  NO_CHNG_BL2:
 9192 [03] B688      4825       lda     Botlin3         ; Load accumulator with value in "Botlin3"
 9194 [03] B19C      4826       cmp     Botlin3L        ; Compare it with the value in "Botlin3L"
 9196 [03] 2705      4827       beq     NO_CHNG_BL3     ; If Z bit of CCR is set, branch to NO_CHNG_BL3
                     4828                               ;(A=M)
 9198 [03] B79C      4829       sta     Botlin3L        ; Copy "Botlin3" to "Botlin3L"
 919A [03] CC924F    4830       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4831  
                     4832  NO_CHNG_BL3:
 919D [03] B689      4833       lda     Botlin4         ; Load accumulator with value in "Botlin4"
 919F [03] B19D      4834       cmp     Botlin4L        ; Compare it with the value in "Botlin4L"
 91A1 [03] 2705      4835       beq     NO_CHNG_BL4     ; If Z bit of CCR is set, branch to NO_CHNG_BL4
                     4836                               ;(A=M)
 91A3 [03] B79D      4837       sta     Botlin4L        ; Copy "Botlin4" to "Botlin4L"
 91A5 [03] CC924F    4838       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4839  
                     4840  NO_CHNG_BL4:
 91A8 [03] B68A      4841       lda     Botlin5         ; Load accumulator with value in "Botlin5"
 91AA [03] B19E      4842       cmp     Botlin5L        ; Compare it with the value in "Botlin5L"
 91AC [03] 2705      4843       beq     NO_CHNG_BL5     ; If Z bit of CCR is set, branch to NO_CHNG_BL5
                     4844                               ;(A=M)
 91AE [03] B79E      4845       sta     Botlin5L        ; Copy "Botlin5" to "Botlin5L"
 91B0 [03] CC924F    4846       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4847  
                     4848  NO_CHNG_BL5:
 91B3 [03] B68B      4849       lda     Botlin6         ; Load accumulator with value in "Botlin6"
 91B5 [03] B19F      4850       cmp     Botlin6L        ; Compare it with the value in "Botlin6L"
 91B7 [03] 2705      4851       beq     NO_CHNG_BL6     ; If Z bit of CCR is set, branch to NO_CHNG_BL6
                     4852                               ;(A=M)
 91B9 [03] B79F      4853       sta     Botlin6L        ; Copy "Botlin6" to "Botlin6L"
 91BB [03] CC924F    4854       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4855  
                     4856  NO_CHNG_BL6:
 91BE [03] B68C      4857       lda     Botlin7         ; Load accumulator with value in "Botlin7"
 91C0 [03] B1A0      4858       cmp     Botlin7L        ; Compare it with the value in "Botlin7L"
 91C2 [03] 2705      4859       beq     NO_CHNG_BL7     ; If Z bit of CCR is set, branch to NO_CHNG_BL7
                     4860                               ;(A=M)
 91C4 [03] B7A0      4861       sta     Botlin7L        ; Copy "Botlin7" to "Botlin7L"
 91C6 [03] CC924F    4862       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4863  
                     4864  NO_CHNG_BL7:
 91C9 [03] B68D      4865       lda     Botlin8         ; Load accumulator with value in "Botlin8"
 91CB [03] B1A1      4866       cmp     Botlin8L        ; Compare it with the value in "Botlin8L"
 91CD [03] 2705      4867       beq     NO_CHNG_BL8     ; If Z bit of CCR is set, branch to NO_CHNG_BL8
                     4868                               ;(A=M)
 91CF [03] B7A1      4869       sta     Botlin8L        ; Copy "Botlin8" to "Botlin8L"
 91D1 [03] CC924F    4870       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4871  
                     4872  NO_CHNG_BL8:
 91D4 [03] B68E      4873       lda     Botlin9         ; Load accumulator with value in "Botlin9"
 91D6 [03] B1A2      4874       cmp     Botlin9L        ; Compare it with the value in "Botlin9L"
 91D8 [03] 2705      4875       beq     NO_CHNG_BL9     ; If Z bit of CCR is set, branch to NO_CHNG_BL9
                     4876                               ;(A=M)
 91DA [03] B7A2      4877       sta     Botlin9L        ; Copy "Botlin9" to "Botlin9L"
 91DC [03] CC924F    4878       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4879  
                     4880  NO_CHNG_BL9:
 91DF [03] B68F      4881       lda     Botlin10         ; Load accumulator with value in "Botlin10"
 91E1 [03] B1A3      4882       cmp     Botlin10L        ; Compare it with the value in "Botlin10L"
 91E3 [03] 2705      4883       beq     NO_CHNG_BL10     ; If Z bit of CCR is set, branch to NO_CHNG_BL10
                     4884                                ;(A=M)
 91E5 [03] B7A3      4885       sta     Botlin10L        ; Copy "Botlin10" to "Botlin10L"
 91E7 [03] CC924F    4886       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4887  
                     4888  NO_CHNG_BL10:
 91EA [03] B690      4889       lda     Botlin11         ; Load accumulator with value in "Botlin11"
 91EC [03] B1A4      4890       cmp     Botlin11L        ; Compare it with the value in "Botlin11L"
 91EE [03] 2705      4891       beq     NO_CHNG_BL11     ; If Z bit of CCR is set, branch to NO_CHNG_BL11
                     4892                                ;(A=M)
 91F0 [03] B7A4      4893       sta     Botlin11L        ; Copy "Botlin11" to "Botlin11L"
 91F2 [03] CC924F    4894       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4895  
                     4896  NO_CHNG_BL11:
 91F5 [03] B691      4897       lda     Botlin12         ; Load accumulator with value in "Botlin12"
 91F7 [03] B1A5      4898       cmp     Botlin12L        ; Compare it with the value in "Botlin12L"
 91F9 [03] 2705      4899       beq     NO_CHNG_BL12     ; If Z bit of CCR is set, branch to NO_CHNG_BL12
                     4900                                ;(A=M)
 91FB [03] B7A5      4901       sta     Botlin12L        ; Copy "Botlin12" to "Botlin12L"
 91FD [03] CC924F    4902       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4903  
                     4904  NO_CHNG_BL12:
 9200 [03] B692      4905       lda     Botlin13         ; Load accumulator with value in "Botlin13"
 9202 [03] B1A6      4906       cmp     Botlin13L        ; Compare it with the value in "Botlin13L"
 9204 [03] 2705      4907       beq     NO_CHNG_BL13     ; If Z bit of CCR is set, branch to NO_CHNG_BL13
                     4908                                ;(A=M)
 9206 [03] B7A6      4909       sta     Botlin13L        ; Copy "Botlin13" to "Botlin13L"
 9208 [03] CC924F    4910       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4911  
                     4912  NO_CHNG_BL13:
 920B [03] B693      4913       lda     Botlin14         ; Load accumulator with value in "Botlin14"
 920D [03] B1A7      4914       cmp     Botlin14L        ; Compare it with the value in "Botlin14L"
 920F [03] 2705      4915       beq     NO_CHNG_BL14     ; If Z bit of CCR is set, branch to NO_CHNG_BL14
                     4916                                ;(A=M)
 9211 [03] B7A7      4917       sta     Botlin14L        ; Copy "Botlin14" to "Botlin14L"
 9213 [03] CC924F    4918       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4919  
                     4920  NO_CHNG_BL14:
 9216 [03] B694      4921       lda     Botlin15         ; Load accumulator with value in "Botlin15"
 9218 [03] B1A8      4922       cmp     Botlin15L        ; Compare it with the value in "Botlin15L"
 921A [03] 2705      4923       beq     NO_CHNG_BL15     ; If Z bit of CCR is set, branch to NO_CHNG_BL15
                     4924                                ;(A=M)
 921C [03] B7A8      4925       sta     Botlin15L        ; Copy "Botlin15" to "Botlin15L"
 921E [03] CC924F    4926       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4927  
                     4928  NO_CHNG_BL15:
 9221 [03] B695      4929       lda     Botlin16         ; Load accumulator with value in "Botlin16"
 9223 [03] B1A9      4930       cmp     Botlin16L        ; Compare it with the value in "Botlin16L"
 9225 [03] 2705      4931       beq     NO_CHNG_BL16     ; If Z bit of CCR is set, branch to NO_CHNG_BL16
                     4932                                ;(A=M)
 9227 [03] B7A9      4933       sta     Botlin16L        ; Copy "Botlin16" to "Botlin16L"
 9229 [03] CC924F    4934       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4935  
                     4936  NO_CHNG_BL16:
 922C [03] B696      4937       lda     Botlin17         ; Load accumulator with value in "Botlin17"
 922E [03] B1AA      4938       cmp     Botlin17L        ; Compare it with the value in "Botlin17L"
 9230 [03] 2705      4939       beq     NO_CHNG_BL17     ; If Z bit of CCR is set, branch to NO_CHNG_BL17
                     4940                                ;(A=M)
 9232 [03] B7AA      4941       sta     Botlin17L        ; Copy "Botlin17" to "Botlin17L"
 9234 [03] CC924F    4942       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4943  
                     4944  NO_CHNG_BL17:
 9237 [03] B697      4945       lda     Botlin18         ; Load accumulator with value in "Botlin18"
 9239 [03] B1AB      4946       cmp     Botlin18L        ; Compare it with the value in "Botlin18L"
 923B [03] 2705      4947       beq     NO_CHNG_BL18     ; If Z bit of CCR is set, branch to NO_CHNG_BL18
                     4948                                ;(A=M)
 923D [03] B7AB      4949       sta     Botlin18L        ; Copy "Botlin18" to "Botlin18L"
 923F [03] CC924F    4950       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4951  
                     4952  NO_CHNG_BL18:
 9242 [03] B698      4953       lda     Botlin19         ; Load accumulator with value in "Botlin19"
 9244 [03] B1AC      4954       cmp     Botlin19L        ; Compare it with the value in "Botlin19L"
 9246 [03] 2705      4955       beq     NO_CHNG_BL19     ; If Z bit of CCR is set, branch to NO_CHNG_BL19
                     4956                                ;(A=M)
 9248 [03] B7AC      4957       sta     Botlin19L        ; Copy "Botlin19" to "Botlin19L"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 41
MV351WM


 924A [03] CC924F    4958       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4959  
                     4960  NO_CHNG_BL19:
 924D [03] 2004      4961       bra     NO_CHNG_BOTLIN   ; Branch to NO_CHNG_BOTLIN:
                     4962  
                     4963  BOTLIN_CHNG:
 924F [04] 1A53      4964       bset    LinChng,flags    ; Set "Linchng" bit of "flags" variable
 9251 [03] 2002      4965       bra     CMP_BOTLIN_DONE  ; Branch to CMP_BOTLIN_DONE:
                     4966  
                     4967  NO_CHNG_BOTLIN:
 9253 [04] 1B53      4968       bclr    LinChng,flags    ; Clear "Linchng" bit of "flags" variable
                     4969  
                     4970  CMP_BOTLIN_DONE:
 9255 [04] 81        4971       rts                      ; Return from subroutine
                     4972  
                     4973  ;***************************************************************************
                     4974  ;
                     4975  ; -------------------- Ordered Table Search Subroutine ---------------------
                     4976  ;
                     4977  ;  X is pointing to the start of the first value in the table
                     4978  ;  tmp1:2 initially hold the start of table address,
                     4979  ;  then they hold the bound values
                     4980  ;  tmp3 is the end of the table ("n" elements - 1)
                     4981  ;  tmp4 is the comparison value
                     4982  ;  tmp5 is the index result - if zero then comp value is less
                     4983  ;  than beginning of table, and if equal to "n" elements then it is
                     4984  ;  rail-ed at upper end
                     4985  ;
                     4986  ;***************************************************************************
                     4987  
                     4988  ORD_TABLE_FIND:
 9256 [03] 3F6D      4989       clr     tmp5     ; Clear tmp5 variable
 9258 [04] 5569      4990       ldhx    tmp1     ; Load high part of index register with value in tmp1
 925A [02] F6        4991       lda     ,x            ; Load accumulator with low part of index register???
 925B [03] B769      4992       sta     tmp1     ; Copy to tmp1 variable
 925D [03] B76A      4993       sta     tmp2     ; Copy to tmp2 variable
                     4994  
                     4995  REENT:
 925F [01] 5C        4996       incx                    ; Increment low part of index register
 9260 [04] 3C6D      4997       inc     tmp5            ; Increment tmp5 variable
 9262 [05] 4E6A69    4998       mov     tmp2,tmp1       ; Move value in tmp2 variable to tmp1 variable
 9265 [02] F6        4999       lda     ,x              ; Load accumulator with value in index reg Lo??
 9266 [03] B76A      5000       sta     tmp2            ; Copy to tmp2 variable
 9268 [03] B16C      5001       cmp     tmp4            ; Compare it with tmp4 variable
 926A [03] 2206      5002       bhi     GOT_ORD_NUM     ; If higher, branch to GOT_ORD_NUM lable
 926C [03] B66D      5003       lda     tmp5            ; Load accumulator with value in tmp5 variable
 926E [03] B16B      5004       cmp     tmp3            ; Compare it with value in tmp3 variable
 9270 [03] 26ED      5005       bne     REENT           ; If the Z bit of CCR is clesr, branch to REENT:
                     5006  
                     5007  GOT_ORD_NUM:
 9272 [04] 81        5008       rts                     ; Return from subroutine
                     5009  
                     5010  
                     5011  ;****************************************************************************
                     5012  ;
                     5013  ; ------------------ Linear Interpolation - 2D Subroutine -------------------
                     5014  ;
                     5015  ; Graph Plot         Z2
                     5016  ;                   Y2
                     5017  ;               X
                     5018  ;               Y
                     5019  ;         X1
                     5020  ;         Y1
                     5021  ;            (y2 - y1)
                     5022  ;  Y = Y1 +  --------- * (x - x1)
                     5023  ;            (x2 - x1)
                     5024  ;
                     5025  ;   tmp1 = x1
                     5026  ;   tmp2 = x2
                     5027  ;   tmp3 = y1
                     5028  ;   tmp4 = y2
                     5029  ;   tmp5 = x
                     5030  ;   tmp6 = y
                     5031  ;***************************************************************************
                     5032  
                     5033  LININTERP:
 9273 [03] 3F6F      5034       clr     tmp7          ; Clear tmp7 variable (This is the negative slope
                     5035                             ; detection bit) (tmp7 = 0)
 9275 [05] 4E6B6E    5036       mov     tmp3,tmp6     ; Move value in tmp3 variable to tmp6 variable
                     5037                             ; (Y1 to tmp6)
                     5038  
                     5039  CHECK_LESS_THAN:
 9278 [03] B66D      5040       lda     tmp5               ; Load accumulator with value in tmp5 variable
                     5041                                  ; (x)
 927A [03] B169      5042       cmp     tmp1               ; Compare it with value in tmp1 variable
                     5043                                  ; (x1)
 927C [03] 2202      5044       bhi     CHECK_GREATER_THAN ; If higher, branch to CHECK_GREATER_THAN:
                     5045                                  ; (X>X1)
 927E [03] 2044      5046       bra     DONE_WITH_INTERP        ; Branch to DONE_WITH_INTERP: (else (Y=Y1))
                     5047  
                     5048  CHECK_GREATER_THAN:
 9280 [03] B66D      5049       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     5050                                ; (x)
 9282 [03] B16A      5051       cmp     tmp2             ; Compare it with value in tmp2 variable
                     5052                                ; (X2)
 9284 [03] 2505      5053       blo     DO_INTERP        ; If lower, branch to DO_INTERP lable
                     5054                                ; (X<X2)
 9286 [05] 4E6C6E    5055       mov     tmp4,tmp6        ; Move value in tmp4 variable to tmp6 variable
                     5056                                ; (Y2 to tmp6)
 9289 [03] 2039      5057       bra     DONE_WITH_INTERP ; Branch to DONE_WITH_INTERP lable (else (Y=Y2))
                     5058  
                     5059  DO_INTERP:
 928B [05] 4E6B6E    5060       mov     tmp3,tmp6        ; Move value in tmp3 variable to tmp6 variable
                     5061                                ; (Y1 to tmp6)
 928E [03] B66A      5062       lda     tmp2             ; Load accumulator with value in tmp2 variable
                     5063                                ; (X2)
 9290 [03] B069      5064       sub     tmp1             ; Subtract tmp1 from tmp2 (A=X2-X1)
 9292 [03] 2730      5065       beq     DONE_WITH_INTERP ; If the Z bit of CCR is set, branch to
                     5066                                ;DONE_WITH_INTERP:  else (Y=Y1)
 9294 [02] 87        5067       psha                     ; Push value in accumulator to stack
                     5068                                ; (X2-X1)(stack 1)
 9295 [03] B66C      5069       lda     tmp4             ; Load accumulator with value in tmp4 variable
                     5070                                ; (Y2)
 9297 [03] B06B      5071       sub     tmp3             ; Subtract tmp3 from tmp4 (A=Y2-Y1)
 9299 [03] 2403      5072       bcc     POSINTERP        ; If C bit of CCR is clear, branch to POSINTERP:
 929B [01] 40        5073       nega                     ; Negate accumulator      ??????????
 929C [04] 3C6F      5074       inc     tmp7             ; Increment tmp7 variable (tmp7 = 1)
                     5075  
                     5076  POSINTERP:
 929E [02] 87        5077       psha                     ; Push value in accumulator to stack
                     5078                                ; (negated Y2-Y1) (stack 2)
 929F [03] B66D      5079       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     5080                                ; (X)
 92A1 [03] B069      5081       sub     tmp1             ; Subtract tmp1 from tmp5 (A=X-X1)
 92A3 [03] 271D      5082       beq     ZERO_SLOPE            ; If the Z bit of CCR is set,
                     5083                                ; branch to ZERO_SLOPE lable  (Y=Y1)
 92A5 [02] 88        5084       pulx                     ; Pull value from stack to index register Lo
                     5085                                ;(negated Y2-Y1) (stack 2)
 92A6 [05] 42        5086       mul                      ; Multiply it by the value in the accumulator
                     5087                                ; A=(negated Y2-Y1)*(X-X1)
 92A7 [02] 89        5088       pshx                     ; Push the index register L to the stack
                     5089                                ; (stack 2)
 92A8 [02] 8A        5090       pulh                     ; Pull this value to index register Hi(stack 2)
 92A9 [02] 88        5091       pulx                     ; Pull the next value to index register Lo
                     5092                                ;(stack 1)
 92AA [07] 52        5093       div                      ; Divide A<-(H:A)/(X);H<-Remainder


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 42
MV351WM


 92AB [02] 87        5094       psha                     ; Push the value in the accumulator onto stack
                     5095                                ; (stack 1)
 92AC [03] B66F      5096       lda     tmp7             ; Load accumulator with value in tmp7 variable
 92AE [03] 2607      5097       bne     NEG_SLOPE        ; If the Z bit of CCR is clear,
                     5098                                ; branch to NEG_SLOPE: (Y=Y1)
 92B0 [02] 86        5099       pula                     ; Pull value from stack to accumulator (stack 1)
 92B1 [03] BB6B      5100       add     tmp3             ; Add it with value in tmp3 variable
 92B3 [03] B76E      5101       sta     tmp6             ; Copy it to tmp6 variable
 92B5 [03] 200D      5102       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     5103  
                     5104  NEG_SLOPE:
 92B7 [02] 86        5105       pula                     ; Pull value from stack to accumulator(stack 1)
 92B8 [03] B76F      5106       sta     tmp7             ; Copy to tmp7 variable
 92BA [03] B66B      5107       lda     tmp3             ; Load accumulator with value in tmp3  Y1)
 92BC [03] B06F      5108       sub     tmp7             ; Subtract tmp7 from tmp3
 92BE [03] B76E      5109       sta     tmp6             ; Copy result to tmp6 variable
 92C0 [03] 2002      5110       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     5111  
                     5112  ZERO_SLOPE:
 92C2 [02] 86        5113          pula    ; Pull value from stack to accumulator (clean stack)(stack 2)
 92C3 [02] 86        5114          pula    ; Pull value from stack to accumulator (clean stack)(stack 1)
                     5115  
                     5116  DONE_WITH_INTERP:
 92C4 [04] 81        5117          rts      ; Return from subroutine
                     5118  
                     5119  ;****************************************************************************
                     5120  ;
                     5121  ; ----------------- 32 x 16 Unsigned Divide Subroutine ---------------------
                     5122  ;
                     5123  ; This routine takes the 32-bit dividend stored in INTACC1.....INTACC1+3
                     5124  ; and divides it by the 16-bit divisor stored in INTACC2:INTACC2+1.
                     5125  ; The quotient replaces the dividend and the remainder replaces the divisor.
                     5126  ; INTACC1:INTAAC1+1:INTAAC1+2:INTAAC1+3 / INTAAC2:INTAAC2+1
                     5127  ; = INTACC1:INTAAC1+1:INTAAC1+2:INTAAC1+3 rem INTAAC2:INTAAC2+1
                     5128  ;
                     5129  ;***************************************************************************
                     5130  
 92C5                5131  UDVD32    EQU     *
                     5132  *
 92C5                5133  DIVIDEND  EQU     INTACC1+2
 92C5                5134  DIVISOR   EQU     INTACC2
 92C5                5135  QUOTIENT  EQU     INTACC1
 92C5                5136  REMAINDER EQU     INTACC1
                     5137  *
 92C5 [02] 8B        5138          PSHH                            ;save h-reg value
 92C6 [02] 87        5139          PSHA                            ;save accumulator
 92C7 [02] 89        5140          PSHX                            ;save x-reg value
 92C8 [02] A7FD      5141          AIS     #-3                     ;reserve three bytes of temp storage
 92CA [02] A620      5142          LDA     #!32                    ;
 92CC [04] 9EE703    5143          STA     3,SP                    ;loop counter for number of shifts
 92CF [03] B665      5144          LDA     DIVISOR                 ;get divisor msb
 92D1 [04] 9EE701    5145          STA     1,SP                    ;put divisor msb in working storage
 92D4 [03] B666      5146          LDA     DIVISOR+1               ;get divisor lsb
 92D6 [04] 9EE702    5147          STA     2,SP                    ;put divisor lsb in working storage
                     5148  
                     5149  ****************************************************************************
                     5150  *     Shift all four bytes of dividend 16 bits to the right and clear
                     5151  *     both bytes of the temporary remainder location
                     5152  ****************************************************************************
                     5153  
 92D9 [05] 4E6466    5154          MOV     DIVIDEND+1,DIVIDEND+3   ;shift dividend lsb
 92DC [05] 4E6365    5155          MOV     DIVIDEND,DIVIDEND+2     ;shift 2nd byte of dividend
 92DF [05] 4E6264    5156          MOV     DIVIDEND-1,DIVIDEND+1   ;shift 3rd byte of dividend
 92E2 [05] 4E6163    5157          MOV     DIVIDEND-2,DIVIDEND     ;shift dividend msb
 92E5 [03] 3F61      5158          CLR     REMAINDER               ;zero remainder msb
 92E7 [03] 3F62      5159          CLR     REMAINDER+1             ;zero remainder lsb
                     5160  
                     5161  ****************************************************************************
                     5162  *     Shift each byte of dividend and remainder one bit to the left
                     5163  ****************************************************************************
                     5164  
 92E9 [03] B661      5165  SHFTLP  LDA     REMAINDER               ;get remainder msb
 92EB [01] 49        5166          ROLA                            ;shift remainder msb into carry
 92EC [04] 3966      5167          ROL     DIVIDEND+3              ;shift dividend lsb
 92EE [04] 3965      5168          ROL     DIVIDEND+2              ;shift 2nd byte of dividend
 92F0 [04] 3964      5169          ROL     DIVIDEND+1              ;shift 3rd byte of dividend
 92F2 [04] 3963      5170          ROL     DIVIDEND                ;shift dividend msb
 92F4 [04] 3962      5171          ROL     REMAINDER+1             ;shift remainder lsb
 92F6 [04] 3961      5172          ROL     REMAINDER               ;shift remainder msb
                     5173  
                     5174  *****************************************************************************
                     5175  *     Subtract both bytes of the divisor from the remainder
                     5176  *****************************************************************************
                     5177  
 92F8 [03] B662      5178          LDA     REMAINDER+1          ;get remainder lsb
 92FA [04] 9EE002    5179          SUB     2,SP                 ;subtract divisor lsb from remainder lsb
 92FD [03] B762      5180          STA     REMAINDER+1          ;store new remainder lsb
 92FF [03] B661      5181          LDA     REMAINDER            ;get remainder msb
 9301 [04] 9EE201    5182          SBC     1,SP                 ;subtract divisor msb from remainder msb
 9304 [03] B761      5183          STA     REMAINDER            ;store new remainder msb
 9306 [03] B666      5184          LDA     DIVIDEND+3           ;get low byte of dividend/quotient
 9308 [02] A200      5185          SBC     #0                   ;dividend low bit holds subtract carry
 930A [03] B766      5186          STA     DIVIDEND+3           ;store low byte of dividend/quotient
                     5187  
                     5188  *****************************************************************************
                     5189  *     Check dividend/quotient lsb. If clear, set lsb of quotient to indicate
                     5190  *     successful subraction, else add both bytes of divisor back to remainder
                     5191  *****************************************************************************
                     5192  
 930C [05] 016616    5193          BRCLR   0,DIVIDEND+3,SETLSB     ;check for a carry from subtraction
                     5194                                          ;and add divisor to remainder if set
 930F [03] B662      5195          LDA     REMAINDER+1             ;get remainder lsb
 9311 [04] 9EEB02    5196          ADD     2,SP                    ;add divisor lsb to remainder lsb
 9314 [03] B762      5197          STA     REMAINDER+1             ;store remainder lsb
 9316 [03] B661      5198          LDA     REMAINDER               ;get remainder msb
 9318 [04] 9EE901    5199          ADC     1,SP                    ;add divisor msb to remainder msb
 931B [03] B761      5200          STA     REMAINDER               ;store remainder msb
 931D [03] B666      5201          LDA     DIVIDEND+3              ;get low byte of dividend
 931F [02] A900      5202          ADC     #0                      ;add carry to low bit of dividend
 9321 [03] B766      5203          STA     DIVIDEND+3              ;store low byte of dividend
 9323 [03] 2002      5204          BRA     DECRMT                  ;do next shift and subtract
                     5205  
 9325 [04] 1066      5206  SETLSB  BSET    0,DIVIDEND+3            ;set lsb of quotient to indicate
                     5207                                          ;successive subtraction
 9327 [06] 9E6B03BE  5208  DECRMT  DBNZ    3,SP,SHFTLP             ;decrement loop counter and do next
                     5209                                          ;shift
                     5210  
                     5211  *****************************************************************************
                     5212  *     Move 32-bit dividend into INTACC1.....INTACC1+3 and put 16-bit
                     5213  *     remainder in INTACC2:INTACC2+1
                     5214  *****************************************************************************
                     5215  
 932B [03] B661      5216          LDA     REMAINDER               ;get remainder msb
 932D [04] 9EE701    5217          STA     1,SP                    ;temporarily store remainder msb
 9330 [03] B662      5218          LDA     REMAINDER+1             ;get remainder lsb
 9332 [04] 9EE702    5219          STA     2,SP                    ;temporarily store remainder lsb
 9335 [05] 4E6361    5220          MOV     DIVIDEND,QUOTIENT       ;
 9338 [05] 4E6462    5221          MOV     DIVIDEND+1,QUOTIENT+1   ;shift all four bytes of quotient
 933B [05] 4E6563    5222          MOV     DIVIDEND+2,QUOTIENT+2   ; 16 bits to the left
 933E [05] 4E6664    5223          MOV     DIVIDEND+3,QUOTIENT+3   ;
 9341 [04] 9EE601    5224          LDA     1,SP                    ;get final remainder msb
 9344 [03] B765      5225          STA     INTACC2                 ;store final remainder msb
 9346 [04] 9EE602    5226          LDA     2,SP                    ;get final remainder lsb
 9349 [03] B766      5227          STA     INTACC2+1               ;store final remainder lsb
                     5228  
                     5229  *****************************************************************************


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 43
MV351WM


                     5230  *     Deallocate local storage, restore register values, and return from
                     5231  *     subroutine
                     5232  *****************************************************************************
                     5233  
 934B [02] A703      5234          AIS     #3                      ;deallocate temporary storage
 934D [02] 88        5235          PULX                            ;restore x-reg value
 934E [02] 86        5236          PULA                            ;restore accumulator value
 934F [02] 8A        5237          PULH                            ;restore h-reg value
 9350 [04] 81        5238          RTS                             ;return
                     5239  
                     5240  *****************************************************************************
                     5241  
                     5242  
                     5243  ;****************************************************************************
                     5244  ; ----------  ----- ROUND after div (unsigned) Subroutine -------------------
                     5245  ;
                     5246  ;  1)  check for div overflow (carry set), rail result if detected
                     5247  ;  2)  if (remainder * 2) > divisor then     ; was remainder > (divisor / 2)
                     5248  ;  2a)    increment result, rail if over-flow
                     5249  ;
                     5250  ;****************************************************************************
                     5251  
                     5252  DIVROUND:
 9351 [03] 250E      5253       bcs     DIVROUND0     ; If C bit of CCR is set, branch to DIVROUND0:
                     5254                             ; (div overflow? yes, branch)
 9353 [03] BF7D      5255       stx     local_tmp     ; Copy value in index register Lo byte to
                     5256                             ; local_tmp variable (divisor)
 9355 [02] 8B        5257       pshh                  ; Push value in index register Hi byte onto
                     5258                             ; stack (retrieve remainder)
 9356 [02] 88        5259       pulx                  ; Pull value on stack to index register Lo byte
 9357 [01] 58        5260       lslx                  ; Logical shift left index register lo byte (* 2)
 9358 [03] 2504      5261       bcs     DIVROUND2     ; If C bit of CCR is set, branch to DIVROUND2:
                     5262                             ;(over-flow on left-shift, (remainder * 2) > $FF)
 935A [03] B37D      5263       cpx     local_tmp     ; Compare value in local_tmp variable with value
                     5264                             ; in index register Lo byte
                     5265                             ;(compare (remainder * 2) to divisor)
 935C [03] 2505      5266       blo     DIVROUND1     ; If lower, branch to DIVROUND1:
                     5267  
                     5268  
                     5269  DIVROUND2:
 935E [01] 4C        5270       inca                   ; Increment accumulator (round-up result)
 935F [03] 2602      5271       bne      DIVROUND1     ; If Z bit of CCR is clear, branch to DIVROUND1:
                     5272                              ; (result roll over? no, branch)
                     5273  
                     5274  
                     5275  DIVROUND0:
 9361 [02] A6FF      5276       lda     #$FF     ; Load accumulator with decimal 255 (rail result)
                     5277  
                     5278  
                     5279  DIVROUND1:
 9363 [04] 81        5280       rts              ; return from subroutine
                     5281  
                     5282  
                     5283  ;****************************************************************************
                     5284  ;
                     5285  ; ------------------- 16 x 16 Unsigned Multiply Subroutine -----------------
                     5286  ;
                     5287  ;     tmp8:tmp7:tmp6:tmp5 = tmp4:tmp3 * tmp2:tmp1
                     5288  ;
                     5289  ;               tmp3*tmp1
                     5290  ;   +      tmp4*tmp1
                     5291  ;   +      tmp3*tmp2
                     5292  ;   + tmp4*tmp2
                     5293  ;   = ===================
                     5294  ;     tmp8 tmp7 tmp6 tmp5
                     5295  ;
                     5296  ;****************************************************************************
                     5297  
                     5298  UMUL32:
 9364 [03] B669      5299       lda     tmp1        ; Load accumulator with value in tmp1 variable
 9366 [03] BE6B      5300       ldx     tmp3        ; Load index register Lo byte with value in tmp3
 9368 [05] 42        5301       mul                 ; Multiply X:A<-(X)*(A)
 9369 [03] B76D      5302       sta     tmp5        ; Ccopy result to tmp5
 936B [03] BF6E      5303       stx     tmp6        ; Copy value in index register Lo byte to tmp6
                     5304  ;
 936D [03] B66A      5305       lda     tmp2        ; Load accumulator with value in tmp2
 936F [03] BE6C      5306       ldx     tmp4        ; Load index register Lo byte with value in tmp4
 9371 [05] 42        5307       mul                 ; Multiply X:A<-(X)*(A)
 9372 [03] B76F      5308       sta     tmp7        ; Copy result to tmp7
 9374 [03] BF70      5309       stx     tmp8        ; Copy value in index register Lo byte to tmp8
                     5310  ;
 9376 [03] B669      5311       lda     tmp1        ; Load accumulator with value in tmp1
 9378 [03] BE6C      5312       ldx     tmp4        ; Load index register Lo byte with value in tmp4
 937A [05] 42        5313       mul                 ; Multiply X:A<-(X)*(A)
 937B [03] BB6E      5314       add     tmp6        ; Add without carry, A<-(A)+(M)
 937D [03] B76E      5315       sta     tmp6        ; Copy result to tmp6
 937F [01] 9F        5316       txa                 ; Transfer value in index register Lo byte
                     5317                           ; to accumulator
 9380 [03] B96F      5318       adc     tmp7        ; Add with carry, A<-(A)+(M)+(C)
 9382 [03] B76F      5319       sta     tmp7        ; Copy result to tmp7
 9384 [03] 2402      5320       bcc     UMUL32a     ; If C bit of CCR is clear, branch to UMUL32a:
 9386 [04] 3C70      5321       inc     tmp8        ; Increment value in tmp8
                     5322  
                     5323  
                     5324  UMUL32a:
 9388 [03] B66A      5325       lda     tmp2        ; Load accumulator with value in tmp2
 938A [03] BE6B      5326       ldx     tmp3        ; Load index register Lo byte with value in tmp3
 938C [05] 42        5327       mul                 ; Multiply X:A<-(X)*(A)
 938D [03] BB6E      5328       add     tmp6        ; Add without carry, A<-(A)+(M)
 938F [03] B76E      5329       sta     tmp6        ; Copy result to tmp6
 9391 [01] 9F        5330       txa                 ; Transfer value in index register Lo byte
                     5331                           ; to accumulator
 9392 [03] B96F      5332       adc     tmp7        ; Add with carry, A<-(A)+(M)+(C)
 9394 [03] B76F      5333       sta     tmp7        ; Copy result to tmp7
 9396 [03] 2402      5334       bcc     UMUL32b     ; If C bit of CCR is clear, branch to UMUL32b:
 9398 [04] 3C70      5335       inc     tmp8        ; increment value in tmp8 variable
                     5336  
                     5337  
                     5338  UMUL32b:
 939A [04] 81        5339        rts                ; return from subroutine
                     5340  
                     5341  ;***************************************************************************
                     5342  ; ----------------------------- Include Files -----------------------------
                     5343  ;***************************************************************************
                     5344  
                     5345  
 F000                5346       org     $F000       ; Origin at Memory Location $F000 = 61440
                     5347                           ; (uses 1536) to Memory location $E500 = 62976
                     5348  
 F000                5349       include "ASCII_Conv_100.inc"     ; Converts 8 bit value to ASCII,
                     5350  ASCII_CONV_100:
 F000      30        5351       db     '0'     ; Decimal 0
 F001      30        5352       db     '0'     ; Decimal 1
 F002      30        5353       db     '0'     ; Decimal 2
 F003      30        5354       db     '0'     ; Decimal        3
 F004      30        5355       db     '0'     ; Decimal        4
 F005      30        5356       db     '0'     ; Decimal        5
 F006      30        5357       db     '0'     ; Decimal        6
 F007      30        5358       db     '0'     ; Decimal        7
 F008      30        5359       db     '0'     ; Decimal        8
 F009      30        5360       db     '0'     ; Decimal        9
 F00A      30        5361       db     '0'     ; Decimal        10
 F00B      30        5362       db     '0'     ; Decimal        11
 F00C      30        5363       db     '0'     ; Decimal        12
 F00D      30        5364       db     '0'     ; Decimal        13
 F00E      30        5365       db     '0'     ; Decimal        14


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 44
MV351WM


 F00F      30        5366       db     '0'     ; Decimal        15
 F010      30        5367       db     '0'     ; Decimal        16
 F011      30        5368       db     '0'     ; Decimal        17
 F012      30        5369       db     '0'     ; Decimal        18
 F013      30        5370       db     '0'     ; Decimal        19
 F014      30        5371       db     '0'     ; Decimal        20
 F015      30        5372       db     '0'     ; Decimal        21
 F016      30        5373       db     '0'     ; Decimal        22
 F017      30        5374       db     '0'     ; Decimal        23
 F018      30        5375       db     '0'     ; Decimal        24
 F019      30        5376       db     '0'     ; Decimal        25
 F01A      30        5377       db     '0'     ; Decimal        26
 F01B      30        5378       db     '0'     ; Decimal        27
 F01C      30        5379       db     '0'     ; Decimal        28
 F01D      30        5380       db     '0'     ; Decimal        29
 F01E      30        5381       db     '0'     ; Decimal        30
 F01F      30        5382       db     '0'     ; Decimal        31
 F020      30        5383       db     '0'     ; Decimal        32
 F021      30        5384       db     '0'     ; Decimal        33
 F022      30        5385       db     '0'     ; Decimal        34
 F023      30        5386       db     '0'     ; Decimal        35
 F024      30        5387       db     '0'     ; Decimal        36
 F025      30        5388       db     '0'     ; Decimal        37
 F026      30        5389       db     '0'     ; Decimal        38
 F027      30        5390       db     '0'     ; Decimal        39
 F028      30        5391       db     '0'     ; Decimal        40
 F029      30        5392       db     '0'     ; Decimal        41
 F02A      30        5393       db     '0'     ; Decimal        42
 F02B      30        5394       db     '0'     ; Decimal        43
 F02C      30        5395       db     '0'     ; Decimal        44
 F02D      30        5396       db     '0'     ; Decimal        45
 F02E      30        5397       db     '0'     ; Decimal        46
 F02F      30        5398       db     '0'     ; Decimal        47
 F030      30        5399       db     '0'     ; Decimal        48
 F031      30        5400       db     '0'     ; Decimal        49
 F032      30        5401       db     '0'     ; Decimal        50
 F033      30        5402       db     '0'     ; Decimal        51
 F034      30        5403       db     '0'     ; Decimal        52
 F035      30        5404       db     '0'     ; Decimal        53
 F036      30        5405       db     '0'     ; Decimal        54
 F037      30        5406       db     '0'     ; Decimal        55
 F038      30        5407       db     '0'     ; Decimal        56
 F039      30        5408       db     '0'     ; Decimal        57
 F03A      30        5409       db     '0'     ; Decimal        58
 F03B      30        5410       db     '0'     ; Decimal        59
 F03C      30        5411       db     '0'     ; Decimal        60
 F03D      30        5412       db     '0'     ; Decimal        61
 F03E      30        5413       db     '0'     ; Decimal        62
 F03F      30        5414       db     '0'     ; Decimal        63
 F040      30        5415       db     '0'     ; Decimal        64
 F041      30        5416       db     '0'     ; Decimal        65
 F042      30        5417       db     '0'     ; Decimal        66
 F043      30        5418       db     '0'     ; Decimal        67
 F044      30        5419       db     '0'     ; Decimal        68
 F045      30        5420       db     '0'     ; Decimal        69
 F046      30        5421       db     '0'     ; Decimal        70
 F047      30        5422       db     '0'     ; Decimal        71
 F048      30        5423       db     '0'     ; Decimal        72
 F049      30        5424       db     '0'     ; Decimal        73
 F04A      30        5425       db     '0'     ; Decimal        74
 F04B      30        5426       db     '0'     ; Decimal        75
 F04C      30        5427       db     '0'     ; Decimal        76
 F04D      30        5428       db     '0'     ; Decimal        77
 F04E      30        5429       db     '0'     ; Decimal        78
 F04F      30        5430       db     '0'     ; Decimal        79
 F050      30        5431       db     '0'     ; Decimal        80
 F051      30        5432       db     '0'     ; Decimal        81
 F052      30        5433       db     '0'     ; Decimal        82
 F053      30        5434       db     '0'     ; Decimal        83
 F054      30        5435       db     '0'     ; Decimal        84
 F055      30        5436       db     '0'     ; Decimal        85
 F056      30        5437       db     '0'     ; Decimal        86
 F057      30        5438       db     '0'     ; Decimal        87
 F058      30        5439       db     '0'     ; Decimal        88
 F059      30        5440       db     '0'     ; Decimal        89
 F05A      30        5441       db     '0'     ; Decimal        90
 F05B      30        5442       db     '0'     ; Decimal        91
 F05C      30        5443       db     '0'     ; Decimal        92
 F05D      30        5444       db     '0'     ; Decimal        93
 F05E      30        5445       db     '0'     ; Decimal        94
 F05F      30        5446       db     '0'     ; Decimal        95
 F060      30        5447       db     '0'     ; Decimal        96
 F061      30        5448       db     '0'     ; Decimal        97
 F062      30        5449       db     '0'     ; Decimal        98
 F063      30        5450       db     '0'     ; Decimal        99
 F064      31        5451       db     '1'     ; Decimal        100
 F065      31        5452       db     '1'     ; Decimal        101
 F066      31        5453       db     '1'     ; Decimal        102
 F067      31        5454       db     '1'     ; Decimal        103
 F068      31        5455       db     '1'     ; Decimal        104
 F069      31        5456       db     '1'     ; Decimal        105
 F06A      31        5457       db     '1'     ; Decimal        106
 F06B      31        5458       db     '1'     ; Decimal        107
 F06C      31        5459       db     '1'     ; Decimal        108
 F06D      31        5460       db     '1'     ; Decimal        109
 F06E      31        5461       db     '1'     ; Decimal        110
 F06F      31        5462       db     '1'     ; Decimal        111
 F070      31        5463       db     '1'     ; Decimal        112
 F071      31        5464       db     '1'     ; Decimal        113
 F072      31        5465       db     '1'     ; Decimal        114
 F073      31        5466       db     '1'     ; Decimal        115
 F074      31        5467       db     '1'     ; Decimal        116
 F075      31        5468       db     '1'     ; Decimal        117
 F076      31        5469       db     '1'     ; Decimal        118
 F077      31        5470       db     '1'     ; Decimal        119
 F078      31        5471       db     '1'     ; Decimal        120
 F079      31        5472       db     '1'     ; Decimal        121
 F07A      31        5473       db     '1'     ; Decimal        122
 F07B      31        5474       db     '1'     ; Decimal        123
 F07C      31        5475       db     '1'     ; Decimal        124
 F07D      31        5476       db     '1'     ; Decimal        125
 F07E      31        5477       db     '1'     ; Decimal        126
 F07F      31        5478       db     '1'     ; Decimal        127
 F080      31        5479       db     '1'     ; Decimal        128
 F081      31        5480       db     '1'     ; Decimal        129
 F082      31        5481       db     '1'     ; Decimal        130
 F083      31        5482       db     '1'     ; Decimal        131
 F084      31        5483       db     '1'     ; Decimal        132
 F085      31        5484       db     '1'     ; Decimal        133
 F086      31        5485       db     '1'     ; Decimal        134
 F087      31        5486       db     '1'     ; Decimal        135
 F088      31        5487       db     '1'     ; Decimal        136
 F089      31        5488       db     '1'     ; Decimal        137
 F08A      31        5489       db     '1'     ; Decimal        138
 F08B      31        5490       db     '1'     ; Decimal        139
 F08C      31        5491       db     '1'     ; Decimal        140
 F08D      31        5492       db     '1'     ; Decimal        141
 F08E      31        5493       db     '1'     ; Decimal        142
 F08F      31        5494       db     '1'     ; Decimal        143
 F090      31        5495       db     '1'     ; Decimal        144
 F091      31        5496       db     '1'     ; Decimal        145
 F092      31        5497       db     '1'     ; Decimal        146
 F093      31        5498       db     '1'     ; Decimal        147
 F094      31        5499       db     '1'     ; Decimal        148
 F095      31        5500       db     '1'     ; Decimal        149
 F096      31        5501       db     '1'     ; Decimal        150


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 45
MV351WM


 F097      31        5502       db     '1'     ; Decimal        151
 F098      31        5503       db     '1'     ; Decimal        152
 F099      31        5504       db     '1'     ; Decimal        153
 F09A      31        5505       db     '1'     ; Decimal        154
 F09B      31        5506       db     '1'     ; Decimal        155
 F09C      31        5507       db     '1'     ; Decimal        156
 F09D      31        5508       db     '1'     ; Decimal        157
 F09E      31        5509       db     '1'     ; Decimal        158
 F09F      31        5510       db     '1'     ; Decimal        159
 F0A0      31        5511       db     '1'     ; Decimal        160
 F0A1      31        5512       db     '1'     ; Decimal        161
 F0A2      31        5513       db     '1'     ; Decimal        162
 F0A3      31        5514       db     '1'     ; Decimal        163
 F0A4      31        5515       db     '1'     ; Decimal        164
 F0A5      31        5516       db     '1'     ; Decimal        165
 F0A6      31        5517       db     '1'     ; Decimal        166
 F0A7      31        5518       db     '1'     ; Decimal        167
 F0A8      31        5519       db     '1'     ; Decimal        168
 F0A9      31        5520       db     '1'     ; Decimal        169
 F0AA      31        5521       db     '1'     ; Decimal        170
 F0AB      31        5522       db     '1'     ; Decimal        171
 F0AC      31        5523       db     '1'     ; Decimal        172
 F0AD      31        5524       db     '1'     ; Decimal        173
 F0AE      31        5525       db     '1'     ; Decimal        174
 F0AF      31        5526       db     '1'     ; Decimal        175
 F0B0      31        5527       db     '1'     ; Decimal        176
 F0B1      31        5528       db     '1'     ; Decimal        177
 F0B2      31        5529       db     '1'     ; Decimal        178
 F0B3      31        5530       db     '1'     ; Decimal        179
 F0B4      31        5531       db     '1'     ; Decimal        180
 F0B5      31        5532       db     '1'     ; Decimal        181
 F0B6      31        5533       db     '1'     ; Decimal        182
 F0B7      31        5534       db     '1'     ; Decimal        183
 F0B8      31        5535       db     '1'     ; Decimal        184
 F0B9      31        5536       db     '1'     ; Decimal        185
 F0BA      31        5537       db     '1'     ; Decimal        186
 F0BB      31        5538       db     '1'     ; Decimal        187
 F0BC      31        5539       db     '1'     ; Decimal        188
 F0BD      31        5540       db     '1'     ; Decimal        189
 F0BE      31        5541       db     '1'     ; Decimal        190
 F0BF      31        5542       db     '1'     ; Decimal        191
 F0C0      31        5543       db     '1'     ; Decimal        192
 F0C1      31        5544       db     '1'     ; Decimal        193
 F0C2      31        5545       db     '1'     ; Decimal        194
 F0C3      31        5546       db     '1'     ; Decimal        195
 F0C4      31        5547       db     '1'     ; Decimal        196
 F0C5      31        5548       db     '1'     ; Decimal        197
 F0C6      31        5549       db     '1'     ; Decimal        198
 F0C7      31        5550       db     '1'     ; Decimal        199
 F0C8      32        5551       db     '2'     ; Decimal        200
 F0C9      32        5552       db     '2'     ; Decimal        201
 F0CA      32        5553       db     '2'     ; Decimal        202
 F0CB      32        5554       db     '2'     ; Decimal        203
 F0CC      32        5555       db     '2'     ; Decimal        204
 F0CD      32        5556       db     '2'     ; Decimal        205
 F0CE      32        5557       db     '2'     ; Decimal        206
 F0CF      32        5558       db     '2'     ; Decimal        207
 F0D0      32        5559       db     '2'     ; Decimal        208
 F0D1      32        5560       db     '2'     ; Decimal        209
 F0D2      32        5561       db     '2'     ; Decimal        210
 F0D3      32        5562       db     '2'     ; Decimal        211
 F0D4      32        5563       db     '2'     ; Decimal        212
 F0D5      32        5564       db     '2'     ; Decimal        213
 F0D6      32        5565       db     '2'     ; Decimal        214
 F0D7      32        5566       db     '2'     ; Decimal        215
 F0D8      32        5567       db     '2'     ; Decimal        216
 F0D9      32        5568       db     '2'     ; Decimal        217
 F0DA      32        5569       db     '2'     ; Decimal        218
 F0DB      32        5570       db     '2'     ; Decimal        219
 F0DC      32        5571       db     '2'     ; Decimal        220
 F0DD      32        5572       db     '2'     ; Decimal        221
 F0DE      32        5573       db     '2'     ; Decimal        222
 F0DF      32        5574       db     '2'     ; Decimal        223
 F0E0      32        5575       db     '2'     ; Decimal        224
 F0E1      32        5576       db     '2'     ; Decimal        225
 F0E2      32        5577       db     '2'     ; Decimal        226
 F0E3      32        5578       db     '2'     ; Decimal        227
 F0E4      32        5579       db     '2'     ; Decimal        228
 F0E5      32        5580       db     '2'     ; Decimal        229
 F0E6      32        5581       db     '2'     ; Decimal        230
 F0E7      32        5582       db     '2'     ; Decimal        231
 F0E8      32        5583       db     '2'     ; Decimal        232
 F0E9      32        5584       db     '2'     ; Decimal        233
 F0EA      32        5585       db     '2'     ; Decimal        234
 F0EB      32        5586       db     '2'     ; Decimal        235
 F0EC      32        5587       db     '2'     ; Decimal        236
 F0ED      32        5588       db     '2'     ; Decimal        237
 F0EE      32        5589       db     '2'     ; Decimal        238
 F0EF      32        5590       db     '2'     ; Decimal        239
 F0F0      32        5591       db     '2'     ; Decimal        240
 F0F1      32        5592       db     '2'     ; Decimal        241
 F0F2      32        5593       db     '2'     ; Decimal        242
 F0F3      32        5594       db     '2'     ; Decimal        243
 F0F4      32        5595       db     '2'     ; Decimal        244
 F0F5      32        5596       db     '2'     ; Decimal        245
 F0F6      32        5597       db     '2'     ; Decimal        246
 F0F7      32        5598       db     '2'     ; Decimal        247
 F0F8      32        5599       db     '2'     ; Decimal        248
 F0F9      32        5600       db     '2'     ; Decimal        249
 F0FA      32        5601       db     '2'     ; Decimal        250
 F0FB      32        5602       db     '2'     ; Decimal        251
 F0FC      32        5603       db     '2'     ; Decimal        252
 F0FD      32        5604       db     '2'     ; Decimal        253
 F0FE      32        5605       db     '2'     ; Decimal        254
 F0FF      32        5606       db     '2'     ; Decimal        255
                     5607                                        ; 100s column
 F100                5608       include "ASCII_Conv_10.inc"      ; Converts 8 bit value to ASCII,
                     5609  ASCII_CONV_10:
 F100      30        5610       db     '0'     ; Decimal 0
 F101      30        5611       db     '0'     ; Decimal 1
 F102      30        5612       db     '0'     ; Decimal 2
 F103      30        5613       db     '0'     ; Decimal        3
 F104      30        5614       db     '0'     ; Decimal        4
 F105      30        5615       db     '0'     ; Decimal        5
 F106      30        5616       db     '0'     ; Decimal        6
 F107      30        5617       db     '0'     ; Decimal        7
 F108      30        5618       db     '0'     ; Decimal        8
 F109      30        5619       db     '0'     ; Decimal        9
 F10A      31        5620       db     '1'     ; Decimal        10
 F10B      31        5621       db     '1'     ; Decimal        11
 F10C      31        5622       db     '1'     ; Decimal        12
 F10D      31        5623       db     '1'     ; Decimal        13
 F10E      31        5624       db     '1'     ; Decimal        14
 F10F      31        5625       db     '1'     ; Decimal        15
 F110      31        5626       db     '1'     ; Decimal        16
 F111      31        5627       db     '1'     ; Decimal        17
 F112      31        5628       db     '1'     ; Decimal        18
 F113      31        5629       db     '1'     ; Decimal        19
 F114      32        5630       db     '2'     ; Decimal        20
 F115      32        5631       db     '2'     ; Decimal        21
 F116      32        5632       db     '2'     ; Decimal        22
 F117      32        5633       db     '2'     ; Decimal        23
 F118      32        5634       db     '2'     ; Decimal        24
 F119      32        5635       db     '2'     ; Decimal        25
 F11A      32        5636       db     '2'     ; Decimal        26
 F11B      32        5637       db     '2'     ; Decimal        27


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 46
MV351WM


 F11C      32        5638       db     '2'     ; Decimal        28
 F11D      32        5639       db     '2'     ; Decimal        29
 F11E      33        5640       db     '3'     ; Decimal        30
 F11F      33        5641       db     '3'     ; Decimal        31
 F120      33        5642       db     '3'     ; Decimal        32
 F121      33        5643       db     '3'     ; Decimal        33
 F122      33        5644       db     '3'     ; Decimal        34
 F123      33        5645       db     '3'     ; Decimal        35
 F124      33        5646       db     '3'     ; Decimal        36
 F125      33        5647       db     '3'     ; Decimal        37
 F126      33        5648       db     '3'     ; Decimal        38
 F127      33        5649       db     '3'     ; Decimal        39
 F128      34        5650       db     '4'     ; Decimal        40
 F129      34        5651       db     '4'     ; Decimal        41
 F12A      34        5652       db     '4'     ; Decimal        42
 F12B      34        5653       db     '4'     ; Decimal        43
 F12C      34        5654       db     '4'     ; Decimal        44
 F12D      34        5655       db     '4'     ; Decimal        45
 F12E      34        5656       db     '4'     ; Decimal        46
 F12F      34        5657       db     '4'     ; Decimal        47
 F130      34        5658       db     '4'     ; Decimal        48
 F131      34        5659       db     '4'     ; Decimal        49
 F132      35        5660       db     '5'     ; Decimal        50
 F133      35        5661       db     '5'     ; Decimal        51
 F134      35        5662       db     '5'     ; Decimal        52
 F135      35        5663       db     '5'     ; Decimal        53
 F136      35        5664       db     '5'     ; Decimal        54
 F137      35        5665       db     '5'     ; Decimal        55
 F138      35        5666       db     '5'     ; Decimal        56
 F139      35        5667       db     '5'     ; Decimal        57
 F13A      35        5668       db     '5'     ; Decimal        58
 F13B      35        5669       db     '5'     ; Decimal        59
 F13C      36        5670       db     '6'     ; Decimal        60
 F13D      36        5671       db     '6'     ; Decimal        61
 F13E      36        5672       db     '6'     ; Decimal        62
 F13F      36        5673       db     '6'     ; Decimal        63
 F140      36        5674       db     '6'     ; Decimal        64
 F141      36        5675       db     '6'     ; Decimal        65
 F142      36        5676       db     '6'     ; Decimal        66
 F143      36        5677       db     '6'     ; Decimal        67
 F144      36        5678       db     '6'     ; Decimal        68
 F145      36        5679       db     '6'     ; Decimal        69
 F146      37        5680       db     '7'     ; Decimal        70
 F147      37        5681       db     '7'     ; Decimal        71
 F148      37        5682       db     '7'     ; Decimal        72
 F149      37        5683       db     '7'     ; Decimal        73
 F14A      37        5684       db     '7'     ; Decimal        74
 F14B      37        5685       db     '7'     ; Decimal        75
 F14C      37        5686       db     '7'     ; Decimal        76
 F14D      37        5687       db     '7'     ; Decimal        77
 F14E      37        5688       db     '7'     ; Decimal        78
 F14F      37        5689       db     '7'     ; Decimal        79
 F150      38        5690       db     '8'     ; Decimal        80
 F151      38        5691       db     '8'     ; Decimal        81
 F152      38        5692       db     '8'     ; Decimal        82
 F153      38        5693       db     '8'     ; Decimal        83
 F154      38        5694       db     '8'     ; Decimal        84
 F155      38        5695       db     '8'     ; Decimal        85
 F156      38        5696       db     '8'     ; Decimal        86
 F157      38        5697       db     '8'     ; Decimal        87
 F158      38        5698       db     '8'     ; Decimal        88
 F159      38        5699       db     '8'     ; Decimal        89
 F15A      39        5700       db     '9'     ; Decimal        90
 F15B      39        5701       db     '9'     ; Decimal        91
 F15C      39        5702       db     '9'     ; Decimal        92
 F15D      39        5703       db     '9'     ; Decimal        93
 F15E      39        5704       db     '9'     ; Decimal        94
 F15F      39        5705       db     '9'     ; Decimal        95
 F160      39        5706       db     '9'     ; Decimal        96
 F161      39        5707       db     '9'     ; Decimal        97
 F162      39        5708       db     '9'     ; Decimal        98
 F163      39        5709       db     '9'     ; Decimal        99
 F164      30        5710       db     '0'     ; Decimal        100
 F165      30        5711       db     '0'     ; Decimal        101
 F166      30        5712       db     '0'     ; Decimal        102
 F167      30        5713       db     '0'     ; Decimal        103
 F168      30        5714       db     '0'     ; Decimal        104
 F169      30        5715       db     '0'     ; Decimal        105
 F16A      30        5716       db     '0'     ; Decimal        106
 F16B      30        5717       db     '0'     ; Decimal        107
 F16C      30        5718       db     '0'     ; Decimal        108
 F16D      30        5719       db     '0'     ; Decimal        109
 F16E      31        5720       db     '1'     ; Decimal        110
 F16F      31        5721       db     '1'     ; Decimal        111
 F170      31        5722       db     '1'     ; Decimal        112
 F171      31        5723       db     '1'     ; Decimal        113
 F172      31        5724       db     '1'     ; Decimal        114
 F173      31        5725       db     '1'     ; Decimal        115
 F174      31        5726       db     '1'     ; Decimal        116
 F175      31        5727       db     '1'     ; Decimal        117
 F176      31        5728       db     '1'     ; Decimal        118
 F177      31        5729       db     '1'     ; Decimal        119
 F178      32        5730       db     '2'     ; Decimal        120
 F179      32        5731       db     '2'     ; Decimal        121
 F17A      32        5732       db     '2'     ; Decimal        122
 F17B      32        5733       db     '2'     ; Decimal        123
 F17C      32        5734       db     '2'     ; Decimal        124
 F17D      32        5735       db     '2'     ; Decimal        125
 F17E      32        5736       db     '2'     ; Decimal        126
 F17F      32        5737       db     '2'     ; Decimal        127
 F180      32        5738       db     '2'     ; Decimal        128
 F181      32        5739       db     '2'     ; Decimal        129
 F182      33        5740       db     '3'     ; Decimal        130
 F183      33        5741       db     '3'     ; Decimal        131
 F184      33        5742       db     '3'     ; Decimal        132
 F185      33        5743       db     '3'     ; Decimal        133
 F186      33        5744       db     '3'     ; Decimal        134
 F187      33        5745       db     '3'     ; Decimal        135
 F188      33        5746       db     '3'     ; Decimal        136
 F189      33        5747       db     '3'     ; Decimal        137
 F18A      33        5748       db     '3'     ; Decimal        138
 F18B      33        5749       db     '3'     ; Decimal        139
 F18C      34        5750       db     '4'     ; Decimal        140
 F18D      34        5751       db     '4'     ; Decimal        141
 F18E      34        5752       db     '4'     ; Decimal        142
 F18F      34        5753       db     '4'     ; Decimal        143
 F190      34        5754       db     '4'     ; Decimal        144
 F191      34        5755       db     '4'     ; Decimal        145
 F192      34        5756       db     '4'     ; Decimal        146
 F193      34        5757       db     '4'     ; Decimal        147
 F194      34        5758       db     '4'     ; Decimal        148
 F195      34        5759       db     '4'     ; Decimal        149
 F196      35        5760       db     '5'     ; Decimal        150
 F197      35        5761       db     '5'     ; Decimal        151
 F198      35        5762       db     '5'     ; Decimal        152
 F199      35        5763       db     '5'     ; Decimal        153
 F19A      35        5764       db     '5'     ; Decimal        154
 F19B      35        5765       db     '5'     ; Decimal        155
 F19C      35        5766       db     '5'     ; Decimal        156
 F19D      35        5767       db     '5'     ; Decimal        157
 F19E      35        5768       db     '5'     ; Decimal        158
 F19F      35        5769       db     '5'     ; Decimal        159
 F1A0      36        5770       db     '6'     ; Decimal        160
 F1A1      36        5771       db     '6'     ; Decimal        161
 F1A2      36        5772       db     '6'     ; Decimal        162
 F1A3      36        5773       db     '6'     ; Decimal        163


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 47
MV351WM


 F1A4      36        5774       db     '6'     ; Decimal        164
 F1A5      36        5775       db     '6'     ; Decimal        165
 F1A6      36        5776       db     '6'     ; Decimal        166
 F1A7      36        5777       db     '6'     ; Decimal        167
 F1A8      36        5778       db     '6'     ; Decimal        168
 F1A9      36        5779       db     '6'     ; Decimal        169
 F1AA      37        5780       db     '7'     ; Decimal        170
 F1AB      37        5781       db     '7'     ; Decimal        171
 F1AC      37        5782       db     '7'     ; Decimal        172
 F1AD      37        5783       db     '7'     ; Decimal        173
 F1AE      37        5784       db     '7'     ; Decimal        174
 F1AF      37        5785       db     '7'     ; Decimal        175
 F1B0      37        5786       db     '7'     ; Decimal        176
 F1B1      37        5787       db     '7'     ; Decimal        177
 F1B2      37        5788       db     '7'     ; Decimal        178
 F1B3      37        5789       db     '7'     ; Decimal        179
 F1B4      38        5790       db     '8'     ; Decimal        180
 F1B5      38        5791       db     '8'     ; Decimal        181
 F1B6      38        5792       db     '8'     ; Decimal        182
 F1B7      38        5793       db     '8'     ; Decimal        183
 F1B8      38        5794       db     '8'     ; Decimal        184
 F1B9      38        5795       db     '8'     ; Decimal        185
 F1BA      38        5796       db     '8'     ; Decimal        186
 F1BB      38        5797       db     '8'     ; Decimal        187
 F1BC      38        5798       db     '8'     ; Decimal        188
 F1BD      38        5799       db     '8'     ; Decimal        189
 F1BE      39        5800       db     '9'     ; Decimal        190
 F1BF      39        5801       db     '9'     ; Decimal        191
 F1C0      39        5802       db     '9'     ; Decimal        192
 F1C1      39        5803       db     '9'     ; Decimal        193
 F1C2      39        5804       db     '9'     ; Decimal        194
 F1C3      39        5805       db     '9'     ; Decimal        195
 F1C4      39        5806       db     '9'     ; Decimal        196
 F1C5      39        5807       db     '9'     ; Decimal        197
 F1C6      39        5808       db     '9'     ; Decimal        198
 F1C7      39        5809       db     '9'     ; Decimal        199
 F1C8      30        5810       db     '0'     ; Decimal        200
 F1C9      30        5811       db     '0'     ; Decimal        201
 F1CA      30        5812       db     '0'     ; Decimal        202
 F1CB      30        5813       db     '0'     ; Decimal        203
 F1CC      30        5814       db     '0'     ; Decimal        204
 F1CD      30        5815       db     '0'     ; Decimal        205
 F1CE      30        5816       db     '0'     ; Decimal        206
 F1CF      30        5817       db     '0'     ; Decimal        207
 F1D0      30        5818       db     '0'     ; Decimal        208
 F1D1      30        5819       db     '0'     ; Decimal        209
 F1D2      31        5820       db     '1'     ; Decimal        210
 F1D3      31        5821       db     '1'     ; Decimal        211
 F1D4      31        5822       db     '1'     ; Decimal        212
 F1D5      31        5823       db     '1'     ; Decimal        213
 F1D6      31        5824       db     '1'     ; Decimal        214
 F1D7      31        5825       db     '1'     ; Decimal        215
 F1D8      31        5826       db     '1'     ; Decimal        216
 F1D9      31        5827       db     '1'     ; Decimal        217
 F1DA      31        5828       db     '1'     ; Decimal        218
 F1DB      31        5829       db     '1'     ; Decimal        219
 F1DC      32        5830       db     '2'     ; Decimal        220
 F1DD      32        5831       db     '2'     ; Decimal        221
 F1DE      32        5832       db     '2'     ; Decimal        222
 F1DF      32        5833       db     '2'     ; Decimal        223
 F1E0      32        5834       db     '2'     ; Decimal        224
 F1E1      32        5835       db     '2'     ; Decimal        225
 F1E2      32        5836       db     '2'     ; Decimal        226
 F1E3      32        5837       db     '2'     ; Decimal        227
 F1E4      32        5838       db     '2'     ; Decimal        228
 F1E5      32        5839       db     '2'     ; Decimal        229
 F1E6      33        5840       db     '3'     ; Decimal        230
 F1E7      33        5841       db     '3'     ; Decimal        231
 F1E8      33        5842       db     '3'     ; Decimal        232
 F1E9      33        5843       db     '3'     ; Decimal        233
 F1EA      33        5844       db     '3'     ; Decimal        234
 F1EB      33        5845       db     '3'     ; Decimal        235
 F1EC      33        5846       db     '3'     ; Decimal        236
 F1ED      33        5847       db     '3'     ; Decimal        237
 F1EE      33        5848       db     '3'     ; Decimal        238
 F1EF      33        5849       db     '3'     ; Decimal        239
 F1F0      34        5850       db     '4'     ; Decimal        240
 F1F1      34        5851       db     '4'     ; Decimal        241
 F1F2      34        5852       db     '4'     ; Decimal        242
 F1F3      34        5853       db     '4'     ; Decimal        243
 F1F4      34        5854       db     '4'     ; Decimal        244
 F1F5      34        5855       db     '4'     ; Decimal        245
 F1F6      34        5856       db     '4'     ; Decimal        246
 F1F7      34        5857       db     '4'     ; Decimal        247
 F1F8      34        5858       db     '4'     ; Decimal        248
 F1F9      34        5859       db     '4'     ; Decimal        249
 F1FA      35        5860       db     '5'     ; Decimal        250
 F1FB      35        5861       db     '5'     ; Decimal        251
 F1FC      35        5862       db     '5'     ; Decimal        252
 F1FD      35        5863       db     '5'     ; Decimal        253
 F1FE      35        5864       db     '5'     ; Decimal        254
 F1FF      35        5865       db     '5'     ; Decimal        255
                     5866                                        ; 10s column
 F200                5867       include "ASCII_Conv_1.inc"       ; Converts 8 bit value to ASCII,
                     5868  ASCII_CONV_1:
 F200      30        5869       db     '0'     ; Decimal 0
 F201      31        5870       db     '1'     ; Decimal 1
 F202      32        5871       db     '2'     ; Decimal 2
 F203      33        5872       db     '3'     ; Decimal        3
 F204      34        5873       db     '4'     ; Decimal        4
 F205      35        5874       db     '5'     ; Decimal        5
 F206      36        5875       db     '6'     ; Decimal        6
 F207      37        5876       db     '7'     ; Decimal        7
 F208      38        5877       db     '8'     ; Decimal        8
 F209      39        5878       db     '9'     ; Decimal        9
 F20A      30        5879       db     '0'     ; Decimal        10
 F20B      31        5880       db     '1'     ; Decimal        11
 F20C      32        5881       db     '2'     ; Decimal        12
 F20D      33        5882       db     '3'     ; Decimal        13
 F20E      34        5883       db     '4'     ; Decimal        14
 F20F      35        5884       db     '5'     ; Decimal        15
 F210      36        5885       db     '6'     ; Decimal        16
 F211      37        5886       db     '7'     ; Decimal        17
 F212      38        5887       db     '8'     ; Decimal        18
 F213      39        5888       db     '9'     ; Decimal        19
 F214      30        5889       db     '0'     ; Decimal        20
 F215      31        5890       db     '1'     ; Decimal        21
 F216      32        5891       db     '2'     ; Decimal        22
 F217      33        5892       db     '3'     ; Decimal        23
 F218      34        5893       db     '4'     ; Decimal        24
 F219      35        5894       db     '5'     ; Decimal        25
 F21A      36        5895       db     '6'     ; Decimal        26
 F21B      37        5896       db     '7'     ; Decimal        27
 F21C      38        5897       db     '8'     ; Decimal        28
 F21D      39        5898       db     '9'     ; Decimal        29
 F21E      30        5899       db     '0'     ; Decimal        30
 F21F      31        5900       db     '1'     ; Decimal        31
 F220      32        5901       db     '2'     ; Decimal        32
 F221      33        5902       db     '3'     ; Decimal        33
 F222      34        5903       db     '4'     ; Decimal        34
 F223      35        5904       db     '5'     ; Decimal        35
 F224      36        5905       db     '6'     ; Decimal        36
 F225      37        5906       db     '7'     ; Decimal        37
 F226      38        5907       db     '8'     ; Decimal        38
 F227      39        5908       db     '9'     ; Decimal        39
 F228      30        5909       db     '0'     ; Decimal        40


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 48
MV351WM


 F229      31        5910       db     '1'     ; Decimal        41
 F22A      32        5911       db     '2'     ; Decimal        42
 F22B      33        5912       db     '3'     ; Decimal        43
 F22C      34        5913       db     '4'     ; Decimal        44
 F22D      35        5914       db     '5'     ; Decimal        45
 F22E      36        5915       db     '6'     ; Decimal        46
 F22F      37        5916       db     '7'     ; Decimal        47
 F230      38        5917       db     '8'     ; Decimal        48
 F231      39        5918       db     '9'     ; Decimal        49
 F232      30        5919       db     '0'     ; Decimal        50
 F233      31        5920       db     '1'     ; Decimal        51
 F234      32        5921       db     '2'     ; Decimal        52
 F235      33        5922       db     '3'     ; Decimal        53
 F236      34        5923       db     '4'     ; Decimal        54
 F237      35        5924       db     '5'     ; Decimal        55
 F238      36        5925       db     '6'     ; Decimal        56
 F239      37        5926       db     '7'     ; Decimal        57
 F23A      38        5927       db     '8'     ; Decimal        58
 F23B      39        5928       db     '9'     ; Decimal        59
 F23C      30        5929       db     '0'     ; Decimal        60
 F23D      31        5930       db     '1'     ; Decimal        61
 F23E      32        5931       db     '2'     ; Decimal        62
 F23F      33        5932       db     '3'     ; Decimal        63
 F240      34        5933       db     '4'     ; Decimal        64
 F241      35        5934       db     '5'     ; Decimal        65
 F242      36        5935       db     '6'     ; Decimal        66
 F243      37        5936       db     '7'     ; Decimal        67
 F244      38        5937       db     '8'     ; Decimal        68
 F245      39        5938       db     '9'     ; Decimal        69
 F246      30        5939       db     '0'     ; Decimal        70
 F247      31        5940       db     '1'     ; Decimal        71
 F248      32        5941       db     '2'     ; Decimal        72
 F249      33        5942       db     '3'     ; Decimal        73
 F24A      34        5943       db     '4'     ; Decimal        74
 F24B      35        5944       db     '5'     ; Decimal        75
 F24C      36        5945       db     '6'     ; Decimal        76
 F24D      37        5946       db     '7'     ; Decimal        77
 F24E      38        5947       db     '8'     ; Decimal        78
 F24F      39        5948       db     '9'     ; Decimal        79
 F250      30        5949       db     '0'     ; Decimal        80
 F251      31        5950       db     '1'     ; Decimal        81
 F252      32        5951       db     '2'     ; Decimal        82
 F253      33        5952       db     '3'     ; Decimal        83
 F254      34        5953       db     '4'     ; Decimal        84
 F255      35        5954       db     '5'     ; Decimal        85
 F256      36        5955       db     '6'     ; Decimal        86
 F257      37        5956       db     '7'     ; Decimal        87
 F258      38        5957       db     '8'     ; Decimal        88
 F259      39        5958       db     '9'     ; Decimal        89
 F25A      30        5959       db     '0'     ; Decimal        90
 F25B      31        5960       db     '1'     ; Decimal        91
 F25C      32        5961       db     '2'     ; Decimal        92
 F25D      33        5962       db     '3'     ; Decimal        93
 F25E      34        5963       db     '4'     ; Decimal        94
 F25F      35        5964       db     '5'     ; Decimal        95
 F260      36        5965       db     '6'     ; Decimal        96
 F261      37        5966       db     '7'     ; Decimal        97
 F262      38        5967       db     '8'     ; Decimal        98
 F263      39        5968       db     '9'     ; Decimal        99
 F264      30        5969       db     '0'     ; Decimal        100
 F265      31        5970       db     '1'     ; Decimal        101
 F266      32        5971       db     '2'     ; Decimal        102
 F267      33        5972       db     '3'     ; Decimal        103
 F268      34        5973       db     '4'     ; Decimal        104
 F269      35        5974       db     '5'     ; Decimal        105
 F26A      36        5975       db     '6'     ; Decimal        106
 F26B      37        5976       db     '7'     ; Decimal        107
 F26C      38        5977       db     '8'     ; Decimal        108
 F26D      39        5978       db     '9'     ; Decimal        109
 F26E      30        5979       db     '0'     ; Decimal        110
 F26F      31        5980       db     '1'     ; Decimal        111
 F270      32        5981       db     '2'     ; Decimal        112
 F271      33        5982       db     '3'     ; Decimal        113
 F272      34        5983       db     '4'     ; Decimal        114
 F273      35        5984       db     '5'     ; Decimal        115
 F274      36        5985       db     '6'     ; Decimal        116
 F275      37        5986       db     '7'     ; Decimal        117
 F276      38        5987       db     '8'     ; Decimal        118
 F277      39        5988       db     '9'     ; Decimal        119
 F278      30        5989       db     '0'     ; Decimal        120
 F279      31        5990       db     '1'     ; Decimal        121
 F27A      32        5991       db     '2'     ; Decimal        122
 F27B      33        5992       db     '3'     ; Decimal        123
 F27C      34        5993       db     '4'     ; Decimal        124
 F27D      35        5994       db     '5'     ; Decimal        125
 F27E      36        5995       db     '6'     ; Decimal        126
 F27F      37        5996       db     '7'     ; Decimal        127
 F280      38        5997       db     '8'     ; Decimal        128
 F281      39        5998       db     '9'     ; Decimal        129
 F282      30        5999       db     '0'     ; Decimal        130
 F283      31        6000       db     '1'     ; Decimal        131
 F284      32        6001       db     '2'     ; Decimal        132
 F285      33        6002       db     '3'     ; Decimal        133
 F286      34        6003       db     '4'     ; Decimal        134
 F287      35        6004       db     '5'     ; Decimal        135
 F288      36        6005       db     '6'     ; Decimal        136
 F289      37        6006       db     '7'     ; Decimal        137
 F28A      38        6007       db     '8'     ; Decimal        138
 F28B      39        6008       db     '9'     ; Decimal        139
 F28C      30        6009       db     '0'     ; Decimal        140
 F28D      31        6010       db     '1'     ; Decimal        141
 F28E      32        6011       db     '2'     ; Decimal        142
 F28F      33        6012       db     '3'     ; Decimal        143
 F290      34        6013       db     '4'     ; Decimal        144
 F291      35        6014       db     '5'     ; Decimal        145
 F292      36        6015       db     '6'     ; Decimal        146
 F293      37        6016       db     '7'     ; Decimal        147
 F294      38        6017       db     '8'     ; Decimal        148
 F295      39        6018       db     '9'     ; Decimal        149
 F296      30        6019       db     '0'     ; Decimal        150
 F297      31        6020       db     '1'     ; Decimal        151
 F298      32        6021       db     '2'     ; Decimal        152
 F299      33        6022       db     '3'     ; Decimal        153
 F29A      34        6023       db     '4'     ; Decimal        154
 F29B      35        6024       db     '5'     ; Decimal        155
 F29C      36        6025       db     '6'     ; Decimal        156
 F29D      37        6026       db     '7'     ; Decimal        157
 F29E      38        6027       db     '8'     ; Decimal        158
 F29F      39        6028       db     '9'     ; Decimal        159
 F2A0      30        6029       db     '0'     ; Decimal        160
 F2A1      31        6030       db     '1'     ; Decimal        161
 F2A2      32        6031       db     '2'     ; Decimal        162
 F2A3      33        6032       db     '3'     ; Decimal        163
 F2A4      34        6033       db     '4'     ; Decimal        164
 F2A5      35        6034       db     '5'     ; Decimal        165
 F2A6      36        6035       db     '6'     ; Decimal        166
 F2A7      37        6036       db     '7'     ; Decimal        167
 F2A8      38        6037       db     '8'     ; Decimal        168
 F2A9      39        6038       db     '9'     ; Decimal        169
 F2AA      30        6039       db     '0'     ; Decimal        170
 F2AB      31        6040       db     '1'     ; Decimal        171
 F2AC      32        6041       db     '2'     ; Decimal        172
 F2AD      33        6042       db     '3'     ; Decimal        173
 F2AE      34        6043       db     '4'     ; Decimal        174
 F2AF      35        6044       db     '5'     ; Decimal        175
 F2B0      36        6045       db     '6'     ; Decimal        176


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 49
MV351WM


 F2B1      37        6046       db     '7'     ; Decimal        177
 F2B2      38        6047       db     '8'     ; Decimal        178
 F2B3      39        6048       db     '9'     ; Decimal        179
 F2B4      30        6049       db     '0'     ; Decimal        180
 F2B5      31        6050       db     '1'     ; Decimal        181
 F2B6      32        6051       db     '2'     ; Decimal        182
 F2B7      33        6052       db     '3'     ; Decimal        183
 F2B8      34        6053       db     '4'     ; Decimal        184
 F2B9      35        6054       db     '5'     ; Decimal        185
 F2BA      36        6055       db     '6'     ; Decimal        186
 F2BB      37        6056       db     '7'     ; Decimal        187
 F2BC      38        6057       db     '8'     ; Decimal        188
 F2BD      39        6058       db     '9'     ; Decimal        189
 F2BE      30        6059       db     '0'     ; Decimal        190
 F2BF      31        6060       db     '1'     ; Decimal        191
 F2C0      32        6061       db     '2'     ; Decimal        192
 F2C1      33        6062       db     '3'     ; Decimal        193
 F2C2      34        6063       db     '4'     ; Decimal        194
 F2C3      35        6064       db     '5'     ; Decimal        195
 F2C4      36        6065       db     '6'     ; Decimal        196
 F2C5      37        6066       db     '7'     ; Decimal        197
 F2C6      38        6067       db     '8'     ; Decimal        198
 F2C7      39        6068       db     '9'     ; Decimal        199
 F2C8      30        6069       db     '0'     ; Decimal        200
 F2C9      31        6070       db     '1'     ; Decimal        201
 F2CA      32        6071       db     '2'     ; Decimal        202
 F2CB      33        6072       db     '3'     ; Decimal        203
 F2CC      34        6073       db     '4'     ; Decimal        204
 F2CD      35        6074       db     '5'     ; Decimal        205
 F2CE      36        6075       db     '6'     ; Decimal        206
 F2CF      37        6076       db     '7'     ; Decimal        207
 F2D0      38        6077       db     '8'     ; Decimal        208
 F2D1      39        6078       db     '9'     ; Decimal        209
 F2D2      30        6079       db     '0'     ; Decimal        210
 F2D3      31        6080       db     '1'     ; Decimal        211
 F2D4      32        6081       db     '2'     ; Decimal        212
 F2D5      33        6082       db     '3'     ; Decimal        213
 F2D6      34        6083       db     '4'     ; Decimal        214
 F2D7      35        6084       db     '5'     ; Decimal        215
 F2D8      36        6085       db     '6'     ; Decimal        216
 F2D9      37        6086       db     '7'     ; Decimal        217
 F2DA      38        6087       db     '8'     ; Decimal        218
 F2DB      39        6088       db     '9'     ; Decimal        219
 F2DC      30        6089       db     '0'     ; Decimal        220
 F2DD      31        6090       db     '1'     ; Decimal        221
 F2DE      32        6091       db     '2'     ; Decimal        222
 F2DF      33        6092       db     '3'     ; Decimal        223
 F2E0      34        6093       db     '4'     ; Decimal        224
 F2E1      35        6094       db     '5'     ; Decimal        225
 F2E2      36        6095       db     '6'     ; Decimal        226
 F2E3      37        6096       db     '7'     ; Decimal        227
 F2E4      38        6097       db     '8'     ; Decimal        228
 F2E5      39        6098       db     '9'     ; Decimal        229
 F2E6      30        6099       db     '0'     ; Decimal        230
 F2E7      31        6100       db     '1'     ; Decimal        231
 F2E8      32        6101       db     '2'     ; Decimal        232
 F2E9      33        6102       db     '3'     ; Decimal        233
 F2EA      34        6103       db     '4'     ; Decimal        234
 F2EB      35        6104       db     '5'     ; Decimal        235
 F2EC      36        6105       db     '6'     ; Decimal        236
 F2ED      37        6106       db     '7'     ; Decimal        237
 F2EE      38        6107       db     '8'     ; Decimal        238
 F2EF      39        6108       db     '9'     ; Decimal        239
 F2F0      30        6109       db     '0'     ; Decimal        240
 F2F1      31        6110       db     '1'     ; Decimal        241
 F2F2      32        6111       db     '2'     ; Decimal        242
 F2F3      33        6112       db     '3'     ; Decimal        243
 F2F4      34        6113       db     '4'     ; Decimal        244
 F2F5      35        6114       db     '5'     ; Decimal        245
 F2F6      36        6115       db     '6'     ; Decimal        246
 F2F7      37        6116       db     '7'     ; Decimal        247
 F2F8      38        6117       db     '8'     ; Decimal        248
 F2F9      39        6118       db     '9'     ; Decimal        249
 F2FA      30        6119       db     '0'     ; Decimal        250
 F2FB      31        6120       db     '1'     ; Decimal        251
 F2FC      32        6121       db     '2'     ; Decimal        252
 F2FD      33        6122       db     '3'     ; Decimal        253
 F2FE      34        6123       db     '4'     ; Decimal        254
 F2FF      35        6124       db     '5'     ; Decimal        255
                     6125                                        ; 1s column
 F300                6126       include "DIYWBlambda.inc"        ; Converts WB O2 sensor voltage Raw
                     6127  ; Generated using: blood, sweat and tears
                     6128  ; TechEdge WBo2 SVOUT to Lambda, Motorola version
                     6129  ; davidh 2 March 04
                     6130  ; Modified for MV300,MV460,MV351WM R Hiebert 11/26/10
                     6131  
                     6132  DIYWBLAMBDA:
                     6133  ;      DB    Lambda x 10      ;        ADC      VOUT
 F300      3C        6134         DB        60T  ;         0         0.0
 F301      3C        6135          DB      60T      ;       1       0.019607843
 F302      3C        6136          DB      60T      ;       2       0.039215686
 F303      3C        6137         DB        60T  ;         3       0.058823529
 F304      3C        6138          DB      60T      ;       4       0.078431373
 F305      3C        6139          DB      60T      ;       5       0.098039216
 F306      3C        6140          DB      60T      ;       6       0.117647059
 F307      3C        6141          DB      60T      ;       7       0.137254902
 F308      3C        6142          DB      60T      ;       8       0.156862745
 F309      3C        6143          DB      60T      ;       9       0.176470588
 F30A      3C        6144          DB      60T      ;       10      0.196078431
 F30B      3C        6145          DB      60T      ;       11      0.215686275
 F30C      3C        6146          DB      60T      ;       12      0.235294118
 F30D      3C        6147          DB      60T      ;       13      0.254901961
 F30E      3C        6148          DB      60T      ;       14      0.274509804
 F30F      3C        6149          DB      60T      ;       15      0.294117647
 F310      3C        6150          DB      60T      ;       16      0.31372549
 F311      3C        6151          DB      60T      ;       17      0.333333333
 F312      3C        6152          DB      60T      ;       18      0.352941176
 F313      3C        6153          DB      60T      ;       19      0.37254902
 F314      3C        6154          DB      60T      ;       20      0.392156863
 F315      3C        6155          DB      60T      ;       21      0.411764706
 F316      3C        6156          DB      60T      ;       22      0.431372549
 F317      3C        6157          DB      60T      ;       23      0.450980392
 F318      3C        6158          DB      60T      ;       24      0.470588235
 F319      3C        6159          DB      60T      ;       25      0.490196078
 F31A      3C        6160          DB      60T      ;       26      0.509803922
 F31B      3C        6161          DB      60T      ;       27      0.529411765
 F31C      3C        6162          DB      60T      ;       28      0.549019608
 F31D      3C        6163          DB      60T      ;       29      0.568627451
 F31E      3C        6164          DB      60T      ;       30      0.588235294
 F31F      3C        6165          DB      60T      ;       31      0.607843137
 F320      3C        6166          DB      60T      ;       32      0.62745098
 F321      3C        6167          DB      60T      ;       33      0.647058824
 F322      3C        6168          DB      60T      ;       34      0.666666667
 F323      3C        6169          DB      60T      ;       35      0.68627451
 F324      3C        6170          DB      60T      ;       36      0.705882353
 F325      3C        6171          DB      60T      ;       37      0.725490196
 F326      3C        6172          DB      60T      ;       38      0.745098039
 F327      3C        6173          DB      60T      ;       39      0.764705882
 F328      3C        6174          DB      60T      ;       40      0.784313725
 F329      3C        6175          DB      60T      ;       41      0.803921569
 F32A      3C        6176          DB      60T      ;       42      0.823529412
 F32B      3C        6177          DB      60T      ;       43      0.843137255
 F32C      3C        6178          DB      60T      ;       44      0.862745098
 F32D      3C        6179          DB      60T      ;       45      0.882352941
 F32E      3C        6180          DB      60T      ;       46      0.901960784
 F32F      3C        6181          DB      60T      ;       47      0.921568627


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 50
MV351WM


 F330      3C        6182          DB      60T      ;       48      0.941176471
 F331      3C        6183          DB      60T      ;       49      0.960784314
 F332      3C        6184          DB      60T      ;       50      0.980392157
 F333      3C        6185         DB        60T  ;         51        1.0
 F334      3C        6186          DB      60T      ;       52      1.019607843
 F335      3D        6187          DB      61T      ;       53      1.039215686
 F336      3E        6188          DB      62T      ;       54      1.058823529
 F337      3E        6189          DB      62T      ;       55      1.078431373
 F338      3E        6190          DB      62T      ;       56      1.098039216
 F339      3F        6191          DB      63T      ;       57      1.117647059
 F33A      3F        6192          DB      63T      ;       58      1.137254902
 F33B      40        6193          DB      64T      ;       59      1.156862745
 F33C      40        6194          DB      64T      ;       60      1.176470588
 F33D      40        6195          DB      64T      ;       61      1.196078431
 F33E      41        6196          DB      65T      ;       62      1.215686275
 F33F      41        6197          DB      65T      ;       63      1.235294118
 F340      42        6198          DB      66T      ;       64      1.254901961
 F341      42        6199          DB      66T      ;       65      1.274509804
 F342      42        6200          DB      66T      ;       66      1.294117647
 F343      43        6201          DB      67T      ;       67      1.31372549
 F344      43        6202          DB      67T      ;       68      1.333333333
 F345      44        6203          DB      68T      ;       69      1.352941176
 F346      44        6204          DB      68T      ;       70      1.37254902
 F347      44        6205          DB      68T      ;       71      1.392156863
 F348      45        6206          DB      69T      ;       72      1.411764706
 F349      45        6207          DB      69T      ;       73      1.431372549
 F34A      46        6208          DB      70T      ;       74      1.450980392
 F34B      46        6209          DB      70T      ;       75      1.470588235
 F34C      46        6210          DB      70T      ;       76      1.490196078
 F34D      47        6211          DB      71T      ;       77      1.509803922
 F34E      47        6212          DB      71T      ;       78      1.529411765
 F34F      48        6213          DB      72T      ;       79      1.549019608
 F350      48        6214          DB      72T      ;       80      1.568627451
 F351      48        6215          DB      72T      ;       81      1.588235294
 F352      49        6216          DB      73T      ;       82      1.607843137
 F353      49        6217          DB      73T      ;       83      1.62745098
 F354      4A        6218          DB      74T      ;       84      1.647058824
 F355      4A        6219          DB      74T      ;       85      1.666666667
 F356      4B        6220          DB      75T      ;       86      1.68627451
 F357      4B        6221          DB      75T      ;       87      1.705882353
 F358      4C        6222          DB      76T      ;       88      1.725490196
 F359      4C        6223          DB      76T      ;       89      1.745098039
 F35A      4D        6224          DB      77T      ;       90      1.764705882
 F35B      4D        6225          DB      77T      ;       91      1.784313725
 F35C      4E        6226          DB      78T      ;       92      1.803921569
 F35D      4E        6227          DB      78T      ;       93      1.823529412
 F35E      4F        6228          DB      79T      ;       94      1.843137255
 F35F      4F        6229          DB      79T      ;       95      1.862745098
 F360      50        6230          DB      80T      ;       96      1.882352941
 F361      50        6231          DB      80T      ;       97      1.901960784
 F362      51        6232          DB      81T      ;       98      1.921568627
 F363      51        6233          DB      81T      ;       99      1.941176471
 F364      52        6234          DB      82T      ;       100      1.960784314
 F365      52        6235          DB      82T      ;       101      1.980392157
 F366      53        6236         DB        83T  ;         102  2.0
 F367      53        6237          DB      83T      ;       103      2.019607843
 F368      54        6238          DB      84T      ;       104      2.039215686
 F369      54        6239          DB      84T      ;       105      2.058823529
 F36A      55        6240          DB      85T      ;       106      2.078431373
 F36B      56        6241          DB      86T      ;       107      2.098039216
 F36C      56        6242          DB      86T      ;       108      2.117647059
 F36D      57        6243          DB      87T      ;       109      2.137254902
 F36E      57        6244          DB      87T      ;       110      2.156862745
 F36F      58        6245          DB      88T      ;       111      2.176470588
 F370      59        6246          DB      89T      ;       112      2.196078431
 F371      59        6247          DB      89T      ;       113      2.215686275
 F372      5A        6248          DB      90T      ;       114      2.235294118
 F373      5B        6249          DB      91T      ;       115      2.254901961
 F374      5B        6250          DB      91T      ;       116      2.274509804
 F375      5C        6251          DB      92T      ;       117      2.294117647
 F376      5D        6252          DB      93T      ;       118      2.31372549
 F377      5E        6253          DB      94T      ;       119      2.333333333
 F378      5E        6254          DB      94T      ;       120      2.352941176
 F379      5F        6255          DB      95T      ;       121      2.37254902
 F37A      60        6256          DB      96T      ;       122      2.392156863
 F37B      60        6257          DB      96T      ;       123      2.411764706
 F37C      61        6258          DB      97T      ;       124      2.431372549
 F37D      62        6259          DB      98T      ;       125      2.450980392
 F37E      63        6260          DB      99T      ;       126      2.470588235
 F37F      64        6261          DB      100T      ;       127      2.490196078
 F380      65        6262          DB      101T      ;       128      2.509803922
 F381      66        6263          DB      102T      ;       129      2.529411765
 F382      68        6264          DB      104T      ;       130      2.549019608
 F383      69        6265          DB      105T      ;       131      2.568627451
 F384      6B        6266          DB      107T      ;       132      2.588235294
 F385      6C        6267          DB      108T      ;       133      2.607843137
 F386      6E        6268          DB      110T      ;       134      2.62745098
 F387      70        6269          DB      112T      ;       135      2.647058824
 F388      72        6270          DB      114T      ;       136      2.666666667
 F389      74        6271          DB      116T      ;       137      2.68627451
 F38A      75        6272          DB      117T      ;       138      2.705882353
 F38B      77        6273          DB      119T      ;       139      2.725490196
 F38C      79        6274          DB      121T      ;       140      2.745098039
 F38D      7C        6275          DB      124T      ;       141      2.764705882
 F38E      7E        6276          DB      126T      ;       142      2.784313725
 F38F      80        6277          DB      128T      ;       143      2.803921569
 F390      82        6278          DB      130T      ;       144      2.823529412
 F391      85        6279          DB      133T      ;       145      2.843137255
 F392      87        6280          DB      135T      ;       146      2.862745098
 F393      89        6281          DB      137T      ;       147      2.882352941
 F394      8C        6282          DB      140T      ;       148      2.901960784
 F395      8F        6283          DB      143T      ;       149      2.921568627
 F396      92        6284          DB      146T      ;       150      2.941176471
 F397      95        6285          DB      149T      ;       151      2.960784314
 F398      98        6286          DB      152T      ;       152      2.980392157
 F399      9B        6287         DB        155T          ;         153          3.0
 F39A      9F        6288          DB      159T      ;       154      3.019607843
 F39B      A2        6289          DB      162T      ;       155      3.039215686
 F39C      A6        6290          DB      166T      ;       156      3.058823529
 F39D      AA        6291          DB      170T      ;       157      3.078431373 afr x 10 calculation limit
 F39E      AA        6292          DB      170T      ;       158      3.098039216
 F39F      AA        6293          DB      170T      ;       159      3.117647059
 F3A0      AA        6294          DB      170T      ;       160      3.137254902
 F3A1      AA        6295          DB      170T      ;       161      3.156862745
 F3A2      AA        6296          DB      170T      ;       162      3.176470588
 F3A3      AA        6297          DB      170T      ;       163      3.196078431
 F3A4      AA        6298          DB      170T      ;       164      3.215686275
 F3A5      AA        6299          DB      170T      ;       165      3.235294118
 F3A6      AA        6300          DB      170T      ;       166      3.254901961
 F3A7      AA        6301          DB      170T      ;       167      3.274509804
 F3A8      AA        6302          DB      170T      ;       168      3.294117647
 F3A9      AA        6303          DB      170T      ;       169      3.31372549
 F3AA      AA        6304          DB      170T      ;       170      3.333333333
 F3AB      AA        6305          DB      170T      ;       171      3.352941176
 F3AC      AA        6306          DB      170T      ;       172      3.37254902
 F3AD      AA        6307          DB      170T      ;       173      3.392156863
 F3AE      AA        6308          DB      170T      ;       174      3.411764706
 F3AF      AA        6309          DB      170T      ;       175      3.431372549
 F3B0      AA        6310          DB      170T      ;       176      3.450980392
 F3B1      AA        6311          DB      170T      ;       177      3.470588235
 F3B2      AA        6312          DB      170T      ;       178      3.490196078
 F3B3      AA        6313          DB      170T      ;       179      3.509803922
 F3B4      AA        6314          DB      170T      ;       180      3.529411765
 F3B5      AA        6315          DB      170T      ;       181      3.549019608
 F3B6      AA        6316          DB      170T      ;       182      3.568627451
 F3B7      AA        6317          DB      170T      ;       183      3.588235294


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 51
MV351WM


 F3B8      AA        6318          DB      170T      ;       184      3.607843137
 F3B9      AA        6319          DB      170T      ;       185      3.62745098
 F3BA      AA        6320          DB      170T      ;       186      3.647058824
 F3BB      AA        6321          DB      170T      ;       187      3.666666667
 F3BC      AA        6322          DB      170T      ;       188      3.68627451
 F3BD      AA        6323          DB      170T      ;       189      3.705882353
 F3BE      AA        6324          DB      170T      ;       190      3.725490196
 F3BF      AA        6325          DB      170T      ;       191      3.745098039
 F3C0      AA        6326          DB      170T      ;       192      3.764705882
 F3C1      AA        6327          DB      170T      ;       193      3.784313725
 F3C2      AA        6328          DB      170T      ;       194      3.803921569
 F3C3      AA        6329          DB      170T      ;       195      3.823529412
 F3C4      AA        6330          DB      170T      ;       196      3.843137255
 F3C5      AA        6331          DB      170T      ;       197      3.862745098
 F3C6      AA        6332          DB      170T      ;       198      3.882352941
 F3C7      AA        6333          DB      170T      ;       199      3.901960784
 F3C8      AA        6334          DB      170T      ;       200      3.921568627
 F3C9      AA        6335          DB      170T      ;       201      3.941176471
 F3CA      AA        6336          DB      170T      ;       202      3.960784314
 F3CB      AA        6337          DB      170T      ;       203      3.980392157
 F3CC      AA        6338         DB      170T    ;         204  4.0
 F3CD      AA        6339          DB      170T      ;       205      4.019607843
 F3CE      AA        6340          DB      170T      ;       206      4.039215686
 F3CF      AA        6341          DB      170T      ;       207      4.058823529
 F3D0      AA        6342          DB      170T      ;       208      4.078431373
 F3D1      AA        6343          DB      170T      ;       209      4.098039216
 F3D2      AA        6344          DB      170T      ;       210      4.117647059
 F3D3      AA        6345          DB      170T      ;       211      4.137254902
 F3D4      AA        6346          DB      170T      ;       212      4.156862745
 F3D5      AA        6347          DB      170T      ;       213      4.176470588
 F3D6      AA        6348          DB      170T      ;       214      4.196078431
 F3D7      AA        6349          DB      170T      ;       215      4.215686275
 F3D8      AA        6350          DB      170T      ;       216      4.235294118
 F3D9      AA        6351          DB      170T      ;       217      4.254901961
 F3DA      AA        6352          DB      170T      ;       218      4.274509804
 F3DB      AA        6353          DB      170T      ;       219      4.294117647
 F3DC      AA        6354          DB      170T      ;       220      4.31372549
 F3DD      AA        6355          DB      170T      ;       221      4.333333333
 F3DE      AA        6356          DB      170T      ;       222      4.352941176
 F3DF      AA        6357          DB      170T      ;       223      4.37254902
 F3E0      AA        6358          DB      170T      ;       224      4.392156863
 F3E1      AA        6359          DB      170T      ;       225      4.411764706
 F3E2      AA        6360          DB      170T      ;       226      4.431372549
 F3E3      AA        6361          DB      170T      ;       227      4.450980392
 F3E4      AA        6362          DB      170T      ;       228      4.470588235
 F3E5      AA        6363          DB      170T      ;       229      4.490196078
 F3E6      AA        6364          DB      170T      ;       230      4.509803922
 F3E7      AA        6365          DB      170T      ;       231      4.529411765
 F3E8      AA        6366          DB      170T      ;       232      4.549019608
 F3E9      AA        6367          DB      170T      ;       233      4.568627451
 F3EA      AA        6368          DB      170T      ;       234      4.588235294
 F3EB      AA        6369          DB      170T      ;       235      4.607843137
 F3EC      AA        6370          DB      170T      ;       236      4.62745098
 F3ED      AA        6371          DB      170T      ;       237      4.647058824
 F3EE      AA        6372          DB      170T      ;       238      4.666666667
 F3EF      AA        6373          DB      170T      ;       239      4.68627451
 F3F0      AA        6374          DB      170T      ;       240      4.705882353
 F3F1      AA        6375          DB      170T      ;       241      4.725490196
 F3F2      AA        6376          DB      170T      ;       242      4.745098039
 F3F3      AA        6377          DB      170T      ;       243      4.764705882
 F3F4      AA        6378          DB      170T      ;       244      4.784313725
 F3F5      AA        6379          DB      170T      ;       245      4.803921569
 F3F6      AA        6380          DB      170T      ;       246      4.823529412
 F3F7      AA        6381          DB      170T      ;       247      4.843137255
 F3F8      AA        6382          DB      170T      ;       248      4.862745098
 F3F9      AA        6383          DB      170T      ;       249      4.882352941
 F3FA      AA        6384          DB      170T      ;       250      4.901960784
 F3FB      AA        6385          DB      170T      ;       251      4.921568627
 F3FC      AA        6386          DB      170T      ;       252      4.941176471
 F3FD      AA        6387          DB      170T      ;       253      4.960784314
 F3FE      AA        6388          DB      170T      ;       254      4.980392157
 F3FF      AA        6389         DB        170T          ;       255    5.0
                     6390                                        ; Reading to Lambda * 10
 F400                6391       include "kpafactor4250rjh.inc"   ; Converts mapADC and baroADC
                     6392  KPAFACTOR4250rjh:
 F400      64        6393          DB      100T     ; x=000;=0.000v;sensor failure
 F401      0B        6394          DB      11T      ; x=001;=0.020v
 F402      0C        6395          DB      12T      ; x=002;=0.039v
 F403      0D        6396          DB      13T      ; x=003;=0.059v
 F404      0E        6397          DB      14T      ; x=004;=0.078v
 F405      0F        6398          DB      15T      ; x=005;=0.098v
 F406      10        6399          DB      16T      ; x=006;=0.118v
 F407      11        6400          DB      17T      ; x=007;=0.137v
 F408      12        6401          DB      18T      ; x=008;=0.157v
 F409      13        6402          DB      19T      ; x=009;=0.176v
 F40A      14        6403          DB      20T      ; x=010;=0.196v
 F40B      15        6404          DB      21T      ; x=011;=0.216v
 F40C      16        6405          DB      22T      ; x=012;=0.235v
 F40D      17        6406          DB      23T      ; x=013;=0.255v
 F40E      18        6407          DB      24T      ; x=014;=0.275v
 F40F      19        6408          DB      25T      ; x=015;=0.294v
 F410      1A        6409          DB      26T      ; x=016;=0.314v
 F411      1B        6410          DB      27T      ; x=017;=0.333v
 F412      1C        6411          DB      28T      ; x=018;=0.353v
 F413      1D        6412          DB      29T      ; x=019;=0.373v
 F414      1E        6413          DB      30T      ; x=020;=0.392v
 F415      1F        6414          DB      31T      ; x=021;=0.412v
 F416      20        6415          DB      32T      ; x=022;=0.431v
 F417      21        6416          DB      33T      ; x=023;=0.451v
 F418      22        6417          DB      34T      ; x=024;=0.471v
 F419      23        6418          DB      35T      ; x=025;=0.490v
 F41A      23        6419          DB      35T      ; x=026;=0.510v
 F41B      24        6420          DB      36T      ; x=027;=0.529v
 F41C      25        6421          DB      37T      ; x=028;=0.549v
 F41D      26        6422          DB      38T      ; x=029;=0.569v
 F41E      27        6423          DB      39T      ; x=030;=0.588v
 F41F      28        6424          DB      40T      ; x=031;=0.608v
 F420      29        6425          DB      41T      ; x=032;=0.627v
 F421      2A        6426          DB      42T      ; x=033;=0.647v
 F422      2B        6427          DB      43T      ; x=034;=0.667v
 F423      2C        6428          DB      44T      ; x=035;=0.686v
 F424      2D        6429          DB      45T      ; x=036;=0.706v
 F425      2E        6430          DB      46T      ; x=037;=0.725v
 F426      2F        6431          DB      47T      ; x=038;=0.745v
 F427      30        6432          DB      48T      ; x=039;=0.765v
 F428      31        6433          DB      49T      ; x=040;=0.784v
 F429      32        6434          DB      50T      ; x=041;=0.804v
 F42A      33        6435          DB      51T      ; x=042;=0.824v
 F42B      34        6436          DB      52T      ; x=043;=0.843v
 F42C      35        6437          DB      53T      ; x=044;=0.863v
 F42D      36        6438          DB      54T      ; x=045;=0.882v
 F42E      37        6439          DB      55T      ; x=046;=0.902v
 F42F      38        6440          DB      56T      ; x=047;=0.922v
 F430      39        6441          DB      57T      ; x=048;=0.941v
 F431      3A        6442          DB      58T      ; x=049;=0.961v
 F432      3B        6443          DB      59T      ; x=050;=0.980v
 F433      3C        6444          DB      60T      ; x=051;=1.000v
 F434      3D        6445          DB      61T      ; x=052;=1.020v
 F435      3E        6446          DB      62T      ; x=053;=1.039v
 F436      3F        6447          DB      63T      ; x=054;=1.059v
 F437      40        6448          DB      64T      ; x=055;=1.078v
 F438      41        6449          DB      65T      ; x=056;=1.096v
 F439      42        6450          DB      66T      ; x=057;=1.118v
 F43A      43        6451          DB      67T      ; x=058;=1.137v
 F43B      44        6452          DB      68T      ; x=059;=1.157v
 F43C      45        6453          DB      69T      ; x=060;=1.176v


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 52
MV351WM


 F43D      46        6454          DB      70T      ; x=061;=1,196v
 F43E      47        6455          DB      71T      ; x=062;=1,216v
 F43F      48        6456          DB      72T      ; x=063;=1.235v
 F440      49        6457          DB      73T      ; x=064;=1.255v
 F441      4A        6458          DB      74T      ; x=065;=1.275v
 F442      4B        6459          DB      75T      ; x=066;=1.294v
 F443      4C        6460          DB      76T      ; x=067;=1.314v
 F444      4D        6461          DB      77T      ; x=068;=1.333v
 F445      4E        6462          DB      78T      ; x=069;=1.353v
 F446      4F        6463          DB      79T      ; x=070;=1.373v
 F447      50        6464          DB      80T      ; x=071;=1.392v
 F448      51        6465          DB      81T      ; x=072;=1.412v
 F449      52        6466          DB      82T      ; x=073;=1.431v
 F44A      53        6467          DB      83T      ; x=074;=1.451v
 F44B      54        6468          DB      84T      ; x=075;=1.471v
 F44C      55        6469          DB      85T      ; x=076;=1.490v
 F44D      55        6470          DB      85T      ; x=077;=1.510v
 F44E      56        6471          DB      86T      ; x=078;=1.529v
 F44F      57        6472          DB      87T      ; x=079;=1.549v
 F450      58        6473          DB      88T      ; x=080;=1.569v
 F451      59        6474          DB      89T      ; x=081;=1.588v
 F452      5A        6475          DB      90T      ; x=082;=1.608v
 F453      5B        6476          DB      91T      ; x=083;=1.627v
 F454      5C        6477          DB      92T      ; x=084;=1.647v
 F455      5D        6478          DB      93T      ; x=085;=1.667v
 F456      5E        6479          DB      94T      ; x=086;=1.686v
 F457      5F        6480          DB      95T      ; x=087;=1.706v
 F458      60        6481          DB      96T      ; x=088;=1.725v
 F459      61        6482          DB      97T      ; x=089;=1.745v
 F45A      62        6483          DB      98T      ; x=090;=1.765v
 F45B      63        6484          DB      99T      ; x=091;=1.784v
 F45C      64        6485          DB      100T     ; x=092;=1.804v
 F45D      65        6486          DB      101T     ; x=093;=1.824v
 F45E      66        6487          DB      102T     ; x=094;=1.843v
 F45F      67        6488          DB      103T     ; x=095;=1.863v
 F460      68        6489          DB      104T     ; x=096;=1.882v
 F461      69        6490          DB      105T     ; x=097;=1.902v
 F462      6A        6491          DB      106T     ; x=098;=1.922v
 F463      6B        6492          DB      107T     ; x=099;=1.941v
 F464      6C        6493          DB      108T     ; x=100;=1.961v
 F465      6D        6494          DB      109T     ; x=101;=1.980v
 F466      6E        6495          DB      110T     ; x=102;=2.000v
 F467      6F        6496          DB      111T     ; x=103;=2.020v
 F468      70        6497          DB      112T     ; x=104;=2.039v
 F469      71        6498          DB      113T     ; x=105;=2.059v
 F46A      72        6499          DB      114T     ; x=106;=2.078v
 F46B      73        6500          DB      115T     ; x=107;=2.098v
 F46C      74        6501          DB      116T     ; x=108;=2.118v
 F46D      75        6502          DB      117T     ; x=109;=2.137v
 F46E      76        6503          DB      118T     ; x=110;=2.157v
 F46F      77        6504          DB      119T     ; x=111;=2.176v
 F470      78        6505          DB      120T     ; x=112;=2.196v
 F471      79        6506          DB      121T     ; x=113;=2.216v
 F472      7A        6507          DB      122T     ; x=114;=2.235v
 F473      7B        6508          DB      123T     ; x=115;=2.255v
 F474      7C        6509          DB      124T     ; x=116;=2.275v
 F475      7D        6510          DB      125T     ; x=117;=2.294v
 F476      7E        6511          DB      126T     ; x=118;=2.314v
 F477      7F        6512          DB      127T     ; x=119;=2.333v
 F478      80        6513          DB      128T     ; x=120;=2.353v
 F479      81        6514          DB      129T     ; x=121;=2.373v
 F47A      82        6515          DB      130T     ; x=122;=2.392v
 F47B      83        6516          DB      131T     ; x=123;=2.412v
 F47C      84        6517          DB      132T     ; x=124;=2.431v
 F47D      85        6518          DB      133T     ; x=125;=2.451v
 F47E      86        6519          DB      134T     ; x=126;=2.471v
 F47F      87        6520          DB      135T     ; x=127;=2.490v
 F480      87        6521          DB      135T     ; x=128;=2.510v
 F481      88        6522          DB      136T     ; x=129;=2.529v
 F482      89        6523          DB      137T     ; x=130,=2.549v
 F483      8A        6524          DB      138T     ; x=131;=2.569v
 F484      8B        6525          DB      139T     ; x=132;=2.588v
 F485      8C        6526          DB      140T     ; x=133;=2.608v
 F486      8D        6527          DB      141T     ; x=134;=2.627v
 F487      8E        6528          DB      142T     ; x=135;=2.647v
 F488      8F        6529          DB      143T     ; x=136;=2.667v
 F489      90        6530          DB      144T     ; x=137;=2.686v
 F48A      91        6531          DB      145T     ; x=138;=2.706v
 F48B      92        6532          DB      146T     ; x=139;=2.725v
 F48C      93        6533          DB      147T     ; x=140;=2.745v
 F48D      94        6534          DB      148T     ; x=141;=2.765v
 F48E      95        6535          DB      149T     ; x=142;=2.784v
 F48F      96        6536          DB      150T     ; x=143;=2.804v
 F490      97        6537          DB      151T     ; x=144;=0.824v
 F491      98        6538          DB      152T     ; x=145;=2.843v
 F492      99        6539          DB      153T     ; x=146;=2.863v
 F493      9A        6540          DB      154T     ; x=147;=2.882v
 F494      9B        6541          DB      155T     ; x=148;=2.902v
 F495      9C        6542          DB      156T     ; x=149;=2.922v
 F496      9D        6543          DB      157T     ; x=150;=2.941v
 F497      9E        6544          DB      158T     ; x=151;=2.961v
 F498      9F        6545          DB      159T     ; x=152;=2.980v
 F499      A0        6546          DB      160T     ; x=153;=3.000v
 F49A      A1        6547          DB      161T     ; x=154;=3.020v
 F49B      A2        6548          DB      162T     ; x=155;=3.039v
 F49C      A3        6549          DB      163T     ; x=156;=3.059v
 F49D      A4        6550          DB      164T     ; x=157;=3.078v
 F49E      A5        6551          DB      165T     ; x=158;=3.098v
 F49F      A6        6552          DB      166T     ; x=159;=3.118v
 F4A0      A7        6553          DB      167T     ; x=160;=3.137v
 F4A1      A8        6554          DB      168T     ; x=161;=3.157v
 F4A2      A9        6555          DB      169T     ; x=162;=3.176v
 F4A3      AA        6556          DB      170T     ; x=163;=3.196v
 F4A4      AB        6557          DB      171T     ; x=164;=3.216v
 F4A5      AC        6558          DB      172T     ; x=165;=3.235v
 F4A6      AD        6559          DB      173T     ; x=166;=3.255v
 F4A7      AE        6560          DB      174T     ; x=167;=3.275v
 F4A8      AF        6561          DB      175T     ; x=168;=3.294v
 F4A9      B0        6562          DB      176T     ; x=169;=3.314v
 F4AA      B1        6563          DB      177T     ; x=170;=3.333v
 F4AB      B2        6564          DB      178T     ; x=171;=3.353v
 F4AC      B3        6565          DB      179T     ; x=172;=3.373v
 F4AD      B4        6566          DB      180T     ; x=173;=3.392v
 F4AE      B5        6567          DB      181T     ; x=174;=3.412v
 F4AF      B6        6568          DB      182T     ; x=175;=3.431v
 F4B0      B7        6569          DB      183T     ; x=176;=3.451v
 F4B1      B8        6570          DB      184T     ; x=177;=3.471v
 F4B2      B9        6571          DB      185T     ; x=178;=3.490v
 F4B3      B9        6572          DB      185T     ; x=179;=3.510v
 F4B4      BA        6573          DB      186T     ; x=180;=3.529v
 F4B5      BB        6574          DB      187T     ; x=181;=3.549v
 F4B6      BC        6575          DB      188T     ; x=182;=3.569v
 F4B7      BD        6576          DB      189T     ; x=183;=3.588v
 F4B8      BE        6577          DB      190T     ; x=184;=3.608v
 F4B9      BF        6578          DB      191T     ; x=185;=3.627v
 F4BA      C0        6579          DB      192T     ; x=186;=3.647v
 F4BB      C1        6580          DB      193T     ; x=187;=3.667v
 F4BC      C2        6581          DB      194T     ; x=188;=3.686v
 F4BD      C3        6582          DB      195T     ; x=189;=3.706v
 F4BE      C4        6583          DB      196T     ; x=190;=3.725v
 F4BF      C5        6584          DB      197T     ; x=191;=3.745v
 F4C0      C6        6585          DB      198T     ; x=192;=3.765v
 F4C1      C7        6586          DB      199T     ; x=193;=3.784v
 F4C2      C8        6587          DB      200T     ; x=194;=3.804v
 F4C3      C9        6588          DB      201T     ; x=195;=3.824v
 F4C4      CA        6589          DB      202T     ; x=196;=3.843v


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 53
MV351WM


 F4C5      CB        6590          DB      203T     ; x=197;=3.863v
 F4C6      CC        6591          DB      204T     ; x=198;=3.882v
 F4C7      CD        6592          DB      205T     ; x=199;=3.902v
 F4C8      CE        6593          DB      206T     ; x=200;=3.922v
 F4C9      CF        6594          DB      207T     ; x=201;=3.941v
 F4CA      D0        6595          DB      208T     ; x=202;=3.961v
 F4CB      D1        6596          DB      209T     ; x=203;=3.980v
 F4CC      D2        6597          DB      210T     ; x=204;=4.000v
 F4CD      D3        6598          DB      211T     ; x=205;=4.020v
 F4CE      D4        6599          DB      212T     ; x=206;=4.039v
 F4CF      D5        6600          DB      213T     ; x=207;=4.059v
 F4D0      D6        6601          DB      214T     ; x=208;=4.078v
 F4D1      D7        6602          DB      215T     ; x=209;=4.098v
 F4D2      D8        6603          DB      216T     ; x=210;=4.118v
 F4D3      D9        6604          DB      217T     ; x=211;=4.137v
 F4D4      DA        6605          DB      218T     ; x=212;=4.157v
 F4D5      DB        6606          DB      219T     ; x=213;=4.176v
 F4D6      DC        6607          DB      220T     ; x=214;=4.196v
 F4D7      DD        6608          DB      221T     ; x=215;=4.216v
 F4D8      DE        6609          DB      222T     ; x=216;=4.235v
 F4D9      DF        6610          DB      223T     ; x=217;=4.255v
 F4DA      E0        6611          DB      224T     ; x=218;=4.275v
 F4DB      E1        6612          DB      225T     ; x=219;=4.294v
 F4DC      E2        6613          DB      226T     ; x=220;=4.314v
 F4DD      E3        6614          DB      227T     ; x=221;=4.333v
 F4DE      E4        6615          DB      228T     ; x=222;=4.353v
 F4DF      E5        6616          DB      229T     ; x=223;=4.373v
 F4E0      E6        6617          DB      230T     ; x=224;=4.392v
 F4E1      E7        6618          DB      231T     ; x=225;=4.412v
 F4E2      E8        6619          DB      232T     ; x=226;=4.431v
 F4E3      E9        6620          DB      233T     ; x=227;=4.451v
 F4E4      EA        6621          DB      234T     ; x=228;=4.471v
 F4E5      EB        6622          DB      235T     ; x=229;=4.490v
 F4E6      EB        6623          DB      235T     ; x=230;=4.510v
 F4E7      EC        6624          DB      236T     ; x=231;=4.529v
 F4E8      ED        6625          DB      237T     ; x=232;=4.549v
 F4E9      EE        6626          DB      238T     ; x=233;=4.569v
 F4EA      EF        6627          DB      239T     ; x=234;=4.588v
 F4EB      F0        6628          DB      240T     ; x=235;=4.608v
 F4EC      F1        6629          DB      241T     ; x=236;=4.627v
 F4ED      F2        6630          DB      242T     ; x=237;=4.647v
 F4EE      F3        6631          DB      243T     ; x=238;=4.667v
 F4EF      F4        6632          DB      244T     ; x=239;=4.686v
 F4F0      F5        6633          DB      245T     ; x=240;=4.706v
 F4F1      F6        6634          DB      246T     ; x=241;=4.725v
 F4F2      F7        6635          DB      247T     ; x=242;=4.745v
 F4F3      F8        6636          DB      248T     ; x=243;=4.765v
 F4F4      F9        6637          DB      249T     ; x=244;=4.784v
 F4F5      FA        6638          DB      250T     ; x=245;=4.804v
 F4F6      FB        6639          DB      251T     ; x=246;=4.824v
 F4F7      FC        6640          DB      252T     ; x=247;=4.843v
 F4F8      FD        6641          DB      253T     ; x=248;=4.863v
 F4F9      FE        6642          DB      254T     ; x=249;=4.882v
 F4FA      FF        6643          DB      255T     ; x=250;=4.902v
 F4FB      FF        6644          DB      255T     ; x=251;=4.922v
 F4FC      FF        6645          DB      255T     ; x=252;=4.941v
 F4FD      FF        6646          DB      255T     ; x=253;=4.961v
 F4FE      FF        6647          DB      255T     ; x=254;=4.980v
 F4FF      64        6648          DB      100T     ; x=255;=5.000v;sensor failure
                     6649                                        ; to kpa
 F500                6650       include "thermfactor.inc"        ; Converts matADC and cltADC
                     6651  ; Generated using EasyTherm4.exe
                     6652  ;
                     6653  ; Ford ECT
                     6654  ;
                     6655  ; ***** CAUTION - NON STD BIAS RESISTOR REQUIRED *****
                     6656  ; File generated for use with 22000 ohm resistor at R7
                     6657  ;
                     6658  ; Steinhart-Hart coefficients:  A= 9.34735E-04   B=2.2114E-04   C= 1.273387E-07
                     6659  ;
                     6660  ; Input Data:        Temp, degF      Resistance
                     6661  ;                50             58750
                     6662  ;               104             16150
                     6663  ;               212              2070
                     6664  ;
                     6665  
                     6666  THERMFACTOR:
                     6667                       ;    ADC  Temp, degF
 F500      D2        6668       DB      210T    ;     0    Sensor Failure - use 170 degF as default
 F501      FF        6669       DB      255T    ;     1    472.13
 F502      FF        6670       DB      255T    ;     2    400.72
 F503      FF        6671       DB      255T    ;     3    363.34
 F504      FF        6672       DB      255T    ;     4    338.48
 F505      FF        6673       DB      255T    ;     5    320.04
 F506      FF        6674       DB      255T    ;     6    305.49
 F507      FF        6675       DB      255T    ;     7    293.51
 F508      FF        6676       DB      255T    ;     8    283.36
 F509      FF        6677       DB      255T    ;     9    274.58
 F50A      FF        6678       DB      255T    ;    10    266.84
 F50B      FF        6679       DB      255T    ;    11    259.94
 F50C      FF        6680       DB      255T    ;    12    253.72
 F50D      FF        6681       DB      255T    ;    13    248.06
 F50E      FF        6682       DB      255T    ;    14    242.86
 F50F      FF        6683       DB      255T    ;    15    238.06
 F510      FF        6684       DB      255T    ;    16    233.61
 F511      FF        6685       DB      255T    ;    17    229.45
 F512      FF        6686       DB      255T    ;    18    225.56
 F513      FF        6687       DB      255T    ;    19    221.89
 F514      FF        6688       DB      255T    ;    20    218.43
 F515      FF        6689       DB      255T    ;    21    215.16
 F516      FC        6690       DB      252T    ;    22    212.05
 F517      F9        6691       DB      249T    ;    23    209.09
 F518      F6        6692       DB      246T    ;    24    206.26
 F519      F4        6693       DB      244T    ;    25    203.56
 F51A      F1        6694       DB      241T    ;    26    200.96
 F51B      EE        6695       DB      238T    ;    27    198.48
 F51C      EC        6696       DB      236T    ;    28    196.08
 F51D      EA        6697       DB      234T    ;    29    193.78
 F51E      E8        6698       DB      232T    ;    30    191.56
 F51F      E5        6699       DB      229T    ;    31    189.41
 F520      E3        6700       DB      227T    ;    32    187.33
 F521      E1        6701       DB      225T    ;    33    185.32
 F522      DF        6702       DB      223T    ;    34    183.38
 F523      DD        6703       DB      221T    ;    35    181.48
 F524      DC        6704       DB      220T    ;    36    179.65
 F525      DA        6705       DB      218T    ;    37    177.86
 F526      D8        6706       DB      216T    ;    38    176.12
 F527      D6        6707       DB      214T    ;    39    174.43
 F528      D5        6708       DB      213T    ;    40    172.78
 F529      D3        6709       DB      211T    ;    41    171.17
 F52A      D2        6710       DB      210T    ;    42    169.60
 F52B      D0        6711       DB      208T    ;    43    168.06
 F52C      CF        6712       DB      207T    ;    44    166.56
 F52D      CD        6713       DB      205T    ;    45    165.09
 F52E      CC        6714       DB      204T    ;    46    163.66
 F52F      CA        6715       DB      202T    ;    47    162.25
 F530      C9        6716       DB      201T    ;    48    160.87
 F531      C8        6717       DB      200T    ;    49    159.52
 F532      C6        6718       DB      198T    ;    50    158.19
 F533      C5        6719       DB      197T    ;    51    156.89
 F534      C4        6720       DB      196T    ;    52    155.61
 F535      C2        6721       DB      194T    ;    53    154.35
 F536      C1        6722       DB      193T    ;    54    153.12
 F537      C0        6723       DB      192T    ;    55    151.91
 F538      BF        6724       DB      191T    ;    56    150.71
 F539      BE        6725       DB      190T    ;    57    149.54


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 54
MV351WM


 F53A      BC        6726       DB      188T    ;    58    148.38
 F53B      BB        6727       DB      187T    ;    59    147.24
 F53C      BA        6728       DB      186T    ;    60    146.12
 F53D      B9        6729       DB      185T    ;    61    145.02
 F53E      B8        6730       DB      184T    ;    62    143.93
 F53F      B7        6731       DB      183T    ;    63    142.85
 F540      B6        6732       DB      182T    ;    64    141.79
 F541      B5        6733       DB      181T    ;    65    140.75
 F542      B4        6734       DB      180T    ;    66    139.72
 F543      B3        6735       DB      179T    ;    67    138.70
 F544      B2        6736       DB      178T    ;    68    137.69
 F545      B1        6737       DB      177T    ;    69    136.70
 F546      B0        6738       DB      176T    ;    70    135.71
 F547      AF        6739       DB      175T    ;    71    134.74
 F548      AE        6740       DB      174T    ;    72    133.78
 F549      AD        6741       DB      173T    ;    73    132.83
 F54A      AC        6742       DB      172T    ;    74    131.89
 F54B      AB        6743       DB      171T    ;    75    130.97
 F54C      AA        6744       DB      170T    ;    76    130.05
 F54D      A9        6745       DB      169T    ;    77    129.14
 F54E      A8        6746       DB      168T    ;    78    128.23
 F54F      A7        6747       DB      167T    ;    79    127.34
 F550      A6        6748       DB      166T    ;    80    126.46
 F551      A6        6749       DB      166T    ;    81    125.58
 F552      A5        6750       DB      165T    ;    82    124.71
 F553      A4        6751       DB      164T    ;    83    123.85
 F554      A3        6752       DB      163T    ;    84    123.00
 F555      A2        6753       DB      162T    ;    85    122.16
 F556      A1        6754       DB      161T    ;    86    121.32
 F557      A0        6755       DB      160T    ;    87    120.49
 F558      A0        6756       DB      160T    ;    88    119.66
 F559      9F        6757       DB      159T    ;    89    118.84
 F55A      9E        6758       DB      158T    ;    90    118.03
 F55B      9D        6759       DB      157T    ;    91    117.22
 F55C      9C        6760       DB      156T    ;    92    116.42
 F55D      9C        6761       DB      156T    ;    93    115.63
 F55E      9B        6762       DB      155T    ;    94    114.84
 F55F      9A        6763       DB      154T    ;    95    114.05
 F560      99        6764       DB      153T    ;    96    113.27
 F561      98        6765       DB      152T    ;    97    112.50
 F562      98        6766       DB      152T    ;    98    111.73
 F563      97        6767       DB      151T    ;    99    110.97
 F564      96        6768       DB      150T    ;   100    110.21
 F565      95        6769       DB      149T    ;   101    109.45
 F566      95        6770       DB      149T    ;   102    108.70
 F567      94        6771       DB      148T    ;   103    107.95
 F568      93        6772       DB      147T    ;   104    107.21
 F569      92        6773       DB      146T    ;   105    106.47
 F56A      92        6774       DB      146T    ;   106    105.73
 F56B      91        6775       DB      145T    ;   107    105.00
 F56C      90        6776       DB      144T    ;   108    104.27
 F56D      90        6777       DB      144T    ;   109    103.54
 F56E      8F        6778       DB      143T    ;   110    102.82
 F56F      8E        6779       DB      142T    ;   111    102.10
 F570      8D        6780       DB      141T    ;   112    101.39
 F571      8D        6781       DB      141T    ;   113    100.67
 F572      8C        6782       DB      140T    ;   114     99.96
 F573      8B        6783       DB      139T    ;   115     99.26
 F574      8B        6784       DB      139T    ;   116     98.55
 F575      8A        6785       DB      138T    ;   117     97.85
 F576      89        6786       DB      137T    ;   118     97.15
 F577      88        6787       DB      136T    ;   119     96.45
 F578      88        6788       DB      136T    ;   120     95.75
 F579      87        6789       DB      135T    ;   121     95.06
 F57A      86        6790       DB      134T    ;   122     94.37
 F57B      86        6791       DB      134T    ;   123     93.68
 F57C      85        6792       DB      133T    ;   124     92.99
 F57D      84        6793       DB      132T    ;   125     92.31
 F57E      84        6794       DB      132T    ;   126     91.62
 F57F      83        6795       DB      131T    ;   127     90.94
 F580      82        6796       DB      130T    ;   128     90.26
 F581      82        6797       DB      130T    ;   129     89.58
 F582      81        6798       DB      129T    ;   130     88.90
 F583      80        6799       DB      128T    ;   131     88.22
 F584      80        6800       DB      128T    ;   132     87.54
 F585      7F        6801       DB      127T    ;   133     86.87
 F586      7E        6802       DB      126T    ;   134     86.19
 F587      7E        6803       DB      126T    ;   135     85.52
 F588      7D        6804       DB      125T    ;   136     84.85
 F589      7C        6805       DB      124T    ;   137     84.17
 F58A      7C        6806       DB      124T    ;   138     83.50
 F58B      7B        6807       DB      123T    ;   139     82.83
 F58C      7A        6808       DB      122T    ;   140     82.16
 F58D      79        6809       DB      121T    ;   141     81.49
 F58E      79        6810       DB      121T    ;   142     80.82
 F58F      78        6811       DB      120T    ;   143     80.15
 F590      77        6812       DB      119T    ;   144     79.48
 F591      77        6813       DB      119T    ;   145     78.81
 F592      76        6814       DB      118T    ;   146     78.14
 F593      75        6815       DB      117T    ;   147     77.47
 F594      75        6816       DB      117T    ;   148     76.80
 F595      74        6817       DB      116T    ;   149     76.13
 F596      73        6818       DB      115T    ;   150     75.46
 F597      73        6819       DB      115T    ;   151     74.79
 F598      72        6820       DB      114T    ;   152     74.12
 F599      71        6821       DB      113T    ;   153     73.44
 F59A      71        6822       DB      113T    ;   154     72.77
 F59B      70        6823       DB      112T    ;   155     72.10
 F59C      6F        6824       DB      111T    ;   156     71.42
 F59D      6F        6825       DB      111T    ;   157     70.74
 F59E      6E        6826       DB      110T    ;   158     70.07
 F59F      6D        6827       DB      109T    ;   159     69.39
 F5A0      6D        6828       DB      109T    ;   160     68.71
 F5A1      6C        6829       DB      108T    ;   161     68.03
 F5A2      6B        6830       DB      107T    ;   162     67.34
 F5A3      6B        6831       DB      107T    ;   163     66.66
 F5A4      6A        6832       DB      106T    ;   164     65.97
 F5A5      69        6833       DB      105T    ;   165     65.28
 F5A6      69        6834       DB      105T    ;   166     64.59
 F5A7      68        6835       DB      104T    ;   167     63.90
 F5A8      67        6836       DB      103T    ;   168     63.21
 F5A9      67        6837       DB      103T    ;   169     62.51
 F5AA      66        6838       DB      102T    ;   170     61.81
 F5AB      65        6839       DB      101T    ;   171     61.11
 F5AC      64        6840       DB      100T    ;   172     60.41
 F5AD      64        6841       DB      100T    ;   173     59.70
 F5AE      63        6842       DB       99T    ;   174     58.99
 F5AF      62        6843       DB       98T    ;   175     58.28
 F5B0      62        6844       DB       98T    ;   176     57.56
 F5B1      61        6845       DB       97T    ;   177     56.84
 F5B2      60        6846       DB       96T    ;   178     56.12
 F5B3      5F        6847       DB       95T    ;   179     55.39
 F5B4      5F        6848       DB       95T    ;   180     54.66
 F5B5      5E        6849       DB       94T    ;   181     53.93
 F5B6      5D        6850       DB       93T    ;   182     53.19
 F5B7      5C        6851       DB       92T    ;   183     52.45
 F5B8      5C        6852       DB       92T    ;   184     51.70
 F5B9      5B        6853       DB       91T    ;   185     50.95
 F5BA      5A        6854       DB       90T    ;   186     50.19
 F5BB      59        6855       DB       89T    ;   187     49.43
 F5BC      59        6856       DB       89T    ;   188     48.67
 F5BD      58        6857       DB       88T    ;   189     47.89
 F5BE      57        6858       DB       87T    ;   190     47.12
 F5BF      56        6859       DB       86T    ;   191     46.33
 F5C0      56        6860       DB       86T    ;   192     45.54
 F5C1      55        6861       DB       85T    ;   193     44.75


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 55
MV351WM


 F5C2      54        6862       DB       84T    ;   194     43.95
 F5C3      53        6863       DB       83T    ;   195     43.14
 F5C4      52        6864       DB       82T    ;   196     42.32
 F5C5      51        6865       DB       81T    ;   197     41.50
 F5C6      51        6866       DB       81T    ;   198     40.67
 F5C7      50        6867       DB       80T    ;   199     39.83
 F5C8      4F        6868       DB       79T    ;   200     38.98
 F5C9      4E        6869       DB       78T    ;   201     38.13
 F5CA      4D        6870       DB       77T    ;   202     37.26
 F5CB      4C        6871       DB       76T    ;   203     36.39
 F5CC      4C        6872       DB       76T    ;   204     35.50
 F5CD      4B        6873       DB       75T    ;   205     34.61
 F5CE      4A        6874       DB       74T    ;   206     33.70
 F5CF      49        6875       DB       73T    ;   207     32.79
 F5D0      48        6876       DB       72T    ;   208     31.86
 F5D1      47        6877       DB       71T    ;   209     30.92
 F5D2      46        6878       DB       70T    ;   210     29.97
 F5D3      45        6879       DB       69T    ;   211     29.00
 F5D4      44        6880       DB       68T    ;   212     28.02
 F5D5      43        6881       DB       67T    ;   213     27.02
 F5D6      42        6882       DB       66T    ;   214     26.01
 F5D7      41        6883       DB       65T    ;   215     24.99
 F5D8      40        6884       DB       64T    ;   216     23.94
 F5D9      3F        6885       DB       63T    ;   217     22.88
 F5DA      3E        6886       DB       62T    ;   218     21.80
 F5DB      3D        6887       DB       61T    ;   219     20.70
 F5DC      3C        6888       DB       60T    ;   220     19.58
 F5DD      3A        6889       DB       58T    ;   221     18.44
 F5DE      39        6890       DB       57T    ;   222     17.27
 F5DF      38        6891       DB       56T    ;   223     16.08
 F5E0      37        6892       DB       55T    ;   224     14.86
 F5E1      36        6893       DB       54T    ;   225     13.62
 F5E2      34        6894       DB       52T    ;   226     12.34
 F5E3      33        6895       DB       51T    ;   227     11.03
 F5E4      32        6896       DB       50T    ;   228      9.69
 F5E5      30        6897       DB       48T    ;   229      8.31
 F5E6      2F        6898       DB       47T    ;   230      6.90
 F5E7      2D        6899       DB       45T    ;   231      5.44
 F5E8      2C        6900       DB       44T    ;   232      3.93
 F5E9      2A        6901       DB       42T    ;   233      2.38
 F5EA      29        6902       DB       41T    ;   234       .77
 F5EB      27        6903       DB       39T    ;   235      -.90
 F5EC      25        6904       DB       37T    ;   236     -2.63
 F5ED      24        6905       DB       36T    ;   237     -4.43
 F5EE      22        6906       DB       34T    ;   238     -6.31
 F5EF      20        6907       DB       32T    ;   239     -8.28
 F5F0      1E        6908       DB       30T    ;   240    -10.34
 F5F1      1B        6909       DB       27T    ;   241    -12.51
 F5F2      19        6910       DB       25T    ;   242    -14.81
 F5F3      17        6911       DB       23T    ;   243    -17.24
 F5F4      14        6912       DB       20T    ;   244    -19.84
 F5F5      11        6913       DB       17T    ;   245    -22.62
 F5F6      0E        6914       DB       14T    ;   246    -25.63
 F5F7      0B        6915       DB       11T    ;   247    -28.91
 F5F8      07        6916       DB        7T    ;   248    -32.51
 F5F9      03        6917       DB        3T    ;   249    -36.53
 F5FA      00        6918       DB        0T    ;   250    -41.08
 F5FB      00        6919       DB        0T    ;   251    -46.35
 F5FC      00        6920       DB        0T    ;   252    -52.64
 F5FD      00        6921       DB        0T    ;   253    -60.51
 F5FE      00        6922       DB        0T    ;   254    -71.20
 F5FF      D2        6923       DB      210T    ;   255    Sensor Failure - use 170 degF as default
                     6924                                        ; to degrees F+40
                     6925  
                     6926  ;***************************************************************************
                     6927  ; --------------------------- VFD Lookup Tables ---------------------------
                     6928  ;***************************************************************************
                     6929  
                     6930  
 E000                6931       org     $E000       ; Origin at Memory Location $E000 = 57334
                     6932                           ;(uses 357) to memory location $E15B = 57691
                     6933                           ; Flash ends at $FDFF = 65023
                     6934  
                     6935  ;***************************************************************************
                     6936  ; - These tables are the character strings for the top lines of the VFD
                     6937  ;   while in "Display" mode.
                     6938  ;***************************************************************************
                     6939  
                     6940  VARS0_TL_TB:
 E000      4552504D  6941       db     'ERPM MAP AFR CLT MAT'
           204D4150 
           20414652 
           20434C54 
           204D4154 
                     6942              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     6943              ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     6944              ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                     6945              ; "CLT"  is Engine Coolant Temp in degrees F+40, uses "clt"
                     6946              ; "MAT"  is Manifold Air Temperature in degrees F+40, uses "mat"
                     6947  
                     6948  VARS1_TL_TB:
 E014      54505020  6949       db     'TPP EOP EFP EXGT VLT'
           454F5020 
           45465020 
           45584754 
           20564C54 
                     6950              ; "TPP"  is Throttle position in percent, uses "tpsp"
                     6951              ; "EOP"  is Engine oil pressure in PSI, uses "oprs"
                     6952              ; "EFP"  is Engine fuel pressure in PSI, uses "fprs"
                     6953              ; "EXGT" is Engine exhaust gas temperature in degrees F, uses "egtH:egtL"
                     6954              ; "VLT"  is Battery Voltage x 10, uses "volts"
                     6955  
                     6956  VARS2_TL_TB:
 E028      20455250  6957       db     ' ERPM AFR FDSC LTHR '
           4D204146 
           52204644 
           5343204C 
           54485220 
                     6958              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     6959              ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                     6960              ; "FDSC" is Fuel Delivery Injector On Time over a 1 second period in mmS, uses "fdSecH:fdSecL"
                     6961              ; "LTHR" is Current fuel burn in L/Hr x 10, uses "ltrHrH:ltrHrL"
                     6962  
                     6963  VARS3_TL_TB:
 E03C      4552504D  6964       db     'ERPM MAP AFR FTC PLW'
           204D4150 
           20414652 
           20465443 
           20504C57 
                     6965              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     6966              ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     6967              ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                     6968              ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                     6969              ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                     6970  
                     6971  VARS4_TL_TB:
 E050      4552504D  6972       db     'ERPM MAP TRA CTA MTA'
           204D4150 
           20545241 
           20435441 
           204D5441 
                     6973              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     6974              ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     6975              ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                     6976              ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                     6977              ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 56
MV351WM


                     6978  
                     6979  VARS5_TL_TB:
 E064      2047414D  6980       db     ' GAM WCR ACR BCR TCR'
           20574352 
           20414352 
           20424352 
           20544352 
                     6981              ; "GAM" is Gamma Correction in percent, uses "gammae"
                     6982              ; "WCR" is Engine Coolant Correction in percent, uses "warmcor"
                     6983              ; "ACR" is Manifold Air Temperature Correction in percent, uses "aircor"
                     6984              ; "BCR" is Barometric Pressure Correction in percent, uses "barocor"
                     6985              ; "TCR" is Acceleration Correction in percent, uses "tpsaccel"
                     6986  
                     6987  VARS6_TL_TB:
 E078      2065676F  6988       db     ' ego EGV LMD AFR FTC'
           20454756 
           204C4D44 
           20414652 
           20465443 
                     6989              ; "ego" is Exhaust Gas Oxygen ADC, uses "egoADC"
                     6990              ; "EGV" is Exhaust Gas Oxygen voltage x 10, uses "egoV"
                     6991              ; "LMD" is Exhaust Gas Oxygen Lambda x 10, uses "lambda"
                     6992              ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                     6993              ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                     6994  
                     6995  VARS7_TL_TB:
 E08C      206D6170  6996       db     ' map MAP     BAR BCR'
           204D4150 
           20202020 
           20424152 
           20424352 
                     6997              ; "map" is Manifold Pressure ADC, uses "mapADC"
                     6998              ; "MAP" is Manifold Absolute Pressure in KPA, uses "map"
                     6999              ; "BAR" is Barometric Pressure in KPA, uses "barometer"
                     7000              ; "BCR" is Barometric Pressure Correction in percent, uses "barocor"
                     7001  
                     7002  VARS8_TL_TB:
 E0A0      20766C74  7003       db     ' vlt VLT clt CLT WCR'
           20564C54 
           20636C74 
           20434C54 
           20574352 
                     7004              ; "vlt" is Battery Voltage ADC, uses "battADC"
                     7005              ; "VLT" is Battery Voltage x 10, uses "volts"
                     7006              ; "clt" is Engine Coolant Temperature ADC, uses "cltADC"
                     7007              ; "CLT" is Engine Coolant Temperature in degrees F+40, uses "clt"
                     7008              ; "WCR" is Engine Coolant Correction in percent, uses "warmcor"
                     7009  
                     7010  VARS9_TL_TB:
 E0B4      65677420  7011       db     'egt EXGT mat MAT ACR'
           45584754 
           206D6174 
           204D4154 
           20414352 
                     7012              ; "egt"  is Exhaust Gas Temperature ADC, uses "egtADC"
                     7013              ; "EXGT" is Engine exhaust gas temperature in degrees F, uses "egtH:egtL"
                     7014              ; "mat"  is Manifold Air Temperature ADC, uses "matADC"
                     7015              ; "MAT"  is Manifold Air Temperature in degrees F+40, uses "mat"
                     7016              ; "ACR"  is Manifold Air Temperature Correction in percent, uses "aircor"
                     7017  
                     7018  VARS10_TL_TB:
 E0C8      20667463  7019       db      ' ftc  FTC  itc  TAF '
           20204654 
           43202069 
           74632020 
           54414620 
                     7020               ; "ftc"  is Fuel trim ADC, uses "ftrimADC"
                     7021               ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                     7022               ; "itc"  is Ignition Trim Correction ADC, uses "itrimADC"
                     7023               ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"
                     7024  
                     7025  VARS11_TL_TB:
 E0DC      20656F70  7026       db      ' eop  EOP  efp  EFP '
           2020454F 
           50202065 
           66702020 
           45465020 
                     7027               ; "eop"  is Engine oil pressure ADC, uses "eopADC"
                     7028               ; "EOP"  is Engine oil pressure in PSI, uses "oprs"
                     7029               ; "efp"  is Engine fuel pressure ADC, uses "efpADC"
                     7030               ; "EFP"  is Engine fuel pressure in PSI, uses "fprs"
                     7031  
                     7032  VARS12_TL_TB:
 E0F0      50574852  7033       db      'PWHR PLW FLD VEC DTY'
           20504C57 
           20464C44 
           20564543 
           20445459 
                     7034               ; "PWHR" is Pulse Width Hi Res in mmmS, uses "pwcalcH:pwcalcL"
                     7035               ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                     7036               ; "FLD"  is Fuel Deleivery Pulse Width Lo Res in mmS, uses "fd"
                     7037               ; "VEC   is Volumetric Efficiency(Current VE table value in percent),
                     7038               ; uses "vecurr"
                     7039               ; "DTY"  is Injector Duty Cycle in percent, uses "duty"
                     7040  
                     7041  VARS13_TL_TB:
 E104      20455250  7042       db      ' ERPM PIPD MNPD SEC '
           4D205049 
           5044204D 
           4E504420 
           53454320 
                     7043               ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                     7044               ;*; "PIPD" is PIP Period Predicted in mmmS, uses "pippprdH:pippprdL"
                     7045               ; "PIPD" is PIP Period in mmmS, uses "tachH:tachL"
                     7046               ; "MNPD" is Ignition Monitor Period in mmmS, uses "monpH:monpL"
                     7047               ; "SEC"  is Seconds Counter Lo byte, uses "secL"
                     7048  
                     7049  VARS14_TL_TB:
 E118      4552504D  7050       db      'ERPM MAP SAF DAF TAF'
           204D4150 
           20534146 
           20444146 
           20544146 
                     7051               ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7052               ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     7053               ; "SAF"  is Spark Angle Factor(Current ST table value), uses "spkAngFac"
                     7054               ; "DAF"  is Delay Angle Factor, uses "dlyAngFac"
                     7055               ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"
                     7056  
                     7057  VARS15_TL_TB:
 E12C      4552504D  7058       db      'ERPM TRA DLA CTA MTA'
           20545241 
           20444C41 
           20435441 
           204D5441 
                     7059               ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7060               ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                     7061               ; "DLA"  is Ignition Delay Angle in degrees BTDC, uses "dlyAng"
                     7062               ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                     7063               ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"
                     7064  
                     7065  
                     7066  VARS16_TL_TB:
 E140      46502052  7067       db      'FP RN CR SW RW AC DC'
           4E204352 
           20535720 


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 57
MV351WM


           52572041 
           43204443 
                     7068               ; "FP"   is Fuel Pump(portAbits 0)
                     7069               ; "RN"   is Engine Running(engine 0)
                     7070               ; "CR"   is Engine Cranking(engine 1)
                     7071               ; "SW"   is Start Warmup(engine 2)
                     7072               ; "RW"   is Run Warmup(engine 3)
                     7073               ; "AC"   is Accellerating(engine 4)
                     7074               ; "DC"   is Decelerating(engine 5)
                     7075  
                     7076  
                     7077  
                     7078  VARS17_TL_TB:
 E154      45412052  7079       db      'EA RL FC       FT IT'
           4C204643 
           20202020 
           20202046 
           54204954 
                     7080               ; "EA"   is Engine Alarm(portCbits 0)
                     7081               ; "RL"   is Rev Limiter(alarmbits 5)
                     7082               ; "FC"   is Flood Clear(alarmbits 6)
                     7083               ; "FT"   is Fuel Trim Enable(portAbits 5)
                     7084               ; "IT"   is Ignition Trim Enable(portAbits 2)
                     7085  
                     7086  
                     7087  VARS18_TL_TB:
 E168      45412048  7088       db      'EA HT LO LF HF ET KN'
           54204C4F 
           204C4620 
           48462045 
           54204B4E 
                     7089               ; "EA"   is Engine Alarm(portCbits 0)
                     7090               ; "HT"   is High engine temperature(alarmbits 1)
                     7091               ; "LO"   is Low engine oil pressure(alarmbits 0)
                     7092               ; "LF"   is Low fuel pressure(alarmbits 2)
                     7093               ; "HF"   is High fuel pressure(alarmbits 3)
                     7094               ; "ET"   is High exhaust gas temperature(alarmbits 4)
                     7095               ; "KN"   is Engine knock detected(alarmbits 7)
                     7096  
                     7097  
                     7098  ;***************************************************************************
                     7099  ; - This table is the 16 bit vector address index, for the tables of the
                     7100  ;   character strings, for the top lines of the VFD while in "Display" mode.
                     7101  ;***************************************************************************
                     7102  
                     7103  VARS_TL_TB_IND:
 E17C      E000      7104       dw     VARS0_TL_TB         ; ScrnCnt=0  'ERPM MAP AFR CLT MAT'
 E17E      E014      7105       dw     VARS1_TL_TB         ; ScrnCnt=1  'TPP EOP EFP EXGT VLT'
 E180      E028      7106       dw     VARS2_TL_TB         ; ScrnCnt=2  ' ERPM AFR FDSC LTHR '
 E182      E03C      7107       dw     VARS3_TL_TB         ; ScrnCnt=3  'ERPM MAP AFR FTC PLW'
 E184      E050      7108       dw     VARS4_TL_TB         ; ScrnCnt=4  'ERPM MAP TRA CTA MTA'
 E186      E064      7109       dw     VARS5_TL_TB         ; ScrnCnt=5  ' GAM WCR ACR BCR TCR'
 E188      E078      7110       dw     VARS6_TL_TB         ; ScrnCnt=6  ' ego EGV LMD AFR FTC'
 E18A      E08C      7111       dw     VARS7_TL_TB         ; ScrnCnt=7  ' map MAP     BAR BCR'
 E18C      E0A0      7112       dw     VARS8_TL_TB         ; ScrnCnt=8  ' vlt VLT clt CLT WCR'
 E18E      E0B4      7113       dw     VARS9_TL_TB         ; ScrnCnt=9  'egt EXGT mat MAT ACR'
 E190      E0C8      7114       dw     VARS10_TL_TB        ; ScrnCnt=10 ' ftc  FTC  itc  TAF '
 E192      E0DC      7115       dw     VARS11_TL_TB        ; ScrnCnt=11 ' eop  EOP  efp  EFP '
 E194      E0F0      7116       dw     VARS12_TL_TB        ; ScrnCnt=12 'PWHR PLW FLD VEC DTY'
 E196      E104      7117       dw     VARS13_TL_TB        ; ScrnCnt=13 ' ERPM PIPD MNPD SEC '
 E198      E118      7118       dw     VARS14_TL_TB        ; ScrnCnt=14 'ERPM MAP SAF DAF TAF'
 E19A      E12C      7119       dw     VARS15_TL_TB        ; ScrnCnt=15 'ERPM TRA DLA CTA MTA'
 E19C      E140      7120       dw     VARS16_TL_TB        ; ScrnCnt=16 'FP RN CR SW RW AC DC'
 E19E      E154      7121       dw     VARS17_TL_TB        ; ScrnCnt=17 'EA RL FC       FT IT'
 E1A0      E168      7122       dw     VARS18_TL_TB        ; ScrnCnt=18 'EA HT LO LF HF ET KN'
                     7123  
                     7124  ;****************************************************************************
                     7125  ; - Interrupt Vector table
                     7126  ;****************************************************************************
                     7127  
 FFDC                7128       org     vec_timebase  ; Origin at $FFDC = 65500
                     7129  
                     7130  
 FFDC      8CDA      7131       dw      Dummy          ;Time Base Vector
 FFDE      8CDA      7132       dw      Dummy          ;ADC Conversion Complete
 FFE0      8CDA      7133       dw      Dummy          ;Keyboard Vector
 FFE2      8CD9      7134       dw      SCITX_ISR      ;SCI Transmit Vector
 FFE4      8CBD      7135       dw      SCIRCV_ISR     ;SCI Receive Vector
 FFE6      8CDA      7136       dw      Dummy          ;SCI Error Vecotr
 FFE8      8CDA      7137       dw    Dummy          ;SPI Transmit Vector
 FFEA      8CDA      7138       dw      Dummy          ;SPI Receive Vector
 FFEC      8CDA      7139       dw    Dummy          ;TIM2 Overflow Vector
 FFEE      8CDA      7140       dw      Dummy          ;TIM2 Ch1 Vector
 FFF0      8C41      7141       dw      TIM2CH0_ISR    ;TIM2 Ch0 Vector
 FFF2      8CDA      7142       dw      Dummy          ;TIM1 Overflow Vector
 FFF4      8CDA      7143       dw      Dummy          ;TIM1 Ch1 Vector
 FFF6      8CDA      7144       dw      Dummy          ;TIM1 Ch0 Vector
 FFF8      8CDA      7145       dw    Dummy          ;PLL Vector
 FFFA      8CDA      7146       dw      Dummy          ;IRQ Vector
 FFFC      8CDA      7147       dw    Dummy          ;SWI Vector
 FFFE      8000      7148       dw      Start          ;Reset Vector
                     7149  
 0000                7150       end
                     7151  
                     7152   

 Symbol Table 

ACK              0002
ACKK             0002
ACQ              0005
AC_1             00AF
AC_10            00AE
AC_100           00AD
ADCH0            0000
ADCH1            0001
ADCH2            0002
ADCH3            0003
ADCH4            0004
ADCLK            003E
ADCO             0005
ADD_A_TO_HX      9087
ADICLK           0004
ADIV0            0005
ADIV1            0006
ADIV2            0007
ADR              003D
ADSCR            003C
AFR              00E3
AIEN             0006
AIRCOR           00C3
ALARMBITS        00D8
ARCFLAGS         004D
ARFLAGS          004E
ASCII_CONV_1     F200
ASCII_CONV_10    F100
ASCII_CONV_100   F000
AUTO             0007
BAROCOR          00C1
BAROMETER        00C0
BATTADC          00B9
BCFE             0007
BCS              0004
BKF              0001
BLANK1           00F8
BLANK2           00F9


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 58
MV351WM


BLANK3           00FA
BLANK4           00FB
BLANK5           00FC
BLANK6           00FD
BLANK7           00FE
BLANK8           00FF
BNKFLOH          00F6
BNKFLOL          00F7
BNKFLOWHMV       00DB
BNKFLOWLMV       00DC
BOTLIN0          0085
BOTLIN0L         0099
BOTLIN1          0086
BOTLIN10         008F
BOTLIN10L        00A3
BOTLIN11         0090
BOTLIN11L        00A4
BOTLIN12         0091
BOTLIN12L        00A5
BOTLIN13         0092
BOTLIN13L        00A6
BOTLIN14         0093
BOTLIN14L        00A7
BOTLIN15         0094
BOTLIN15L        00A8
BOTLIN16         0095
BOTLIN16L        00A9
BOTLIN17         0096
BOTLIN17L        00AA
BOTLIN18         0097
BOTLIN18L        00AB
BOTLIN19         0098
BOTLIN19L        00AC
BOTLIN1L         009A
BOTLIN2          0087
BOTLIN2L         009B
BOTLIN3          0088
BOTLIN3L         009C
BOTLIN4          0089
BOTLIN4L         009D
BOTLIN5          008A
BOTLIN5L         009E
BOTLIN6          008B
BOTLIN6L         009F
BOTLIN7          008C
BOTLIN7L         00A0
BOTLIN8          008D
BOTLIN8L         00A1
BOTLIN9          008E
BOTLIN9L         00A2
BOTLIN_CHK_D     8C2F
BOTLIN_CHNG      924F
BRKA             0006
BRKE             0007
BRKH             FE09
BRKL             FE0A
BRKSCR           FE0B
BYTECNT          005C
BYTEGOAL         005D
CALC_AFR         8D2A
CALC_CLT         8CEF
CALC_DLY_ANG     8E75
CALC_DUTY        8DF0
CALC_EGOV        8D19
CALC_EGT         8DB9
CALC_FP          8DA3
CALC_LAMBDA      8D7C
CALC_L_HR        8ECA
CALC_MAP         8CDB
CALC_MAT         8CE5
CALC_MON_TIM_ANG 8E8F
CALC_MTA_DONE    8EC9
CALC_OP          8D8D
CALC_RPM         8E24
CALC_RPM_HR      8E30
CALC_TIM_ANG     8E86
CALC_TRIM_ANG    8E5C
CALC_VOLTS       8CF9
CHARS_DONE       9073
CHECK_GREATER_TH 9280
CHECK_LESS_THAN  9278
CHK_DB0          9123
CHK_DB1          912F
CHK_DB2          913B
CHK_DB3          9147
CHK_DB4          90E7
CHK_DB5          90F3
CHK_DB6          90FF
CHK_DB7          910B
CHK_FRZ_DISP     8C2C
CHXF             0007
CHXIE            0006
CHXMAX           0000
CLT              00DF
CLTADC           00B7
CMP_BOTLIN       9171
CMP_BOTLIN_DONE  9255
COCO             0007
COLNUM           0080
COMVAL           0082
CONCNT           0057
CONCNT_LST       0059
CONCNT_PRV       0058
CONFIG1          001F
CONFIG2          001E
CONT_AFR         8D60
CONVAL           005B
CONV_16BIT_ASCII 8F23
CONV_8BIT_ASCII  8F0F
COP              0005
COPCTL           FFFF
CPHA             0003
CPOL             0004
CRANK            0001
CURCON           005A
DATVAL           0081
DB0              0000
DB0M             0001
DB1              0001
DB1M             0002
DB2              0002
DB2M             0004
DB3              0003
DB3M             0008
DB4              0000
DB4M             0010
DB5              0001
DB5M             0020
DB6              0002
DB6M             0040
DB7              0003
DB7M             0080
DDRA             0004
DDRB             0005
DDRC             0006
DDRD             0007


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 59
MV351WM


DDRE             000C
DECRMT           9327
DEC_SCRNCNT      825C
DELAY300         9001
DISP_BOT         8278
DISVAL           0084
DIVIDEND         0063
DIVISOR          0065
DIVROUND         9351
DIVROUND0        9361
DIVROUND1        9363
DIVROUND2        935E
DIV_BY_TEN       8F01
DIYWBLAMBDA      F300
DLYANG           00E6
DLYANGFAC        00D3
DMARE            0005
DMATE            0004
DONE_WITH_INTERP 92C4
DO_INTERP        928B
DSPLY_MODE       826C
DUMMY            8CDA
DUTY             00E4
EAON             0000
EGOADC           00BA
EGOV             00E1
EGTADC           00BF
EGTH             00ED
EGTL             00EE
ELSXA            0002
ELSXB            0003
ENABLE           0004
ENGINE           00D7
ENSCI            0006
ERASE            0002
ERRIE            0006
FD               00CC
FDSECH           00CD
FDSECL           00CE
FE               0001
FEIE             0001
FLAGS            0053
FLBPR            FF7E
FLCR             FE08
FLDCLR           0006
FPADC            00BE
FPON             0000
FPRS             00EC
FRZ              0001
FRZCNTR          0051
FTEN             0005
FTRIMCOR         00C4
FTRMADC          00BB
GAMMAE           00C5
GET_VECT_ADDR    9074
GOT_ORD_NUM      9272
HEGT             0004
HET              0001
HFP              0003
HI_NIB           9117
HUNDREDS         00B1
HVEN             0008
IDLE             0004
ILAD             0003
ILIE             0004
ILOP             0004
ILTY             0002
IMASK            0001
IMASKK           0001
INC_MS           8C6B
INC_MSX5         8CA3
INC_SCRNCNT      8248
INT1             FE04
INT2             FE05
INT3             FE06
INTACC1          0061
INTACC2          0065
INTKBIER         001B
INTKBSCR         001A
INTSCR           001D
IRQF             0003
ITEN             0002
ITRMADC          00BC
KBIE0            0000
KBIE1            0001
KBIE2            0002
KBIE3            0003
KBIE4            0004
KBIE5            0005
KBIE6            0006
KBIE7            0007
KEYF             0003
KNOCK            0007
KPAFACTOR4250RJH F400
LAMBDA           00E2
LDA_W_HX_PL_A    9098
LFP              0002
LINCHNG          0005
LINENUM          007F
LININTERP        9273
LOAD_PIP_PRD     8E99
LOAD_SPACE       9032
LOCAL_TMP        007D
LOCK             0006
LONG_DELAY       9163
LOOPS            0007
LOOPY            8239
LOP              0000
LO_NIB           9153
LPFLAGS          004C
LTRHRH           00E9
LTRHRL           00EA
LVI              0001
LVIOUT           0007
LVISR            FE0C
M                0004
MAP              00DD
MAPADC           00B5
MASS             0004
MAT              00DE
MATADC           00B6
MDE              0000
MODE             0000
MODECNTR         0050
MODEK            0000
MODF             0004
MODFEN           0002
MODRST           0002
MONDLYANG        00F4
MONDLYANGFAC     00F3
MONFRNGANG       00F5
MONPH            00D4
MONPL            00D5
MONTIMANG        00E8
MS               005F
MSX5             0060


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 60
MV351WM


MSXA             0004
MSXB             0005
NEG_SLOPE        92B7
NEIE             0002
NEXT_CHAR        9061
NEXT_RCV_BYTE    8CCB
NF               0002
NO_CHNG_BL0      917C
NO_CHNG_BL1      9187
NO_CHNG_BL10     91EA
NO_CHNG_BL11     91F5
NO_CHNG_BL12     9200
NO_CHNG_BL13     920B
NO_CHNG_BL14     9216
NO_CHNG_BL15     9221
NO_CHNG_BL16     922C
NO_CHNG_BL17     9237
NO_CHNG_BL18     9242
NO_CHNG_BL19     924D
NO_CHNG_BL2      9192
NO_CHNG_BL3      919D
NO_CHNG_BL4      91A8
NO_CHNG_BL5      91B3
NO_CHNG_BL6      91BE
NO_CHNG_BL7      91C9
NO_CHNG_BL8      91D4
NO_CHNG_BL9      91DF
NO_CHNG_BOTLIN   9253
NO_CHNG_DB       8C3E
NO_CHNG_TOP      8278
ONES             00B3
OPADC            00BD
OPRS             00EB
OR               0003
ORD_TABLE_FIND   9256
ORIE             0003
OVRF             0005
PBWC             0037
PCTL             0036
PE               0000
PEIE             0000
PEN              0001
PGM              0001
PIN              0006
PLLF             0006
PLLIE            0007
PLLON            0005
PLL_WAIT         801E
PMDS             003B
PMRS             003A
PMSH             0038
PMSL             0039
POR              0007
PORTA            0000
PORTABITS        00D9
PORTB            0001
PORTC            0002
PORTCBITS        00DA
PORTD            0003
PORTE            0008
POSINTERP        929E
PRE0             0002
PRE1             0003
PRINT_BOT_D      8C38
PRINT_LINE       905D
PRNT_TOPLN_DSP   9023
PS0              0000
PS1              0001
PS2              0002
PTAPUE           000D
PTCPUE           000E
PTDPUE           000F
PTY              0000
PW               00CB
PWCALCH          00C9
PWCALCL          00CA
QUOTIENT         0061
R8               0007
RAIL_AFR         8D5C
RAM_LAST         023F
RAM_START        0040
RCVNG_VAR        8CC4
RCVST            0004
RCVVE            0003
RD_WRT           0005
RE               0002
READBUF          005E
REENT            925F
REG_SEL          0006
REMAINDER        0061
REVL             0005
ROM_LAST         FDFF
ROM_START        8000
RPF              0000
RPM20            00C7
RPMH             00EF
RPMHRH           00F1
RPMHRL           00F2
RPML             00F0
RPM_CALC_DONE    8E5B
RPM_COMP         8E3C
RTN_TO_0_D       8252
RTN_TO_18        8264
RUNNING          0000
RWU              0001
SBFCR            FE03
SBK              0000
SBSR             FE00
SBSW             0001
SCBR             0019
SCC1             0013
SCC2             0014
SCC3             0015
SCDR             0018
SCIRCV_ISR       8CBD
SCIRCV_ISR_DONE  8CD7
SCITX_ISR        8CD9
SCRF             0005
SCRIE            0005
SCRL_D_LFT       825C
SCRL_D_LFT_DONE  8267
SCRL_D_RT        8248
SCRL_D_RT_DONE   8254
SCRNCNT          0054
SCRNCNT_LST      0056
SCRNCNT_PRV      0055
SCRN_0           82F2
SCRN_0_JMP       82B9
SCRN_1           837E
SCRN_10          87F8
SCRN_10_JMP      82D7
SCRN_11          8861
SCRN_11_JMP      82DA
SCRN_12          88D0
SCRN_12_JMP      82DD
SCRN_13          8950


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 61
MV351WM


SCRN_13_JMP      82E0
SCRN_14          89D4
SCRN_14_JMP      82E3
SCRN_15          8A54
SCRN_15_JMP      82E6
SCRN_16          8ADD
SCRN_16_JMP      82E9
SCRN_17          8B55
SCRN_17_JMP      82EC
SCRN_18          8BB7
SCRN_18_JMP      82EF
SCRN_1_JMP       82BC
SCRN_2           8404
SCRN_2_JMP       82BF
SCRN_3           848B
SCRN_3_JMP       82C2
SCRN_4           850E
SCRN_4_JMP       82C5
SCRN_5           859A
SCRN_5_JMP       82C8
SCRN_6           8610
SCRN_6_JMP       82CB
SCRN_7           8692
SCRN_7_JMP       82CE
SCRN_8           86FC
SCRN_8_JMP       82D1
SCRN_9           8778
SCRN_9_JMP       82D4
SCS1             0016
SCS2             0017
SCTE             0007
SCTIE            0007
SECL             00B4
SEL              0002
SELCNTR          0052
SETLSB           9325
SET_AC           8B3A
SET_AC_DONE      8B3D
SET_CR           8B07
SET_CR_DONE      8B0A
SET_DB0          912D
SET_DB1          9139
SET_DB2          9145
SET_DB3          9151
SET_DB4          90F1
SET_DB5          90FD
SET_DB6          9109
SET_DB7          9115
SET_DC           8B4B
SET_DC_DONE      8B4E
SET_EA           8B5D
SET_EA1          8BBF
SET_EA1_DONE     8BC2
SET_EA_DONE      8B60
SET_ET           8C14
SET_ET_DONE      8C17
SET_FC           8B7F
SET_FC_DONE      8B82
SET_FP           8AE5
SET_FP_DONE      8AE8
SET_FT           8B9C
SET_FT_DONE      8B9F
SET_HF           8C03
SET_HF_DONE      8C06
SET_HT           8BD0
SET_HT_DONE      8BD3
SET_IT           8BAD
SET_IT_DONE      8BB0
SET_KN           8C25
SET_KN_DONE      8C28
SET_LF           8BF2
SET_LF_DONE      8BF5
SET_LO           8BE1
SET_LO_DONE      8BE4
SET_RL           8B6E
SET_RL_DONE      8B71
SET_RN           8AF6
SET_RN_DONE      8AF9
SET_RW           8B29
SET_RW_DONE      8B2C
SET_SW           8B18
SET_SW_DONE      8B1B
SHFTLP           92E9
SHORT_DELAY      916F
SPCR             0010
SPDR             0012
SPE              0001
SPKANGFAC        00D1
SPMSTR           0005
SPR0             0000
SPR1             0001
SPRF             0007
SPRIE            0007
SPSCR            0011
SPTE             0003
SPTIE            0000
SPWOM            0002
SRSR             FE01
START            8000
STARTW           0002
SUBAR            FE02
SW0              0000
SW0AR            0042
SW0ARC           0041
SW0ARC_CHK_DONE  8C79
SW0AR_CHK_DONE   8C91
SW0CLS           0000
SW0DB            0040
SW0DB_CHK_DONE   8C59
SW0LP            0000
SW0_ARC_CHK      8F85
SW0_ARC_PROG     8F90
SW0_AR_PROG      8F9C
SW0_CHK          8F73
SW0_CHK_DONE     8FB9
SW0_CLS          8FA0
SW0_OPN          8FA7
SW1              0001
SW1AR            0045
SW1ARC           0044
SW1ARC_CHK_DONE  8C7F
SW1AR_CHK_DONE   8C97
SW1CLS           0001
SW1DB            0043
SW1DB_CHK_DONE   8C5F
SW1LP            0001
SW1_ARC_CHK      8FCC
SW1_ARC_PROG     8FD7
SW1_AR_PROG      8FE3
SW1_CHK          8FBA
SW1_CHK_DONE     9000
SW1_CLS          8FE7
SW1_OPN          8FEE
SW2              0002
SW2AR            0048
SW2ARC           0047


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 62
MV351WM


SW2ARC_CHK_DONE  8C85
SW2AR_CHK_DONE   8C9D
SW2CLS           0002
SW2DB            0046
SW2DB_CHK_DONE   8C65
SW2LP            0002
SW3              0003
SW3AR            004B
SW3ARC           004A
SW3ARC_CHK_DONE  8C8B
SW3AR_CHK_DONE   8CA3
SW3CLS           0003
SW3DB            0049
SW3DB_CHK_DONE   8C6B
SW3LP            0003
SWFLAGS          004F
T1CH0H           0026
T1CH0L           0027
T1CH1H           0029
T1CH1L           002A
T1CNTH           0021
T1CNTL           0022
T1MODH           0023
T1MODL           0024
T1SC             0020
T1SC0            0025
T1SC1            0028
T2CH0H           0031
T2CH0L           0032
T2CH1H           0034
T2CH1L           0035
T2CNTH           002C
T2CNTL           002D
T2MODH           002E
T2MODL           002F
T2SC             002B
T2SC0            0030
T2SC1            0033
T8               0006
TACHH            00CF
TACHL            00D0
TACK             0003
TBCR             001C
TBIE             0002
TBIF             0007
TBON             0001
TBR0             0004
TBR1             0005
TBR2             0006
TC               0006
TCIE             0006
TE               0003
TENS             00B2
THERMFACTOR      F500
THOUSANDS        00B0
TIM2CH0_ISR      8C41
TIM2CH0_ISR_DONE 8CBB
TIMANG           00E7
TMP1             0069
TMP10            0072
TMP11            0073
TMP12            0074
TMP13            0075
TMP14            0076
TMP15            0077
TMP16            0078
TMP17            0079
TMP18            007A
TMP19            007B
TMP2             006A
TMP20            007C
TMP3             006B
TMP4             006C
TMP5             006D
TMP6             006E
TMP7             006F
TMP8             0070
TMP9             0071
TOF              0007
TOIE             0006
TOPLIN_SUB       826C
TOPVAL           0083
TOVX             0001
TPSACCEL         00C6
TPSADC           00B8
TPSAEN           0004
TPSDEN           0005
TPSP             00D6
TRMANG           00E5
TRMANGFAC        00D2
TRST             0004
TSTOP            0005
TXINV            0005
UDVD32           92C5
UMUL32           9364
UMUL32A          9388
UMUL32B          939A
UPDATE_DONE      8CB9
VALUE            007E
VARS0_TL_TB      E000
VARS10_TL_TB     E0C8
VARS11_TL_TB     E0DC
VARS12_TL_TB     E0F0
VARS13_TL_TB     E104
VARS14_TL_TB     E118
VARS15_TL_TB     E12C
VARS16_TL_TB     E140
VARS17_TL_TB     E154
VARS18_TL_TB     E168
VARS1_TL_TB      E014
VARS2_TL_TB      E028
VARS3_TL_TB      E03C
VARS4_TL_TB      E050
VARS5_TL_TB      E064
VARS6_TL_TB      E078
VARS7_TL_TB      E08C
VARS8_TL_TB      E0A0
VARS9_TL_TB      E0B4
VARS_TL_TB_IND   E17C
VECURR           00C8
VEC_ADC          FFDE
VEC_IRQ          FFFA
VEC_KBD          FFE0
VEC_PLL          FFF8
VEC_RESET        FFFE
VEC_SCIERR       FFE6
VEC_SCIRX        FFE4
VEC_SCITX        FFE2
VEC_SPIRX        FFEA
VEC_SPITX        FFE8
VEC_SWI          FFFC
VEC_TIM1CH0      FFF6
VEC_TIM1CH1      FFF4
VEC_TIM1OV       FFF2
VEC_TIM2CH0      FFF0
VEC_TIM2CH1      FFEE


MV351WM.asm            Assembled with CASM08Z  4/16/12  7:03:54 PM  PAGE 63
MV351WM


VEC_TIM2OV       FFEC
VEC_TIMEBASE     FFDC
VFD_SEND         90E7
VFD_START_BOT    90C9
VFD_START_TOP    90AB
VOLTS            00E0
VPR0             0000
VPR1             0001
WAIT_1           9003
WAIT_2           9005
WAIT_3           9007
WAIT_4           9165
WAIT_5           81F9
WAIT_6           81F7
WAKE             0003
WARMCOR          00C2
WARMUP           0003
ZERO_SLOPE       92C2
