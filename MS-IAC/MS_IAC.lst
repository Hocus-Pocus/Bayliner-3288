
MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 1
MC68HC908GP32 User Bootloader


                        1  ;***************************************************
                                                      *************************
                        2  ;
                        3  ;                          MS_IAC.asm 10/12/12
                        4  ;
                        5  ; Manual Idle Air Controller for Ford 351W Marine 
                                                          engines using MS_TECA
                        6  ; hardware
                        7  ;
                        8  ;                           By Robert Hiebert
                        9  ;
                       10  ;***************************************************
                                                      *************************
                       11  
                       12  ****************************************************
                                                      *************************
                       13  ****************************************************
                                                      *************************
                       14  **   M E G A S Q U I R T - 2 0 0 1 - V2.00
                       15  **
                       16  **   (C) 2002 - B. A. Bowling And A. C. Grippo
                       17  **
                       18  **   This header must appear on all derivatives of 
                                                                     this code.
                       19  **
                       20  ****************************************************
                                                      *************************
                       21  ****************************************************
                                                      *************************
                       22  
                       23  ;***************************************************
                                                      *************************
                       24  ;  - OEM Idle Air Control Solonoid information:
                       25  ;
                       26  ;  - IAC Solonoid resistance 6.0-13.0 ohms (internal
                                                                fly back diode)
                       27  ;    Observations of IAC solonoid PWM was a 
                                                            frequency of 161HZ.
                       28  ;***************************************************
                                                      *************************
                       29  
                       30  ;***************************************************
                                                      *************************
                       31  
                       32  ;***************************************************
                                                      *************************
                       33  ;
                       34  ; ------------------------- MS_IAC Hardware Wiring  
                                                        -----------------------
                       35  ;
                       36  ;***************************************************
                                                      *************************
                       37  ;
                       38  ; ----- Power connections -----
                       39  ;
                       40  ;  12 Volt input   - Pin 19
                       41  ;  Vref 5V output  - Pin 8
                       42  ;  Common ground   - Pins 22,23,24,26,27,29,32,33,34


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 2
MC68HC908GP32 User Bootloader


                                                                            ,35
                       43  ;
                       44  ; ----- Inputs [Port Name - Function - Pin#] -----
                       45  ;
                       46  ;  PTB4/AD4  - Battery Voltage/Boot Loader Entry    
                                                                       - No Pin
                       47  ;  PTB5/AD5  - Idle Air Control Input Port          
                                                                        - Pin 6
                       48  ;  PTB6/AD6  - Idle Air Control Input Stbd          
                                                                       - Pin 25
                       49  ;
                       50  ; ----- Outputs [Port Name - Function - Pin#] -----
                       51  ;
                       52  ;  PTD3/SPSCK - Program Loop Counter LED            
                                                                       - No Pin
                       53  ;  PTD4/T1CH0 - Idle Air Control Solonoid Port      
                                                                       - Pin 36
                       54  ;  PTD5/T1CH1 - Idle Air Control Solonoid Stbd      
                                                                       - Pin 37
                       55  ;
                       56  ; ----- Spares [Port name/Pin# - Header Socket#] 
                                                                          -----
                       57  ;
                       58  ;  PTD0/SS    - H1
                       59  ;  PTD1/MISO  - H2
                       60  ;  Pin 1      - H3
                       61  ;  Pin 2      - H4
                       62  ;
                       63  ;***************************************************
                                                      *************************
                       64  
                       65  ;***************************************************
                                                      *************************
                       66  
                       67  
                       68  
 0040                  69       org      ram_start           ; Origin  Memory location $0040=64
 0040                  70       include "MS_IAC.inc"         ; Include definitions for MS_IAC.asm
                       71  ;****************************************************************************
                       72  ;
                       73  ;            MS_IAC.inc (header file for MS_IAC.asm)  10/12/12
                       74  ;
                       75  ; Manual Idle Air Controller for Ford 351W Marine engines using MS_TECA 
                       76  ; hardware 
                       77  ;
                       78  ;                           By Robert Hiebert 
                       79  ;
                       80  ;****************************************************************************
                       81  
                       82  *****************************************************************************
                       83  *****************************************************************************
                       84  **   M E G A S Q U I R T - 2 0 0 1 - V2.00
                       85  **
                       86  **   (C) 2002 - B. A. Bowling And A. C. Grippo
                       87  **
                       88  **   This header must appear on all derivatives of this code.
                       89  **
                       90  *****************************************************************************
                       91  *****************************************************************************
                       92  
                       93  ;****************************************************************************
                       94  ;  - OEM Idle Air Control Solonoid information:
                       95  ;
                       96  ;  - IAC Solonoid resistance 6.0-13.0 ohms (internal fly back diode)
                       97  ;    Observations of IAC solonoid PWM was a frequency of 161HZ.
                       98  ;****************************************************************************
                       99  
                      100  ;****************************************************************************
                      101  ;
                      102  ; ------------------------- MS_IAC Hardware Wiring  -----------------------
                      103  ;
                      104  ;****************************************************************************
                      105  ;
                      106  ; ----- Power connections -----
                      107  ;
                      108  ;  12 Volt input   - Pin 19
                      109  ;  Vref 5V output  - Pin 8
                      110  ;  Common ground   - Pins 22,23,24,26,27,29,32,33,34,35
                      111  ;
                      112  ; ----- Inputs [Port Name - Function - Pin#] -----
                      113  ;
                      114  ;  PTB4/AD4  - Battery Voltage/Boot Loader Entry           - No Pin
                      115  ;  PTB5/AD5  - Idle Air Control Input Port                 - Pin 5
                      116  ;  PTB6/AD6  - Idle Air Control Input Stbd                 - Pin 25
                      117  ;
                      118  ; ----- Outputs [Port Name - Function - Pin#] -----
                      119  ;
                      120  ;  PTD3/SPSCK - Program Loop Counter LED                   - No Pin
                      121  ;  PTD4/T1CH0 - Idle Air Control Solonoid Port             - Pin 36
                      122  ;  PTD5/T1CH1 - Idle Air Control Solonoid Stbd             - Pin 37
                      123  ;
                      124  ; ----- Spares [Port name/Pin# - Header Socket#] -----
                      125  ;
                      126  ;  PTD0/SS    - H1
                      127  ;  PTD1/MISO  - H2
                      128  ;  Pin 1      - H3
                      129  ;  Pin 2      - H4
                      130  ;
                      131  ;****************************************************************************
                      132  
                      133  ;****************************************************************************
                      134  ; ------------------------ Output Port Equates ------------------------------
                      135  ;****************************************************************************
                      136  
 0040                 137  LoopFrq  equ 3     ; Loop frequency counter on Port D3
 0040                 138  IACpwmP  equ 4     ; IAC PWM Port Engine on Port D4
 0040                 139  IACpwmS  equ 5     ; IAC PWM Stbd Engine on Port D5
                      140  
                      141  ;****************************************************************************
                      142  ; ---------------- "inputs" Operating Status bit field equates --------------
                      143  ;****************************************************************************
                      144  
 0040                 145  clk100k     equ 1     ; 1 = 0.1S   clock tick flag   0 = "clk100k" cleared
 0040                 146  adcc        equ 2     ; 1 = ADC complete flag        0 = "adcc" cleared
 0040                 147  iaconP      equ 4     ; 1 = IAC PW Port on flag      0 = "iaconP" cleared
 0040                 148  iaconS      equ 5     ; 1 = IAC PW Stbd on flag      0 = "iaconS" cleared
                      149  
                      150  ;****************************************************************************
                      151  ; ----------------- RAM Variables (512 bytes available) ---------------------
                      152  ; I/O registers from $0000 to $0039 (decimal 0 to 63)
                      153  ; Direct page addressing from $0000 to $00FF (decimal 0 to 255)
                      154  ; Ram end at $023F (decimal 575)
                      155  ;****************************************************************************
                      156  
                      157  ;Memory Location $0040 (decimal 64)
                      158  
                      159  ms_ram_start:
                      160  
                      161  ;****************************************************************************
                      162  ; ------------ RS232 Real Time Download and Datalog Variables ---------------
                      163  ;****************************************************************************
                      164  
 0040                 165  secH:           ds 1     ; Seconds counter, Hi byte
 0041                 166  secL:           ds 1  ; Seconds counter, Lo byte
 0042                 167  BAT:            ds 1     ; Battery Voltage 8 bit ADC reading
 0043                 168  IACP:           ds 1     ; Port Engine Idle Air Control Sensor 8 bit ADC reading


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 3
MC68HC908GP32 User Bootloader


 0044                 169  IACS:           ds 1     ; Stbd Engine Idle Air Control Sensor 8 bit ADC reading
 0045                 170  Volts:          ds 1     ; Battery voltage to 0.1V resolution
 0046                 171  IACpwP:         ds 1     ; Port IAC pulse width variable(0-60, 100uS resolution)
 0047                 172  IACpwS:         ds 1     ; Stbd IAC pulse width variable(0-60, 100uS resolution)
                      173  
                      174  ;****************************************************************************
                      175  ; This marks the end of the real time download variables, 8 in total
                      176  ;****************************************************************************
                      177  
                      178  ;****************************************************************************
                      179  ; --------------------- Status Bit Field Variables --------------------------
                      180  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      181  ;****************************************************************************
                      182  
 0048                 183  inputs:         ds 1     ; Input status bit field variable(1 of 2)
                      184  
                      185  ;****************************************************************************
                      186  ; ----------------------- Time Clock Variables ------------------------------
                      187  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      188  ;****************************************************************************
                      189  
 0049                 190  uSx100:         ds 1  ; 100 Microseconds counter
 004A                 191  mS:             ds 1  ; Milliseconds counter
 004B                 192  mSx5:           ds 1     ; 5 Milliseconds counter
 004C                 193  mSx20:          ds 1     ; 20 Milliseconds counter
 004D                 194  mSx100:         ds 1     ; 100 Milliseconds counter
                      195  ;*secL:           ds 1     ; Seconds counter, Lo byte
                      196  ;*secH:           ds 1     ; Seconds counter, Hi byte
                      197  
                      198  
                      199  ;****************************************************************************
                      200  ; --------------------- 8 bit ADC input Variables --------------------------
                      201  ; ----------------- (ordered list from "MAP" to "TPS") --------------------
                      202  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      203  ;****************************************************************************
                      204  
                      205  ;*BAT:            ds 1     ; Battery Voltage 8 bit ADC reading
                      206  ;*IACP:           ds 1     ; Port Engine Idle Air Control Sensor 8 bit ADC reading
                      207  ;*IACS:           ds 1     ; Stbd Engine Idle Air Control Sensor 8 bit ADC reading
 004E                 208  adsel:          ds 1     ; ADC Selector Variable
                      209  
                      210  ;****************************************************************************
                      211  ; --------------------- ADC Conversion Variables --------------------------
                      212  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      213  ;****************************************************************************
                      214  
                      215  ;*IACP:           ds 1     ; Port Engine Idle Air Control Sensor 8 bit ADC reading
                      216  ;*IACS:           ds 1     ; Stbd Engine Idle Air Control Sensor 8 bit ADC reading
                      217  ;*Volts:          ds 1     ; Battery voltage to 0.1V resolution
                      218  
                      219  ;***************************************************************************
                      220  ; - Serial Communications Interface Variables
                      221  ;***************************************************************************
                      222  
 004F                 223  txcnt:          ds 1     ; SCI transmitter count (incremented)
                      224  
                      225  ;Memory Location $0050 (decimal 80)
                      226  
 0050                 227  txgoal:         ds 1     ; SCI number of bytes to transmit
 0051                 228  txmode:         ds 1     ; Transmit mode flag
 0052                 229  rxoffset:       ds 1     ; Offset placeholder when receiving VE/constants
                      230                           ; vis. SCI
                      231  
                      232  ;****************************************************************************
                      233  ; ----------------------------- Misc. Variables -----------------------------
                      234  ;****************************************************************************
                      235  
 0053                 236  LoopCntr:      ds 1     ; Loop counter for main loop frequency check
 0054                 237  IACcntP:       ds 1     ; IAC counter for IACpwP (100uS resolution)
 0055                 238  IACcntS:       ds 1     ; IAC counter for IACpwS (100uS resolution)
 0056                 239  AIACcntP:      ds 1     ; Port Auto IAC duration counter value(100mS res)
 0057                 240  AIACcntS:      ds 1     ; Stbd Auto IAC duration counter value(100mS res)
 0058                 241  blank1:        ds 1     ; Placeholder
 0059                 242  blank2:        ds 1     ; Placeholder
 005A                 243  blank3:        ds 1     ; Placeholder
 005B                 244  blank4:        ds 1     ; Placeholder
 005C                 245  blank5:        ds 1     ; Placeholder
 005D                 246  blank6:        ds 1     ; Placeholder
 005E                 247  blank7:        ds 1     ; Placeholder
 005F                 248  blank8:        ds 1     ; Placeholder
                      249  
                      250  ;Memory Location $0060 (decimal 96)
                      251  
                      252  ms_ram_end:
                      253  ms_rf_start:
                      254  ms_rf_end:
                      255  
                      256  ;****************************************************************************
                      257  ; ---------------------------- Misc. Equates --------------------------------
                      258  ;****************************************************************************
                      259  
 0060                 260  ms_ram_size       equ {ms_ram_end-ms_ram_start}
 0060                 261  ms_rf_size        equ {ms_rf_end-ms_rf_start}
 0060                 262  ms_total_ram_size equ {ms_rf_end-ms_ram_start}
                      263  
                      264  
                      265  
                      266  ;***************************************************************************
                      267  ;
                      268  ; Main Routine Here - Initialization and main loop
                      269  ;
                      270  ; Note: Org down 256 bytes below the "rom_start" point
                      271  ;       because of erase bug in bootloader routine
                      272  ;
                      273  ; Note: Items commented out after the Start entry point are
                      274  ;       taken care of in the Boot_R12.asm code
                      275  ;
                      276  ;***************************************************************************
                      277  
                      278  
 8256                 279       org   {rom_start + 256}     ; Origin at memory location
                      280                                   ; $8000+256 = 32,768+256 = 33,024=$8100
                      281  
                      282  Start:
 8256 [03] 4501ED     283       ldhx   #init_stack+1     ; Load index register with value in
                      284                                ; init_stack+1(Set the stack Pointer)
 8259 [02] 94         285       txs                      ; Transfer value in index register Lo byte
                      286                                ; to stack
                      287                                ;(Move before burner to avoid conflict)
                      288  
                      289  ;* Note - uncomment this code if you do not use the Bootloader to initilize *
                      290  ;       clra
                      291  ;    sta     copctl
                      292  ;    mov     #%00000001,config2
                      293  ;    mov     #%00001001,config1
                      294  ;    mov     #%00000001,config1
                      295  ;    ldhx    #ram_last+1             ; Set the stack Pointer
                      296  ;    txs                             ;  to the bottom of RAM
                      297  
                      298  ;****************************************************************************
                      299  ; - Set the phase lock loop for a bus frequency of 8.003584mhz
                      300  ;  (Boot loader initially sets it at 7.3728mhz)
                      301  ;****************************************************************************
                      302  
                      303  ;PllSet:
 825A [04] 1936       304       bclr    BCS,pctl          ; Select external Clock Reference


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 4
MC68HC908GP32 User Bootloader


 825C [04] 1B36       305       bclr    PLLON,pctl        ; Turn Of PLL
 825E [04] 6E0236     306       mov     #$02,pctl         ; Set P and E Bits
 8261 [04] 6ED03A     307       mov     #$D0,pmrs         ; Set L ($C0 for 7.37 MHz)
 8264 [04] 6E0338     308       mov     #$03,pmsh         ; Set N (MSB)
 8267 [04] 6ED139     309       mov     #$D1,pmsl         ; Set N (LSB) ($84 for 7.37 MHz)
 826A [04] 1E37       310       bset    AUTO,pbwc         ; Enable automatic bandwidth control
 826C [04] 1A36       311       bset    PLLON,pctl        ; Turn back on PLL
                      312  PLL_wait:
 826E [05] 0D37FD     313       brclr   LOCK,pbwc,PLL_wait   ; Wait for PLL to lock
 8271 [04] 1836       314       bset    BCS,pctl             ; Select VCO as base clock
                      315  
                      316  
                      317  
                      318  ;****************************************************************************
                      319  ; ------------- Set up the port data-direction registers --------------------
                      320  ;               Set directions,
                      321  ;               Preset state of pins to become outputs
                      322  ;               Set all unused pins to outputs initialized Lo
                      323  ;****************************************************************************
                      324  
                      325  ;****************************************************************************
                      326  ; - Port A set for MS_TECA hardware configuration
                      327  ;****************************************************************************
                      328  
                      329  ; Port A
 8273 [04] 6EFF0D     330       mov     #$FF,PTAPUE     ; Move %11111111 into Port A pullup register
                      331                               ;(Set all pullups)
 8276 [04] 6EFF00     332       mov     #$FF,PORTA      ; Move %11111111 into Port A Data Register
                      333                               ;(preinit all pins Hi, no input signals)
 8279 [03] 3F04       334       clr     DDRA            ; Clear Port A Data Direction Register
                      335                               ;(Inputs on PTA7,6,5,4,3,2,1,0)
                      336                               ;(= Shiftup,Shiftdn,TCCapp,TCCrel,DFCen,
                      337                               ;(DFCdis,ExhPS,VehSpd,
                      338  
                      339  ;****************************************************************************
                      340  ; - Set up ADC inputs
                      341  ;****************************************************************************
                      342  
                      343  ; Port B
 827B [03] 3F01       344       clr     PORTB           ; Clear Port B Data Register
                      345                               ;(Preinit all pins low)
 827D [03] 3F05       346       clr     DDRB            ; Clear Port B Data Direction Register
                      347                               ;(Set as ADC inputs, "ADSEL" selects channel)
                      348  
                      349  ;****************************************************************************
                      350  ; - Port C set for MS_TECA hardware configuration
                      351  ;****************************************************************************
                      352  
                      353  ; Port C
 827F [04] 6E1F02     354       mov     #$1F,PORTC      ; Move %00011111 into Port C Data Register
                      355                               ;(preinit output pins Hi, no outputs)
 8282 [02] A61F       356       lda     #$1F            ; Load accumulator with %00011111
                      357                               ; (set up port directions, 1 = out)
 8284 [03] B706       358       sta     DDRC            ; Copy to Port C Data Direction Register
                      359                               ; Inputs on PTC7,6,5 = NA,NA,NA
                      360                               ; Outputs on PTC4,3,2,1,0
                      361                               ; = ExhBrk,CCS,TCC,SS1,SS2
                      362  
                      363  ;****************************************************************************
                      364  ; Port D set for MS_TECA hardware configuration
                      365  ;****************************************************************************
                      366  
                      367  ; Port D
 8286 [04] 6EFF0F     368       mov     #$FF,PTDPUE     ; Move %11111111 into Port E pullup register
                      369                               ;(Set all pullups)
 8289 [04] 6E3C03     370       mov     #$3C,PORTD      ; Move %00111100 into Port D Data Register
                      371                               ;(preinit output pins Hi, no outputs)
 828C [02] A6FC       372       lda     #$FC            ; Load accumulator with %11111100
                      373                               ; (init port directions 1 = out)
 828E [03] B707       374       sta     DDRD            ; Copy to Port D Data Direction Register
                      375                               ; Inputs on PTD1,0 = H2,H1
                      376                               ; Outputs on PTD7,6,5,4,3,2
                      377                               ; = NA,NA,IACpwmS,IACpwmP,LoopFrq,DFCper
                      378  
                      379  ;****************************************************************************
                      380  ;- Port E not used set all pins as outputs
                      381  ;****************************************************************************
                      382  
                      383  ; Port E
 8290 [03] 3F08       384       clr     PORTE           ; Clear Port E Data Register (to avoid glitches)
 8292 [02] A601       385       lda     #$01            ; Load accumulator with %00000001
                      386                               ; (set up port directions, 1 = out)
                      387                               ; (Serial Comm Port)
 8294 [03] B70C       388       sta     DDRE            ; Copy to Port E Data Direction Register
                      389  
                      390  
                      391  ;****************************************************************************
                      392  ; Set up TIM2 as a free running ~1us counter. Set Channel 0 output compare
                      393  ; to generate the ~100us(0.1ms) clock tick interupt vector "TIM2CH0_ISR:"
                      394  ;****************************************************************************
                      395  
 8296 [04] 6E332B     396       mov     #$33,T2SC       ; Move %00110011 into Timer2
                      397                               ; Status and Control Register
                      398                               ;(Disable interupts, stop timer)
                      399                               ;(Prescale and counter cleared))
                      400                               ;(Prescale for bus frequency / 8)
 8299 [04] 6EFF2E     401       mov     #$FF,T2MODH     ; Move decimal 255 into T2 modulo reg Hi
 829C [04] 6EFF2F     402       mov     #$FF,T2MODL     ; Move decimal 255 into T2 modulo reg Lo
                      403                               ;(free running timer)
 829F [04] 6E0031     404       mov     #$00,T2CH0H     ; Move decimal 0 into T1CH0 O/C register Hi
 82A2 [04] 6E6432     405       mov     #$64,T2CH0L     ; Move decimal 100 into T1CH0 O/C register Lo
                      406                               ;(~100uS)=(~0.1ms)
 82A5 [04] 6E5430     407       mov     #$54,T2SC0      ; Move %01010100 into Timer2
                      408                               ; channel 0 status and control register
                      409                               ; (Output compare, interrupt enabled)
 82A8 [04] 6E032B     410       mov     #$03,T2SC       ; Move %00000011 into Timer2
                      411                               ; Status and Control Register
                      412                               ; Disable interupts, counter Active
                      413                               ; Prescale for bus frequency / 8
                      414                               ; 8,003584hz/8=1000448hz
                      415                               ; = .0000009995sec
                      416  
                      417  ;****************************************************************************
                      418  ; - Set up Serial Communications Interface Module
                      419  ;****************************************************************************
                      420  
 82AB [02] A630       421       lda      #$30           ; Load accumulator with %110000
 82AD [03] B719       422       sta      SCBR           ; Copy to SCI Baud Rate Register
                      423                               ; 8003584/(64*13*1)=9619.7 baud
 82AF [04] 1C13       424       bset     ensci,SCC1     ; Set enable SCI bit of SCI Control Register 1
                      425                               ; (Enable SCI)
 82B1 [04] 1414       426       bset     RE,SCC2        ; Set receiver enable bit of SCI Control Reg. 2
                      427                               ; (Enable receiver)
 82B3 [04] 1A14       428       bset     SCRIE,SCC2     ; Set SCI receive interrupt enable bit of
                      429                               ; SCI Control Register 2 (Enable Rcv. Interrupt)
 82B5 [03] B616       430       lda      SCS1           ; Load accumulator with SCI Status Register 1
                      431                               ; (Clear SCI transmitter Empty Bit)
 82B7 [03] 3F4F       432       clr      txcnt          ; Clear SCI transmitter count
                      433                               ; (incremented)(characters transmitted)
 82B9 [03] 3F50       434       clr      txgoal         ; Clear SCI number of bytes to transmit
                      435                               ; (characters to be transmitted)
                      436  
                      437  ;****************************************************************************
                      438  ; - Initialize the variables to 0 or to some acceptable starting value
                      439  ;****************************************************************************
                      440  


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 5
MC68HC908GP32 User Bootloader


 82BB [03] 3F40       441       clr     secH       ; Seconds counter, Hi byte
 82BD [03] 3F41       442       clr     secL       ; Seconds counter, Lo byte
 82BF [03] 3F42       443       clr     BAT        ; Battery Voltage 8 bit ADC reading
 82C1 [03] 3F43       444       clr     IACP       ; Port Engine Idle Air Control Sensor 8 bit ADC reading
 82C3 [03] 3F44       445       clr     IACS       ; Stbd Engine Idle Air Control Sensor 8 bit ADC reading
 82C5 [03] 3F45       446       clr     Volts      ; Battery voltage to 0.1V resolution
 82C7 [03] 3F46       447       clr     IACpwP     ; Port IAC pulse width variable(0-60, 100uS resolution)
 82C9 [03] 3F47       448       clr     IACpwS     ; Stbd IAC pulse width variable(0-60, 100uS resolution)
 82CB [03] 3F48       449       clr     inputs     ; Input status bit field variable(1 of 2)
 82CD [03] 3F49       450       clr     uSx100     ; 100 Microseconds counter
 82CF [03] 3F4A       451       clr     mS         ; Milliseconds counter
 82D1 [03] 3F4B       452       clr     mSx5       ; 5 Milliseconds counter
 82D3 [03] 3F4C       453       clr     mSx20      ; 20 Milliseconds counter
 82D5 [03] 3F4D       454       clr     mSx100     ; 100 Milliseconds counter
 82D7 [03] 3F4E       455       clr     adsel      ; ADC Selector Variable
 82D9 [03] 3F4F       456       clr     txcnt      ; SCI transmitter count (incremented)
 82DB [03] 3F50       457       clr     txgoal     ; SCI number of bytes to transmit
 82DD [03] 3F51       458       clr     txmode     ; Transmit mode flag
 82DF [03] 3F52       459       clr     rxoffset   ; Offset placeholder when receiving VE/constants vis. SCI
 82E1 [03] 3F53       460       clr     LoopCntr   ; Loop counter for main loop frequency check
 82E3 [03] 3F54       461       clr     IACcntP    ; IAC counter for IACpwP (100uS resolution)
 82E5 [03] 3F55       462       clr     IACcntS    ; IAC counter for IACpwS (100uS resolution)
 82E7 [03] 3F56       463       clr     AIACcntP   ; Port Auto IAC duration counter value(100mS res)
 82E9 [03] 3F57       464       clr     AIACcntS   ; Stbd Auto IAC duration counter value(100mS res)
 82EB [03] 3F58       465       clr     blank1     ; Placeholder
 82ED [03] 3F59       466       clr     blank2     ; Placeholder
 82EF [03] 3F5A       467       clr     blank3     ; Placeholder
 82F1 [03] 3F5B       468       clr     blank4     ; Placeholder
 82F3 [03] 3F5C       469       clr     blank5     ; Placeholder
 82F5 [03] 3F5D       470       clr     blank6     ; Placeholder
 82F7 [03] 3F5E       471       clr     blank7     ; Placeholder
 82F9 [03] 3F5F       472       clr     blank8     ; Placeholder
                      473  
                      474  ;****************************************************************************
                      475  ; - Fire up the ADC, and perform one conversion, Set up clock source for ADC
                      476  ;   Do an initial conversion just to stabilize the ADC
                      477  ;****************************************************************************
                      478  
                      479  Stb_ADC:
 82FB [02] A670       480       lda     #$70      ; Load accumulator with %01110000
 82FD [03] B73E       481       sta     ADCLK     ; Copy to ADC Clock Register
                      482                         ;( bus clock/8 = ~1mhz )
 82FF [02] A604       483       lda     #$04      ; Load accumulator with %00000100
                      484                         ;(one conversion, no interrupt on channel AD4)
 8301 [03] B73C       485       sta     ADSCR     ; Copy to ADC Status and Control Register
                      486  
                      487  ADCWait:
 8303 [05] 0F3CFD     488       brclr   coco,ADSCR,ADCWait   ; If "conversions complete flag" bit of
                      489                                    ; ADC Status and Control Register is clear
                      490                                    ; branch to ADCWait lable
                      491                                    ;(keep looping while COnversion
                      492                                    ; COmplete flag = 0)
 8306 [03] B63D       493       lda    ADR                   ; Load accumulator with value in ADC Result
                      494                                    ; Variable (read value from ADc Result)
 8308 [03] B742       495       sta    BAT                   ; Copy to Battery Voltage 8 bit ADC Reading
 830A [02] A604       496       lda    #$04                  ; Load accumulator with decimal 4
 830C [03] B74E       497       sta    adsel                 ; Copy to "adsel"
                      498  
                      499  TURN_ON_INTS:
 830E [02] 9A         500       cli                          ; Clear intrupt mask
                      501                                    ;( Turn on all interrupts now )
                      502  
                      503  
                      504  ;****************************************************************************
                      505  ;****************************************************************************
                      506  ;********************    M A I N  E V E N T  L O O P     ********************
                      507  ;****************************************************************************
                      508  ;****************************************************************************
                      509  
                      510  ;****************************************************************************
                      511  ; - Toggle pin 3 on Port D each program loop so frequency can be checked
                      512  ;   with a frequency meter or scope. (for program developement)
                      513  ;****************************************************************************
                      514  
                      515  LOOPER:
 830F [04] 3353       516       com     LoopCntr         ; Ones compliment "LoopCntr"
                      517                                ;(flip state of "LoopCntr")
 8311 [03] 2604       518       bne     SET_LOOPCHK      ; If the Z bit of CCR is clear, branch
                      519                                ; to SET_LOOPCHK
 8313 [04] 1703       520       bclr    LoopFrq,PORTD    ; Clear bit 3 of Port D (Program Loop LED)
 8315 [03] 2002       521       bra     LOOPCHK_DONE     ; Branch to LOOPCHK_DONE:
                      522  
                      523  SET_LOOPCHK:
 8317 [04] 1603       524       bset    LoopFrq,PORTD    ; Set bit 3 of Port D (Program Loop LED)
                      525  
                      526  LOOPCHK_DONE:
                      527  
                      528  ;****************************************************************************
                      529  ; - Check to see if it's time to turn the Port IAC PWM off.
                      530  ;****************************************************************************
                      531  
 8319 [05] 094808     532       brclr   iaconP,inputs,IACP_CHK_DONE  ; If "iaconP" bit of "inputs"
                      533                               ; variable is clear, branch to IACP_CHK_DONE:
 831C [03] B654       534       lda     IACcntP         ; Load accumulator with value in Port IAC counter
 831E [03] 2604       535       bne     IACP_CHK_DONE   ; If Z bit of CCR is clear, branch to
                      536                               ; IACP_CHK_DONE:
 8320 [04] 1803       537       bset    iacpwmP,portd   ; Set "iacpwmP" bit of Port D (IAC PW "off")
 8322 [04] 1948       538       bclr    iaconP,inputs   ; Clear "iaconP" bit of "inputs" variable
                      539  
                      540  IACP_CHK_DONE:
                      541  
                      542  ;****************************************************************************
                      543  ; - Check to see if it's time to turn the Stbd IAC PWM off.
                      544  ;****************************************************************************
                      545  
 8324 [05] 0B4808     546       brclr   iaconS,inputs,IACS_CHK_DONE  ; If "iaconS" bit of "inputs"
                      547                               ; variable is clear, branch to IACP_CHK_DONE:
 8327 [03] B655       548       lda     IACcntS         ; Load accumulator with value in Stbd IAC counter
 8329 [03] 2604       549       bne     IACS_CHK_DONE   ; If Z bit of CCR is clear, branch to
                      550                               ; IACS_CHK_DONE:
 832B [04] 1A03       551       bset    iacpwmS,portd   ; Set "iacpwmS" bit of Port D (IAC PW "off")
 832D [04] 1B48       552       bclr    iaconS,inputs   ; Clear "iaconS" bit of "inputs" variable
                      553  
                      554  IACS_CHK_DONE:
                      555  
                      556  ;****************************************************************************
                      557  ; - Update the ADC readings and conversions, This is done only once per ADC
                      558  ;   conversion completion, in the first pass through the main loop after the
                      559  ;   ADC_ISR Interrupt routine has been completed.
                      560  ;****************************************************************************
                      561  
 832F [05] 044803     562       brset   adcc,inputs,ADC_LOOKUPS  ; If "adcc" bit of "inputs" variable
                      563                                        ; is set, branch to ADC_LOOKUPS:
 8332 [03] CC8351     564       jmp     NO_ADC_PASS              ; Jump to NO_ADC_PASS:
                      565  
                      566  ADC_LOOKUPS:
 8335 [01] 8C         567       clrh                    ; Clear index register Hi byte
 8336 [01] 5F         568       clrx                    ; Clear index register Lo byte
                      569  
                      570  ;VOLTS_CALC:
 8337 [03] B642       571       lda     BAT             ; Load accumulator with value in Battery
                      572                               ; Voltage 8 bit ADC reading
 8339 [01] 97         573       tax                     ; Copy to index register Lo byte
 833A [04] D6F000     574       lda     BatVolt,x       ; Load accumulator with value in "BatVolt"
                      575                               ; table, offset in index register Lo byte
 833D [03] B745       576       sta     Volts           ; Copy to Battery Voltage to 0.1V resolution


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 6
MC68HC908GP32 User Bootloader


                      577  
                      578  ;IACPWP_CALC:
 833F [03] B643       579       lda     IACP            ; Load accumulator with value in Port Idle
                      580                               ; Position Sensor 8 bit ADC reading
 8341 [01] 97         581       tax                     ; Copy to index register Lo byte
 8342 [04] D6F100     582       lda     IACcntrl,x      ; Load accumulator with value in IAC control
                      583                               ; table, offset in index register Lo byte
 8345 [03] B746       584       sta     IACpwP          ; Copy to Port Idle AIr Control PW variable
                      585  
                      586  ;IACPWS_CALC:
 8347 [03] B644       587       lda     IACS            ; Load accumulator with value in Stbd Idle
                      588                               ; Position Sensor 8 bit ADC reading
 8349 [01] 97         589       tax                     ; Copy to index register Lo byte
 834A [04] D6F100     590       lda     IACcntrl,x      ; Load accumulator with value in IAC control
                      591                               ; table, offset in index register Lo byte
 834D [03] B747       592       sta     IACpwS          ; Copy to Stbd Idle AIr Control PW variable
 834F [04] 1548       593       bclr    adcc,inputs     ; Clear "adcc" bit of "inputs" variable
                      594  
                      595  NO_ADC_PASS:
                      596  
 8351 [03] 20BC       597       bra     LOOPER          ; Branch to LOOPER: (End of Main Loop!!!)
                      598  
                      599  
                      600  ;****************************************************************************
                      601  ;
                      602  ; * * * * * * * * * * * * * * Interrupt Section * * * * * * * * * * * * * *
                      603  ;
                      604  ; NOTE!!! If the interrupt service routine modifies the H register, or uses
                      605  ; the indexed addressing mode, save the H register (pshh) and then restore
                      606  ; it (pulh) prior to exiting the routine
                      607  ;
                      608  ;****************************************************************************
                      609  
                      610  ;****************************************************************************
                      611  ;
                      612  ; -------- Following interrupt service routines in priority order ----------
                      613  ;
                      614  ; TIM2CH0_ISR: - TIM2 CH0 output compare ($0064 * 1uS) (100us Timer Tick)
                      615  ;
                      616  ; SCIRCV_ISR:  - SCI receive (not used)
                      617  ;
                      618  ; SCITX_ISR:   - SCI transmit
                      619  ;
                      620  ; ADC_ISR:     - ADC Conversion Complete
                      621  ;
                      622  ;****************************************************************************
                      623  
                      624  ;****************************************************************************
                      625  ;============================================================================
                      626  ; - TIM2 CH0 Interrupt (100 uS clock tick)
                      627  ; - Generate time rates:
                      628  ;   100 Microseconds,(for IAC PWM counters)
                      629  ;   Milliseconds,(for ADC conversions)
                      630  ;   5 Milliseconds,(for 200hz clock tick for IAC control PWM frequency
                      631  ;   20 Milliseconds, (because we can)
                      632  ;   100 Milliseconds, (because we can)
                      633  ;   Seconds,(because we can)
                      634  ;============================================================================
                      635  ;****************************************************************************
                      636  
                      637  TIM2CH0_ISR:
 8353 [02] 8B         638       pshh                  ; Push value in index register Hi byte to stack
 8354 [03] B630       639       lda     T2SC0         ; Load accumulator with value in TIM2 CH0 Status
                      640                             ; and Control Register (Arm CHxF flag clear)
 8356 [04] 1F30       641       bclr    CHxF,T2SC0    ; Clear CHxF bit of TIM2 CH0 Status and
                      642                             ; Control Register
 8358 [04] 5531       643       ldhx    T2CH0H        ; Load index register with value in TIM2 CH0
                      644                             ; register H:L (output compare value)
 835A [02] AF64       645       aix     #$64          ; Add decimal 100 (100 uS)
 835C [04] 3531       646       sthx    T2CH0H        ; Copy result to TIM2 CH0 register
                      647                             ;(new output compare value)
                      648  
                      649  ;============================================================================
                      650  ;********************** 100 Microsecond section *****************************
                      651  ;============================================================================
                      652  
                      653  ;****************************************************************************
                      654  ; - Decrement the IAC PWM counters
                      655  ;****************************************************************************
                      656  
                      657  DEC_IACP_CNTR:
 835E [03] B654       658       lda     IACcntP         ; Load accumulator with value in Port IAC counter
 8360 [03] 2702       659       beq     DEC_IACP_DONE   ; If Z bit of CCR is set, branch to DEC_IACP_DONE:
 8362 [04] 3A54       660       dec     IACcntP         ; Decrement Port IAC PWM "off" counter
                      661  
                      662  DEC_IACP_DONE:
                      663  
                      664  ;DEC_IACS_CNTR:
 8364 [03] B655       665       lda     IACcntS         ; Load accumulator with value in Srbd IAC counter
 8366 [03] 2702       666       beq     DEC_IACS_DONE   ; If Z bit of CCR is set, branch to DEC_IACS_DONE:
 8368 [04] 3A55       667       dec     IACcntS         ; Decrement Stbd IAC PWM "off" counter
                      668  
                      669  DEC_IACS_DONE:
                      670  
                      671  ;****************************************************************************
                      672  ; - Increment 100 Microsecond counter
                      673  ;****************************************************************************
                      674  
                      675  INC_cuS:
 836A [04] 3C49       676       inc     uSx100       ; Increment 100 Microsecond counter
 836C [03] B649       677       lda     uSx100       ; Load accumulator with 100 Microsecond counter
 836E [02] A10A       678       cmp     #$0A         ; Compare it with decimal 10
 8370 [03] 2602       679       bne     NOT_MS       ; If not equal, branch to NOT_MS:
 8372 [03] 2003       680       bra     FIRE_ADC     ; Branch to FIRE_ADC:
                      681  
 8374 [03] CC83E0     682  NOT_MS:     jmp     TIM2CH0_ISR_DONE
                      683  
                      684  ;============================================================================
                      685  ;************************* millisecond section ******************************
                      686  ;============================================================================
                      687  
                      688  ;****************************************************************************
                      689  ; - Fire off another ADC conversion, channel is pointed to by "adsel"
                      690  ;   adsel = 0 = Channel 4 = "BAT"
                      691  ;   adsel = 1 = Channel 5 = "IACP"
                      692  ;   adsel = 2 = Channel 6 = "IACS"
                      693  ;****************************************************************************
                      694  
                      695  FIRE_ADC:
 8377 [03] B64E       696       lda     adsel          ; Load accumulator with value in ADC Channel Selector
 8379 [02] A103       697       cmp     #$03           ; Compare value in accumulator with decimal 3
 837B [03] 2402       698       bhs     ROLL_ADSEL     ; If "adsel >= decimal 3, branch to ROLL_ADSEL:
 837D [03] 2002       699       bra     ADSEL_OK       ; Branch to ADSEL_OK:
                      700  
                      701  ROLL_ADSEL:
 837F [03] 3F4E       702       clr     adsel          ; Clear "adsel"
                      703  
                      704  ADSEL_OK:
 8381 [03] B64E       705       lda     adsel          ; Load accumulator with ADC Selector Variable
 8383 [02] AB04       706       add     #$04           ; Add A<-A+M (first ADC is channel 4)
 8385 [02] AA40       707       ora     #%01000000     ; Inclusive "or" with %01000000 and ADC Selector
                      708                              ; Variable ( result in accumulator )
                      709                              ;(Enables interupt with channel selected)
 8387 [03] B73C       710       sta     ADSCR          ; Copy result to ADC Status and Control Register
                      711  
                      712  ;****************************************************************************


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 7
MC68HC908GP32 User Bootloader


                      713  ; - Increment millisecond counter
                      714  ;****************************************************************************
                      715  
                      716  INC_mS:
 8389 [03] 3F49       717       clr     uSx100              ; Clear 100 Microsecond counter
 838B [04] 3C4A       718       inc     mS                  ; Increment Millisecond counter
 838D [03] B64A       719       lda     mS                  ; Load accumulator with value in
                      720                                   ; Millisecond counter
 838F [02] A105       721       cmp     #$05                ; Compare it with decimal 5
 8391 [03] 2703       722       beq     DO_IACP             ; If Z bit of CCR is set, branch to DO_IACP:
                      723                                   ;(mS=5)
 8393 [03] CC83E0     724       jmp     TIM2CH0_ISR_DONE    ; Jump to TIM2CH0_ISR_DONE:
                      725  
                      726  
                      727  ;============================================================================
                      728  ;************************** 5 Millisecond section ***************************
                      729  ;============================================================================
                      730  
                      731  ;****************************************************************************
                      732  ; - Set Port AIC solonoid PWM "on" PTD4 (200 HZ)
                      733  ;****************************************************************************
                      734  
                      735  DO_IACP:
 8396 [03] B646       736       lda     IACpwP         ; Load accumulator with value in Port IAC PW
 8398 [03] 2708       737       beq     NO_IACP        ; If Z bit of CCR is set, branch to NO_IACP:
                      738                              ;(No IAC commanded so no PWM)
 839A [03] B754       739       sta     IACcntP        ; Copy to Port IAC PWM "off" counter
 839C [04] 1903       740       bclr    iacpwmP,portd  ; Clear "iacpwmP" bit of Port D (IAC PW "on")
 839E [04] 1848       741       bset    iaconP,inputs  ; Set "iaconP" bit of "inputs" variable
 83A0 [03] 2004       742       bra     IACP_DONE      ; Branch to IACP_DONE:
                      743  
                      744  NO_IACP:
 83A2 [04] 1803       745       bset    iacpwmP,portd  ; Set "iacpwmP" bit of Port D (IAC PW "off")
 83A4 [04] 1948       746       bclr    iaconP,inputs  ; Clear "iaconP" bit of "inputs" variable
                      747  
                      748  IACP_DONE:
                      749  
                      750  ;****************************************************************************
                      751  ; - Set Stbd AIC solonoid PWM "on" PTD5 (200 HZ)
                      752  ;****************************************************************************
                      753  
                      754  DO_IACS:
 83A6 [03] B647       755       lda     IACpwS         ; Load accumulator with value in Stbd IAC PW
 83A8 [03] 2708       756       beq     NO_IACS        ; If Z bit of CCR is set, branch to NO_IACS:
                      757                              ;(No IAC commanded so no PWM)
 83AA [03] B755       758       sta     IACcntS        ; Copy to Stbd IAC PWM "off" counter
 83AC [04] 1B03       759       bclr    iacpwmS,portd  ; Clear "iacpwmS" bit of Port D (IAC PW "on")
 83AE [04] 1A48       760       bset    iaconS,inputs  ; Set "iaconS" bit of "inputs" variable
 83B0 [03] 2004       761       bra     IACS_DONE      ; Branch to IACS_DONE:
                      762  
                      763  NO_IACS:
 83B2 [04] 1A03       764       bset    iacpwmS,portd  ; Set "iacpwmS" bit of Port D (IAC PW "off")
 83B4 [04] 1B48       765       bclr    iaconS,inputs  ; Clear "iaconS" bit of "inputs" variable
                      766  
                      767  IACS_DONE:
                      768  
                      769  ;****************************************************************************
                      770  ; - Increment 5 millisecond counter
                      771  ;****************************************************************************
                      772  
                      773  INC_mSx5:
 83B6 [03] 3F4A       774       clr     mS                  ; Clear "mS"
 83B8 [04] 3C4B       775       inc     mSx5                ; Increment 5 Millisecond counter
 83BA [03] B64B       776       lda     mSx5                ; Load accumulator with value in
                      777                                   ; 5 Millesecond counter
 83BC [02] A104       778       cmp     #$04                ; Compare it with decimal 4
 83BE [03] 2620       779       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                      780                                   ; branch to TIM2CH0_ISR_DONE:
                      781  
                      782  ;============================================================================
                      783  ;************************* 20 Millisecond section ***************************
                      784  ;============================================================================
                      785  
                      786  ;****************************************************************************
                      787  ; - Increment 20 Millisecond counter
                      788  ;****************************************************************************
                      789  
                      790  INC_mSx20:
 83C0 [03] 3F4B       791       clr     mSx5                ; Clear 5 Millisecond counter
 83C2 [04] 3C4C       792       inc     mSx20               ; Increment 20 Millisecond counter
 83C4 [03] B64C       793       lda     mSx20               ; Load accumulator with value in
                      794                                   ; 20 Millesecond counter
 83C6 [02] A105       795       cmp     #$05                ; Compare it with decimal 5
 83C8 [03] 2616       796       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                      797                                   ; branch to TIM2CH0_ISR_DONE:
                      798  
                      799  
                      800  ;============================================================================
                      801  ;************************* 100 Millisecond section **************************
                      802  ;============================================================================
                      803  
 83CA [04] 1248       804       bset    clk100k,inputs     ; Set "clk100k" bit of "inputs" variable
                      805  
                      806   ;****************************************************************************
                      807  ; - Increment 100 Millisecond counter
                      808  ;****************************************************************************
                      809  
                      810  INC_cmS:
 83CC [03] 3F4C       811       clr     mSx20               ; Clear 20 Millisecond counter
 83CE [04] 3C4D       812       inc     mSx100              ; Increment 100 Millisecond counter
 83D0 [03] B64D       813       lda     mSx100              ; Load accumulator with value in
                      814                                   ; 100 Millisecond counter
 83D2 [02] A10A       815       cmp     #$0A                ; Compare with decimal 10
 83D4 [03] 2702       816       beq     INC_S               ; If Z bit of CCR is set, branch to INC_S:
 83D6 [03] 2008       817       bra     TIM2CH0_ISR_DONE    ; Branch to TIM2CH0_ISR_DONE:
                      818  
                      819  ;============================================================================
                      820  ;**************************** Seconds section *******************************
                      821  ;============================================================================
                      822  
                      823  ;****************************************************************************
                      824  ; - Increment Seconds counter
                      825  ;****************************************************************************
                      826  
                      827  INC_S:
 83D8 [03] 3F4D       828       clr     mSx100              ; Clear 0.1 Second variable
 83DA [04] 3C41       829       inc     secl                ; Increment "Seconds" Lo byte variable
 83DC [03] 2602       830       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear, branch
                      831                                   ; to TIM2CH0_ISR_DONE:
 83DE [04] 3C40       832       inc     sech                ; Increment "Seconds" Hi byte variable
                      833  
                      834  TIM2CH0_ISR_DONE:
 83E0 [02] 8A         835       pulh                  ; Pull value from stack to index register Hi byte
 83E1 [07] 80         836       rti                   ; Return from interrupt
                      837  
                      838  ;****************************************************************************
                      839  ;
                      840  ; -------------------- Serial Communications Interface ----------------------
                      841  ;
                      842  ; Communications is established when the PC communications program sends
                      843  ; a command character - the particular character sets the mode:
                      844  ;
                      845  ; "A" = send all of the realtime variables via txport.
                      846  ; "V" = send the Constants group 1 via txport (128 bytes)
                      847  ;       (TO_table, RPM_range, KPA_range, TPS_range, EPC_stall, EPC_12,
                      848  ;        EPC_23, EPC_34, tables, + 8 spares)


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 8
MC68HC908GP32 User Bootloader


                      849  ; "C" = Test communications - echo back SECL
                      850  ; "Q" = Send over Embedded Code Revision Number (divide number by 10
                      851  ;       - i.e. $21T is rev 2.1)
                      852  ; "I" = send the Constants group 2 via txport (64 bytes)
                      853  ;
                      854  ; txmode:
                      855  ;              01 = Getting realtime data
                      856  ;              02 = ?
                      857  ;              03 = Sending G1
                      858  ;              04 = ?
                      859  ;              05 = Getting offset G1
                      860  ;              07 = Getting offset G2
                      861  ;              09 = Sending G2
                      862  ;
                      863  ;***************************************************************************
                      864  
                      865  SCIRCV_ISR:
 83E2 [02] 8B         866       pshh                 ; Push value in index register Hi byte to Stack
 83E3 [03] B616       867       lda     SCS1         ; Load accumulator with value in "SCS1"
                      868                            ;(Clear the SCRF bit by reading this register)
 83E5 [03] B651       869       lda     txmode       ; Load accumulator with value in "txmode" variable
                      870                            ;(Check if we are in the middle of a receive
                      871                            ; new VE/constant)
 83E7 [02] A105       872       cmp     #$05         ; Compare with decimal 5
 83E9 [03] 2706       873       beq     TXMODE_5     ; If the Z bit of CCR is set, branch to TXMODE_5:
 83EB [02] A107       874       cmp     #$07         ; Compare with decimal 7
 83ED [03] 2702       875       beq     TXMODE_7     ; If the Z bit of CCR is set, branch to TXMODE_7:
 83EF [03] 2008       876       bra     CHECK_TXCMD  ; Branch to CHECK_TXCMD:
                      877  
                      878  TXMODE_5:                 ; (Getting offset for either W or J command)
                      879  
                      880  TXMODE_7:
 83F1 [05] 4E1852     881       mov     SCDR,rxoffset   ; Move value in "SCDR" to "rxoffset"
 83F4 [04] 3C51       882       inc     txmode          ; (continue to next mode)
 83F6 [03] CC8461     883       jmp     DONE_RCV        ; Jump to DONE_RCV:
                      884  
                      885  CHECK_TXCMD:
 83F9 [03] B618       886       lda     SCDR       ; Load accumulator with value in "SCDR"
                      887                          ;(Get the command byte)
 83FB [02] A141       888       cmp     #$41       ; Compare it with decimal 65 = ASCII "A"
                      889                          ;(Is the recieve character a big "A" ->
                      890                          ; Download real-time variables?)
 83FD [03] 2712       891       beq     MODE_A     ; If the Z bit of CCR is set, branch to Mode_A:
 83FF [02] A143       892       cmp     #$43       ; Compare it with decimal 67 = ASCII "C"
 8401 [03] 271E       893       beq     MODE_C     ; If the Z bit of CCR is set, branch to Mode_C:
 8403 [02] A156       894       cmp     #$56       ; Compare it with decimal 86 = ASCII "V"
 8405 [03] 272A       895       beq     MODE_V     ; If the Z bit of CCR is set, branch to Mode_V:
 8407 [02] A151       896       cmp     #$51       ; Compare it with decimal 81 = ASCII "Q"
 8409 [03] 2736       897       beq     MODE_Q     ; If the Z bit of CCR is set, branch to Mode_Q:
 840B [02] A149       898       cmp     #'I'       ; Compare it with 'I' = ASCII decimal 73 $49
 840D [03] 2742       899       beq     MODE_I     ; If the Z bit of CCR is set, branch to Mode_I:
 840F [03] 2050       900       bra     DONE_RCV   ; Branch to DONE_RCV:
                      901  
                      902  MODE_A
 8411 [03] 3F4F       903       clr     txcnt          ; Clear "txcnt"
 8413 [02] A601       904       lda     #$01           ; Load accumulator with decimal 1
 8415 [03] B751       905       sta     txmode         ; Copy to "txmode" variable
 8417 [02] A609       906       lda     #$09           ; Load accumulator with decimal 9
                      907                              ;(Set this for 1 more than the number of bytes
                      908                              ; to send)
                      909                              ;(8 Real time variables for MS_IAC)
 8419 [03] B750       910       sta     txgoal         ; Copy to "txgoal" variable
 841B [04] 1614       911       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 841D [04] 1E14       912       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                      913                              ;(Enable transmit interrupt)
 841F [03] 2040       914       bra     DONE_RCV       ; Branch to DONE_RCV:
                      915  
                      916  MODE_C:
 8421 [03] 3F4F       917       clr     txcnt          ; Clear "txcnt"
                      918                              ; (Just send back SECL variable to test comm port)
 8423 [02] A601       919       lda     #$01           ; Load accumulator with decimal 1
 8425 [03] B751       920       sta     txmode         ; Copy to "txmode" variable
 8427 [02] A602       921       lda     #$2            ; Load accumulator with decimal 2
 8429 [03] B750       922       sta     txgoal         ; Copy to "txgoal" variable
 842B [04] 1614       923       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 842D [04] 1E14       924       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                      925                              ;(Enable transmit interrupt)
 842F [03] 2030       926       bra     DONE_RCV       ; Branch to DONE_RCV:
                      927  
                      928  MODE_V:
 8431 [03] 3F4F       929       clr     txcnt          ; Clear "txcnt"
 8433 [02] A603       930       lda     #$03           ; Load accumulator with decimal 3
 8435 [03] B751       931       sta     txmode         ; Copy to "txmode" variable
 8437 [02] A681       932       lda     #$81           ; Load accumulator with decimal 129
                      933                              ;(Set this for 1 more than the number of bytes
                      934                              ; to send)
                      935                              ;(Send 128 bytes, TO table, ranges, EPC stall
                      936                              ; and shift tables + spares)
 8439 [03] B750       937       sta     txgoal         ; Copy to "txgoal" variable
 843B [04] 1614       938       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 843D [04] 1E14       939       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                      940                              ;(Enable transmit interrupt)
 843F [03] 2020       941       bra     DONE_RCV       ; Branch to DONE_RCV:
                      942  
                      943  MODE_Q:
 8441 [03] 3F4F       944       clr     txcnt          ; Clear "txcnt"
                      945                              ; (Just send back SECL variable to test comm port)
 8443 [02] A605       946       lda     #$05           ; Load accumulator with decimal 5
 8445 [03] B751       947       sta     txmode         ; Copy to "txmode" variable
 8447 [02] A602       948       lda     #$2            ; Load accumulator with decimal 2
 8449 [03] B750       949       sta     txgoal         ; Copy to "txgoal" variable
 844B [04] 1614       950       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 844D [04] 1E14       951       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                      952                              ;(Enable transmit interrupt)
 844F [03] 2010       953       bra     DONE_RCV       ; Branch to DONE_RCV:
                      954  
                      955  MODE_I:
 8451 [03] 3F4F       956       clr     txcnt          ; Clear "txcnt"
 8453 [02] A609       957       lda     #$09           ; Load accumulator with decimal 9
                      958                              ; (txmode = sending Cons Group 2)
 8455 [03] B751       959       sta     txmode         ; Copy to "txmode" variable
 8457 [02] A641       960       lda     #$41           ; Load accumulator with decimal 65
                      961                              ;(Set this for 1 more than the number of bytes
                      962                              ; to send)
                      963                              ;(Send 64 bytes, constants + spares)
 8459 [03] B750       964       sta     txgoal         ; Copy to "txgoal" variable
 845B [04] 1614       965       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 845D [04] 1E14       966       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                      967                              ;(Enable transmit interrupt)
 845F [03] 2000       968       bra     DONE_RCV       ; Branch to DONE_RCV:
                      969  
                      970  DONE_RCV
 8461 [02] 8A         971       pulh                 ; Pull value from Stack to index register Hi byte
 8462 [07] 80         972       rti                  ; Return from interrupt
                      973  
                      974  ;****************************************************************************
                      975  ;----------------- Transmit Character Interrupt Handler --------------------
                      976  ;****************************************************************************
                      977  
                      978  SCITX_ISR:
 8463 [02] 8B         979       pshh                  ; Push value in index register Hi byte to Stack
 8464 [03] B616       980       lda     SCS1          ; Load accumulator with value in "SCS1"
                      981                             ; (Clear the SCRF bit by reading this register)
 8466 [01] 8C         982       clrh                  ; Clear index register Hi byte
 8467 [03] B64F       983       lda     txcnt         ; Load accumulator with value in "txcnt" variable
 8469 [01] 97         984       tax                   ; Transfer value in accumulator to index register


MS_IAC.asm             Assembled with CASM08Z  10/20/12  8:49:28 PM  PAGE 9
MC68HC908GP32 User Bootloader


                      985                             ; Lo byte
 846A [03] B651       986       lda     txmode        ; Load accumulator with value in "txmode" variable
 846C [02] A105       987       cmp     #$05          ; Compare it with decimal 5
 846E [03] 2704       988       beq     IN_Q_MODE     ; If the Z bit of CCR is set, branch to IN_Q_MODE:
                      989  
                      990  IN_A_OR_C_MODE:
 8470 [03] E640       991       lda     secH,X      ; Load accumulator with value in address "secH",
                      992                           ; offset in index register Lo byte
 8472 [03] 2003       993       bra     CONT_TX     ; Branch to CONT_TX:
                      994  
                      995  IN_Q_MODE
 8474 [04] D6E000     996       lda     REVNUM,X   ; Load accumulator with value in address "REVNUM",
                      997                          ; offset in index register Lo byte
                      998  
                      999  CONT_TX:
 8477 [03] B718      1000       sta     SCDR           ; Copy to "SCDR" variable (Send char)
 8479 [03] B64F      1001       lda     txcnt          ; Load accumulator with value in "txcnt" variable
 847B [01] 4C        1002       inca                   ; Increment value in accumulator
                     1003                              ;(Increase number of chars sent)
 847C [03] B74F      1004       sta     txcnt          ; Copy to "txcnt" variable
 847E [03] B150      1005       cmp     txgoal         ; Compare it to value in "txgoal" (Check if done)
 8480 [03] 260A      1006       bne     DONE_XFER      ; If the Z bit of CCR is clear, branch to DONE_XFER:
                     1007                              ;(Branch if NOT done to DONE_XFER !?!?!)
 8482 [03] 3F4F      1008       clr     txcnt          ; Clear "txcnt"
 8484 [03] 3F50      1009       clr     txgoal         ; Clear "txgoal"
 8486 [03] 3F51      1010       clr     txmode         ; Clear "txmode"
 8488 [04] 1714      1011       bclr    TE,SCC2        ; Clear "TE" bit of SCC2 (Disable Transmit)
 848A [04] 1F14      1012       bclr    SCTIE,SCC2     ; Clear "SCTIE" bit of SCC2
                     1013                              ;(Disable transmit interrupt)
                     1014  
                     1015  DONE_XFER
 848C [02] 8A        1016       pulh                   ; Pull value from Stack to index register Hi byte
 848D [07] 80        1017       rti                    ; Return from interrupt
                     1018  
                     1019  
                     1020  ;****************************************************************************
                     1021  ; - ADC conversion complete Interrupt
                     1022  ;   ADC channel is set by "adsel" variable which starts at 0. This reads
                     1023  ;   channel 4, which is "BAT". When the conversion complete interrupt is
                     1024  ;   requested the current value in "BAT" is averaged with the result of
                     1025  ;   the ADC in the ADC Data Register (ADR) and stored as current "BAT"
                     1026  ;   This is to smooth out ADC "jitter". The "adsel" variable is then
                     1027  ;   incremented to the next channel and the process repeats until the 3
                     1028  ;   channels are read, at which time, "adsel" is set at 0 to start the
                     1029  ;   sequence again.
                     1030  ;****************************************************************************
                     1031  
                     1032  
                     1033  ADC_ISR:
 848E [04] 1448      1034       bset    adcc,inputs  ; Set "adcc" bit of "inputs" variable
 8490 [02] 8B        1035       pshh              ; Push index register Hi byte on to stack
                     1036                         ;(Do this because processor does not stack H)
 8491 [01] 8C        1037       clrh              ; Clear index register Hi byte
 8492 [03] B64E      1038       lda     adsel     ; Load accumulator with value in ADC Channel Selector
 8494 [01] 97        1039       tax               ; Transfer value in accumulator to index register Lo
 8495 [03] B63D      1040       lda     ADR       ; Load accumulator with value in ADC Data Register
                     1041                         ;(this also clears conversion complete and
                     1042                         ; interrupt enable bit)
 8497 [03] EB42      1043       add     BAT,x     ; Add ADR and BAT,x (Add the two values)
 8499 [01] 46        1044       rora              ; Rotate right through carry (Divide by 2)
 849A [03] E742      1045       sta     BAT,x     ; Copy result to address BAT,x
 849C [03] B64E      1046       lda     adsel     ; Load accumulator with value in ADC Channel Selector
 849E [01] 4C        1047       inca              ; Increment accumulator
 849F [03] B74E      1048       sta     adsel     ; Copy to ADC Channel Selector Variable
 84A1 [02] 8A        1049       pulh              ; Pull value from stack to index register Hi byte
 84A2 [07] 80        1050       rti               ; Return from interrupt
                     1051  
                     1052  
                     1053  ;**************************************************************************
                     1054  ;==========================================================================
                     1055  ;- Dummy ISR vector - there just to keep the assembler happy
                     1056  ;==========================================================================
                     1057  ;**************************************************************************
                     1058  
                     1059  Dummy:
 84A3 [07] 80        1060       rti     ; Return from interrupt
                     1061  
                     1062  ;****************************************************************************
                     1063  ;-------------------Constants not possible to burn--------------------------
                     1064  ;****************************************************************************
                     1065  
 E000                1066          org     $E000      ; (57344)
                     1067  
                     1068  
                     1069  REVNUM:
 E000      14        1070          db      20T     ; Revision 1.0
                     1071  
 E001      202A2A20  1072  Signature db 32T,'** MS_IAC Embedded Code by RJH *'
           4D535F49 
           41432045 
           6D626564 
           64656420 
           436F6465 
           20627920 
           524A4820 
           2A 
                     1073  
                     1074  
                     1075  ;****************************************************************************
                     1076  ; - Flash Configuration Tables and Constants (copied into RAM at start up)
                     1077  ;****************************************************************************
                     1078  
                     1079  ;        org     $E100      ; SE100 to $E1C0 (57600 to 57792)
                     1080  
                     1081  ms_rf_start_f:
                     1082  
                     1083  ;****************************************************************************
                     1084  ; - First group of 64 bytes (not used)
                     1085  ;****************************************************************************
                     1086  
                     1087  ms_rf_end_f:
                     1088  
                     1089  ;***************************************************************************
                     1090  ; - Boot Loader routine goes here
                     1091  ;***************************************************************************
                     1092  
 E022                1093       include "boot_r12.asm"       ; Include Boot Loader routine
                     1094  ;=====================================
                     1095  ; MEGASQUIRT BOOTLOADER VERSION - Dec 2001
                     1096  ;
                     1097  ; Mods by Bruce Bowling
                     1098  ;
                     1099  ; Corrected bug in BootReset 5
                     1100  ;
                     1101  ;=====================================
                     1102  
                     1103  ;********************************************************************************************
                     1104  ;*                                                                                          *
                     1105  ;*  Bootloader - MC68HC908GP32                                                              *
                     1106  ;*                                                          Copyright (c) Motorola, 2001    *
                     1107  ;*                                                                                          *
                     1108  ;********************************************************************************************
                     1109  ;*                                                                                          *
                     1110  ;*  This file provides the low level assembly bootloader routine.                           *
                     1111  ;*  This program has been specially tailored towards the MC68HC908GP32.                     *
                     1112  ;*                                                                                          *
                     1113  ;********************************************************************************************
                     1114  ;*                                                                                          *
                     1115  ;*  File name:          boot.asm                        Current Release Level:      1.1     *
                     1116  ;*  Last Edit Date:     07-Jun-01                       Classification:             ES      *
                     1117  ;*                                                                                          *
                     1118  ;*  Include Files:      gp32.equ            : MC68HC908GP32 MCU definitions                 *
                     1119  ;*                                                                                          *
                     1120  ;*  Assembler:          P&E's CASM08Z                   Version:    3.16                    *
                     1121  ;*                                                                                          *
                     1122  ;*  Target:             MC68HC908GP32                                                       *
                     1123  ;*                                                                                          *
                     1124  ;*  Documentation:      MC68HC908GP32/H  Rev 3                                              *
                     1125  ;*                      Motorola Microcontroller Technical Data                             *
                     1126  ;*                                                                                          *
                     1127  ;********************************************************************************************
                     1128  ;*                                                                                          *
                     1129  ;*  Author:             DHJ Klotz                                                           *
                     1130  ;*  First Release:      26-Feb-00                                                           *
                     1131  ;*                                                                                          *
                     1132  ;*  Update History:                                                                         *
                     1133  ;*                                                                                          *
                     1134  ;*  Rev     Date       Author  Description of Change                                        *
                     1135  ;*  ------  ---------  ------  -----------------------------------------------------------  *
                     1136  ;*  ES 1.0  26-Feb-00  DHJK    Initial release for HC908 Seminar 2000.                      *
                     1137  ;*  ES 1.1  07-Jun-01  DHJK    Improved functionality for Application Note.                 *
                     1138  ;*                                                                                          *
                     1139  ;********************************************************************************************
                     1140  ;*                                                                                          *
                     1141  ;*  Notes:                                                                                  *
                     1142  ;*    - In order to minimize overall program size, subroutines are position within the      *
                     1143  ;*      core bootloader routine.  Although this can make the program somewhat difficult     *
                     1144  ;*      to read and follow, it permits the use of relative branch opcodes.  Most of         *
                     1145  ;*      these subroutines can be called from an external application program.               *
                     1146  ;*                                                                                          *
                     1147  ;********************************************************************************************
                     1148  ;*                                                                                          *
                     1149  ;*    Motorola reserves the right to make changes without further notice to any product     *
                     1150  ;*    herein to improve reliability, function, or design.  Motorola does not assume any     *
                     1151  ;*    liability arising out of the application or use of any product, circuit, or software  *
                     1152  ;*    described herein; neither does it convey any license under its patent rights nor the  *
                     1153  ;*    rights of others.  Motorola products are not designed, intended, or authorized for    *
                     1154  ;*    use as components in systems intended for surgical implant into the body, or other    *
                     1155  ;*    applications intended to support life, or for any other application in which the      *
                     1156  ;*    failure of the Motorola product could create a situation where personal injury or     *
                     1157  ;*    death may occur.  Should Buyer purchase or use Motorola products for any such         *
                     1158  ;*    intended or unauthorized application, Buyer shall indemnify and hold Motorola and     *
                     1159  ;*    its officers, employees, subsidiaries, affiliates, and distributors harmless against  *
                     1160  ;*    all claims, costs, damages, and expenses, and reasonable attorney fees arising out    *
                     1161  ;*    of, directly or indirectly, any claim of personal injury or death associated with     *
                     1162  ;*    such unintended or unauthorized use, even if such claim alleges that Motorola was     *
                     1163  ;*    negligent regarding the design or manufacture of the part.                            *
                     1164  ;*                                                                                          *
                     1165  ;*    Motorola and the Motorola logo are registered trademarks of Motorola Ltd.             *
                     1166  ;*                                                                                          *
                     1167  ;********************************************************************************************
                     1168  
                     1169  ;*  Microcontroller Peripheral Equates  *****************************************************
                     1170  ;*
                     1171  
                     1172  ; uncomment out if standalone
 E022                1173          list
                     1174  
                     1175  
                     1176  ;*  Flash Memory Specifics  =================================================================
                     1177  ;*
 E022                1178  boot_start:     equ     $FB00               ; starting address of protected Bootloader
 E022                1179  flash_protect:  equ     {boot_start>7&$FF}  ; Flash Block Protect Register value
 E022                1180  flash_page:     equ     128                 ; Flash Erase Page size
 E022                1181  flash_row:      equ     64                  ; Flash Program Row size
 E022                1182  flash_erased:   equ     $FF                 ; Flash erased state
                     1183  
                     1184  
                     1185  ;*  RAM Utilization  ========================================================================
                     1186  ;*
 0040                1187          org     ram_start                   ; begining of RAM
                     1188  
 0040                1189  count:          ds      1                   ; 0040:     => data counter
 0041                1190  temp_sp:        ds      2                   ; 0041:0042 => temporary Stack Pointer storage
 0043                1191  flash_first:    ds      2                   ; 0043:0044 => first Flash reprogram address
 0045                1192  flash_last:     ds      2                   ; 0045:0046 => last Flash reprogram address + 1
                     1193  
 0047                1194  ram_exec:       equ     $01ED               ; start of executable RAM space
                     1195  
                     1196  
                     1197  ;*  Bootloader Customization Parameters  ====================================================
                     1198  ;*
 0047                1199  user_scbr:      equ     boot_start-61       ; FAC3      => SCBR register
 0047                1200  init_scbr:      equ     $12                 ;   default set SCI for 9600 kbaud
                     1201  
 0047                1202  user_config1:   equ     boot_start-60       ; FAC4      => CONFIG1 register
 0047                1203  init_config1:   equ     %00000001           ;   default CONFIG1
                     1204  
 0047                1205  user_config2:   equ     boot_start-59       ; FAC5      => CONFIG2 register
 0047                1206  init_config2:   equ     %00000001           ;   default CONFIG2
                     1207  
 0047                1208  user_first:     equ     boot_start-58       ; FAC6:FAC7 => 1st application address
 0047                1209  init_first:     equ     rom_start           ;   default first Flash address
                     1210  
 0047                1211  user_last:      equ     boot_start-56       ; FAC8:FAC9 => last application address
 0047                1212  init_last:      equ     boot_start          ;   default last Flash address
                     1213  
                     1214  
                     1215  ;*  Application Program Jump Vector Table  ==================================================
                     1216  ;*
                     1217                                              ; FACA      => "JMP ext" instruction (opcode $CC)
 0047                1218  user_timebase:  equ     boot_start-54       ; FACB:FACC => user Timebase jump vector
                     1219  
                     1220                                              ; FACD      => "JMP ext" instruction (opcode $CC)
 0047                1221  user_ADC:       equ     boot_start-51       ; FACE:FACF => user ADC jump vector
                     1222  
                     1223                                              ; FAD0      => "JMP ext" instruction (opcode $CC)
 0047                1224  user_keyboard:  equ     boot_start-48       ; FAD1:FAD2 => user Keyboard jump vector
                     1225  
                     1226                                              ; FAD3      => "JMP ext" instruction (opcode $CC)
 0047                1227  user_SCItx:     equ     boot_start-45       ; FAD4:FAD5 => user SCI transmit jump vector
                     1228  
                     1229                                              ; FAD6      => "JMP ext" instruction (opcode $CC)
 0047                1230  user_SCIrx:     equ     boot_start-42       ; FAD7:FAD8 => user SCI receive jump vector
                     1231  
                     1232                                              ; FAD9      => "JMP ext" instruction (opcode $CC)
 0047                1233  user_SCIerr:    equ     boot_start-39       ; FADA:FADB => user SCI error jump vector
                     1234  
                     1235                                              ; FADC      => "JMP ext" instruction (opcode $CC)
 0047                1236  user_SPItx:     equ     boot_start-36       ; FADD:FADE => user SPI transmit jump vector
                     1237  
                     1238                                              ; FADF      => "JMP ext" instruction (opcode $CC)
 0047                1239  user_SPIrx:     equ     boot_start-33       ; FAE0:FAE1 => user SPI receive jump vector
                     1240  
                     1241                                              ; FAE2      => "JMP ext" instruction (opcode $CC)
 0047                1242  user_Tim2Ov:    equ     boot_start-30       ; FAE3:FAE4 => user Timer 2 overflow jump vector
                     1243  
                     1244                                              ; FAE5      => "JMP ext" instruction (opcode $CC)
 0047                1245  user_Tim2Ch1:   equ     boot_start-27       ; FAE6:FAE7 => user Timer 2 channel 1 jump vector
                     1246  
                     1247                                              ; FAE8      => "JMP ext" instruction (opcode $CC)
 0047                1248  user_Tim2Ch0:   equ     boot_start-24       ; FAE9:FAEA => user Timer 2 channel 0 jump vector
                     1249  
                     1250                                              ; FAEB      => "JMP ext" instruction (opcode $CC)
 0047                1251  user_Tim1Ov:    equ     boot_start-21       ; FAEC:FAED => user Timer 1 oveflow jump vector
                     1252  
                     1253                                              ; FAEE      => "JMP ext" instruction (opcode $CC)
 0047                1254  user_Tim1Ch1:   equ     boot_start-18       ; FAEF:FAF0 => user Timer 1 channel 1 jump vector
                     1255  
                     1256                                              ; FAF1      => "JMP ext" instruction (opcode $CC)
 0047                1257  user_Tim1Ch0:   equ     boot_start-15       ; FAF2:FAF3 => user Timer 1 channel 0 jump vector
                     1258  
                     1259                                              ; FAF4      => "JMP ext" instruction (opcode $CC)
 0047                1260  user_PLL:       equ     boot_start-12       ; FAF5:FAF6 => user PLL jump vector
                     1261  
                     1262                                              ; FAF7      => "JMP ext" instruction (opcode $CC)
 0047                1263  user_IRQ:       equ     boot_start-9        ; FAF8:FAF9 => user IRQ jump vector
                     1264  
                     1265                                              ; FAFA      => "JMP ext" instruction (opcode $CC)
 0047                1266  user_SWI:       equ     boot_start-6        ; FAFB:FAFC => user SWI jump vector
                     1267  
                     1268                                              ; FAFD      => "JMP ext" instruction (opcode $CC)
 0047                1269  user_reset:     equ     boot_start-3        ; FAFE:FAFF => user Reset interrupt jump vector
                     1270  
                     1271  
                     1272  ;*  Bootloader Program  *********************************************************************
                     1273  ;*
                     1274  
 0047                1275  init_stack:     equ     ram_exec-1          ; initialize stack pointer to before RAM routine
                     1276  ;
 0047                1277  init_scc1:      equ     %01000000           ; enable SCI, 8-bits, no parity, 1 stop
 0047                1278  init_scc2:      equ     %00001100           ; no interupts, receiver and transmitter enabled
                     1279  
 FB00                1280          org     boot_start                  ; beginning of code
                     1281  
                     1282  
                     1283  ;*  CGM Parameter Tables  ===================================================================
                     1284  ;*
                     1285  ;*  The following CGM parameter tables are placed here so that they are easy to access via
                     1286  ;*  external application programs.
                     1287  ;*
                     1288  ;*  7.3728 MHz bus frequency parameters (located at address "boot_start").
                     1289  ;*
                     1290  bus7372800:
 FB00      02        1291          db      $02                         ; P & E
 FB01      C0        1292          db      $C0                         ; L
 FB02      03        1293          db      $03                         ; N msb
 FB03      84        1294          db      $84                         ; N lsb
                     1295  
                     1296  ;*  8.003584 MHz bus frequency parameters (located at address "boot_start+4").
                     1297  ;*
                     1298  bus8003584:
 FB04      02        1299          db      $02                         ; P & E
 FB05      D0        1300          db      $D0                         ; L
 FB06      03        1301          db      $03                         ; N msb
 FB07      D1        1302          db      $D1                         ; N lsb
                     1303  
                     1304  
                     1305  ;*  Power-on Reset  =========================================================================
                     1306  ;* MODIFIED FOR MEGASQUIRT - Initialization code here
                     1307  ;*
                     1308  
                     1309  BootReset:
 FB08 [01] 4F        1310          clra
 FB09 [04] C7FFFF    1311          sta     copctl
 FB0C [04] 6E011E    1312          mov     #%00000001,config2
 FB0F [04] 6E011F    1313          mov     #%00000001,config1
 FB12 [03] 450240    1314          ldhx    #ram_last+1
 FB15 [02] 94        1315          txs
                     1316  
 FB16 [03] 45FB00    1317          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FB19 [04] AD22      1318          bsr     PLLset                      ; change bus speed
                     1319  
 FB1B [02] A600      1320          lda      #%00000000
 FB1D [03] B705      1321          sta      ddrb                       ; ADC Channels - inputs
                     1322  
 FB1F [02] A670      1323          lda     #%01110000                  ; Set up ADC for divide by 8 and internal clock
 FB21 [03] B73E      1324          sta     adclk
 FB23 [02] A604      1325          lda     #%00000100                  ; No interrupt, channel AD4 selected
 FB25 [03] B73C      1326          sta     adscr
 FB27 [05] 0F3CFD    1327          brclr   coco,adscr,*                ; wait until conversion complete
                     1328  
 FB2A [03] B63D      1329          lda     adr
 FB2C [02] A105      1330          cmp     #$05                        ; Check for low voltage on divider
 FB2E [03] 2529      1331          blo     BootReset1                  ; enter bootloader if low voltage
                     1332  
                     1333  ;
                     1334  ;   Test application reset vector.
                     1335  ;
 FB30 [04] C6FAFE    1336          lda     user_reset+1                ; get the MSB of the user reset vector
 FB33 [02] A1FF      1337          cmp     #flash_erased               ; check if it's erased
 FB35 [03] 2722      1338          beq     BootReset1                  ; enter bootloader if erased
 FB37 [03] 20C4      1339          bra     user_reset                  ; else, jump to user reset jump vector
                     1340  
                     1341  
                     1342  ;*  External CGM PLL Bus Frequency Change Subroutine  =======================================
                     1343  ;*
                     1344  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     1345  ;*  the data being pointed to by X:A (which is a common implementation for pointer parameter
                     1346  ;*  passing used by HC08 C compilers).
                     1347  ;*
                     1348  ;*  C function prototype:
                     1349  ;*
                     1350  ;*      void CGMChange (char parameters*);
                     1351  ;*
                     1352  ;*  Calling convention:
                     1353  ;*
                     1354  ;*      ldx     #{parameters>8}             ; get CGM parameter table address msb
                     1355  ;*      lda     #{parameters&$FF}           ; get CGM parameter table address lsb
                     1356  ;*      jsr     CGMChange                   ; go change the bus speed
                     1357  ;*
                     1358  ;*  Returns:    nothing
                     1359  ;*
                     1360  ;*  Changes:    H:X
                     1361  ;*
                     1362  CGMChange:
 FB39 [02] 87        1363          psha                                ; save pointer lsb on stack
 FB3A [02] 89        1364          pshx                                ; save pointer msb on stack
 FB3B [02] 8A        1365          pulh                                ; initialize
 FB3C [02] 88        1366          pulx                                ;  H:X points to data array
                     1367  
                     1368  
                     1369  ;*  Internal CGM PLL Bus Frequency Change Subroutine  =======================================
                     1370  ;*
                     1371  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     1372  ;*  the data being pointed to by H:X.
                     1373  ;*
                     1374  ;*  Calling convention:
                     1375  ;*
                     1376  ;*      ldhx    #parameters                 ; point to CGM parameter table
                     1377  ;*      jsr     PLLset                      ; go change the bus speed
                     1378  ;*
                     1379  ;*  Returns:    nothing
                     1380  ;*
                     1381  ;*  Changes:    H:X
                     1382  ;*
                     1383  PLLset:
 FB3D [04] 1936      1384          bclr    BCS,pctl                    ; select external reference as base clock
 FB3F [04] 1B36      1385          bclr    PLLON,pctl                  ; turn off PLL
 FB41 [04] 7E36      1386          mov     x+,pctl                     ; program P & E
 FB43 [04] 7E3A      1387          mov     x+,pmrs                     ; program L
 FB45 [04] 7E38      1388          mov     x+,pmsh                     ; program N msb
 FB47 [04] 7E39      1389          mov     x+,pmsl                     ; program N lsb
 FB49 [04] 1E37      1390          bset    AUTO,pbwc                   ; enable automatic bandwidth control
 FB4B [04] 1A36      1391          bset    PLLON,pctl                  ; turn on PLL
                     1392  PLLwait:
 FB4D [05] 0D37FD    1393          brclr   LOCK,pbwc,PLLwait           ; wait for PLL to lock (Note: won't simulate)
 FB50 [04] 1836      1394          bset    BCS,pctl                    ; select VCO as base clock
 FB52 [04] 81        1395          rts                                 ; return
                     1396  
                     1397  
                     1398  ;*  PutChar Subroutine  =====================================================================
                     1399  ;*
                     1400  ;*  This subroutine will output the character passed in ACC to the SCI.
                     1401  ;*
                     1402  ;*  C function prototype:
                     1403  ;*
                     1404  ;*      void PutChar (char data);
                     1405  ;*
                     1406  ;*  Calling convention:
                     1407  ;*
                     1408  ;*      lda     data                        ; get character
                     1409  ;*      jsr     PutChar                     ; go output it
                     1410  ;*
                     1411  ;*  Returns:    nothing
                     1412  ;*
                     1413  ;*  Changes:    nothing
                     1414  ;*
                     1415  PutChar:
 FB53 [05] 0F16FD    1416          brclr   SCTE,scs1,PutChar           ; wait until SCI transmitter is empty
 FB56 [03] B718      1417          sta     scdr                        ; output character to the SCI
 FB58 [04] 81        1418          rts                                 ; return
                     1419  
                     1420  
                     1421  ;*  Power-on Reset Bootloader Entry  ========================================================
                     1422  ;*
                     1423  ;*  This is where the Bootloader starts from power-on reset.
                     1424  ;*
                     1425  BootReset1:
                     1426  ;
                     1427  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     1428  ;
                     1429  ;        ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
                     1430  ;        bsr     PLLset                      ; change bus speed
                     1431  ;
                     1432  ;   Copy user Flash parameters into RAM.
                     1433  ;
 FB59 [03] 45FAC3    1434          ldhx    #user_scbr                  ; point to first parameter
 FB5C [04] 7E40      1435          mov     x+,count                    ; copy user SCI baud rate
 FB5E [04] 7E41      1436          mov     x+,temp_sp                  ; copy user Configuration Register 1
 FB60 [04] 7E42      1437          mov     x+,temp_sp+1                ; copy user Configuration Register 2
 FB62 [04] 7E43      1438          mov     x+,flash_first              ; copy first user Flash address MSB
 FB64 [04] 7E44      1439          mov     x+,flash_first+1            ; copy first user Flash address LSB
 FB66 [04] 7E45      1440          mov     x+,flash_last               ; copy last user Flash address MSB
 FB68 [04] 7E46      1441          mov     x+,flash_last+1             ; copy last user Flash address LSB
 FB6A [03] 450040    1442          ldhx    #count                      ; point to first parameter, now saved in RAM
 FB6D [02] 94        1443          txs                                 ; use SP to point to parameter list in RAM
                     1444  ;
                     1445  ;   Test the user SCI baud rate.  The user can override the default baud rate.
                     1446  ;
 FB6E [02] 86        1447          pula                                ; get user SCBR initial data
 FB6F [02] A1FF      1448          cmp     #flash_erased               ; check if it's erased
 FB71 [03] 2602      1449          bne     BootReset2                  ; skip if not
 FB73 [02] A612      1450          lda     #init_scbr                  ; else, force default value
                     1451  BootReset2:
 FB75 [03] B740      1452          sta     count                       ; save initial SCI baud rate
                     1453  ;
                     1454  ;   Program the write-once configuration registers.  The user can override the defaults.
                     1455  ;
 FB77 [02] 86        1456          pula                                ; get user Configuration Register 1 initial data
 FB78 [02] A1FF      1457          cmp     #flash_erased               ; check if it's erased
 FB7A [03] 2602      1458          bne     BootReset3                  ; skip if not
 FB7C [02] A601      1459          lda     #init_config1               ; else, force default value
                     1460  BootReset3:
 FB7E [03] B71F      1461          sta     config1                     ; initialize Configuration Register 1
                     1462  ;
 FB80 [02] 86        1463          pula                                ; get user Configuration Register 2 initial data
 FB81 [02] A1FF      1464          cmp     #flash_erased               ; check if it's erased
 FB83 [03] 2602      1465          bne     BootReset4                  ; skip if not
 FB85 [02] A601      1466          lda     #init_config2               ; else, force default value
                     1467  BootReset4:
 FB87 [03] B71E      1468          sta     config2                     ; initialize Configuration Register 2
                     1469  ;
                     1470  ;   Program the first and last user Flash addresses.  The user can override the defaults.
                     1471  ;
 FB89 [02] 88        1472          pulx                                ; get first user Flash address LSB
 FB8A [02] 8A        1473          pulh                                ; get first user Flash address MSB
 FB8B [03] 65FFFF    1474          cphx    #$FFFF                      ; check if it's erased
 FB8E [03] 2608      1475          bne     BootReset5                  ; skip if not
 FB90 [02] A600      1476          lda     #{init_first&$FF}           ; else, get default first user address LSB
 FB92 [02] 87        1477          psha                                ;  save it
 FB93 [02] A680      1478          lda     #{init_first>8}             ;  and get default first user address MSB
 FB95 [02] 87        1479          psha                                ;  save it
 FB96 [02] A702      1480          ais     #2                          ; move stack pointer back
                     1481  ;
                     1482  BootReset5:
 FB98 [02] 88        1483          pulx                                ; get last user Flash address LSB
 FB99 [02] 8A        1484          pulh                                ; get last user Flash address MSB
 FB9A [03] 65FFFF    1485          cphx    #$FFFF                      ; check if it's erased
 FB9D [03] 2606      1486          bne     BootReset6                  ; skip if not
                     1487  ;        ldx     #{init_last&$FF}            ; else, get default last user address LSB
 FB9F [02] A600      1488          lda     #{init_last&$FF}            ; else, get default last user address LSB
 FBA1 [02] 87        1489          psha                                ;  save it
 FBA2 [02] A6FB      1490          lda     #{init_last>8}              ;  and get default last user address MSB
 FBA4 [02] 87        1491          psha                                ;  save it
                     1492  BootReset6:
                     1493  
                     1494  
                     1495  ;*  User Bootloader Entry  ==================================================================
                     1496  ;*
                     1497  ;*  The user can launch the bootloader from here.
                     1498  ;*
                     1499  BootResetUser:
 FBA5 [02] 9B        1500          sei                                 ; disable all interrupts
 FBA6 [04] C7FFFF    1501          sta     copctl                      ; clear the COP counter
 FBA9 [03] 4501ED    1502          ldhx    #init_stack+1               ; initialize
 FBAC [02] 94        1503          txs                                 ;  the stack pointer
                     1504  ;
                     1505  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     1506  ;
 FBAD [03] 45FB00    1507          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FBB0 [04] AD8B      1508          bsr     PLLset                      ; change bus speed
                     1509  ;
                     1510  ;   Take over and initialize the SCI.  The user can override the default baud rate.
                     1511  ;
 FBB2 [05] 4E4019    1512          mov     count,scbr                  ; initialize SCI baud rate
 FBB5 [04] 6E4013    1513          mov     #init_scc1,scc1             ; initialize SCI Control Register 1
 FBB8 [04] 6E0C14    1514          mov     #init_scc2,scc2             ; initialize SCI Control Register 2
                     1515  
                     1516  
                     1517  ;*  Main Bootloader Control Loop  ==========================================================
                     1518  ;*
                     1519  ;*  Bootloader program supports the following commands:
                     1520  ;*
                     1521  ;*      'X'  = Exit and execute user program via user reset vector
                     1522  ;*      'P'  = Program Flash via S-Records
                     1523  ;*      'W'  = Erase Flash (Wipe)
                     1524  ;*      'U'  = Upgrade Flash by erasing all user space, then programming via S-Records
                     1525  ;*      'H'  = Help
                     1526  ;*      '?'  = Help
                     1527  ;*
                     1528  ;*  Note: avoid using 'A' - 'F', as these are valid S-Record characters that could get
                     1529  ;*        misinterpreted.
                     1530  ;*
 FBBB                1531  cmd_exit:       equ     'X'                 ; Exit command
 FBBB                1532  cmd_program:    equ     'P'                 ; Program Flash command
 FBBB                1533  cmd_erase:      equ     'W'                 ; Erase Flash command (Wipe)
 FBBB                1534  cmd_upgrade:    equ     'U'                 ; Upgrade Flash command
 FBBB                1535  cmd_help:       equ     'H'                 ; Help command
 FBBB                1536  cmd_help1:      equ     $1F                 ; '?' = alternate Help command
                     1537  ;
                     1538  Boot:
 FBBB [03] 45FD88    1539          ldhx    #msg_hello                  ; point to hello message
 FBBE [04] AD38      1540          bsr     PrintString                 ; output it
 FBC0 [05] CDFC6A    1541          jsr     GetChar                     ; get a character from the SCI
 FBC3 [02] A10D      1542          cmp     #ascii_CR                   ; check for ASCII carriage return
 FBC5 [03] 27F4      1543          beq     Boot                        ; just loop back if so
 FBC7 [04] AD8A      1544          bsr     PutChar                     ; else, echo character back
 FBC9 [02] A4DF      1545          and     #$DF                        ; convert to uppercase
                     1546  
                     1547  
                     1548  ;*  Execute User Program Command Check  =====================================================
                     1549  ;*
 FBCB [02] A158      1550          cmp     #cmd_exit                   ; check for Exit command
 FBCD [03] 2611      1551          bne     Boot2                       ; skip if not
 FBCF [04] C6FAFE    1552          lda     user_reset+1                ; else, get the MSB of the user reset vector
 FBD2 [02] A1FF      1553          cmp     #flash_erased               ; check if it's erased
 FBD4 [03] 2703      1554          beq     Boot1                       ; skip if not
 FBD6 [03] CCFAFD    1555          jmp     user_reset                  ; else, jump to user reset jump vector
                     1556  ;
                     1557  ;   Remain in the Bootloader if the MSB of the User Reset Jump Vector is erased.
                     1558  ;
                     1559  Boot1:
 FBD9 [03] 45FDE0    1560          ldhx    #msg_noreset                ; point to error message
 FBDC [04] AD1A      1561          bsr     PrintString                 ; output it
 FBDE [03] 20DB      1562          bra     Boot                        ; jump back to top
                     1563  
                     1564  
                     1565  ;*  Erase Flash Command Check  ==============================================================
                     1566  ;*
                     1567  Boot2:
 FBE0 [02] A157      1568          cmp     #cmd_erase                  ; check for Erase Flash command
 FBE2 [03] 2618      1569          bne     Boot3                       ; skip if not
 FBE4 [04] AD76      1570          bsr     EraseFlash                  ; else, go erase Flash
                     1571  ;
                     1572  ;   Common Bootloader command completion points.
                     1573  ;
                     1574  BootDone:
 FBE6 [03] 45FDB4    1575          ldhx    #msg_complete               ; point to operation complete message
                     1576  BootDone1:
 FBE9 [04] AD0D      1577          bsr     PrintString                 ; output it
                     1578  BootDone2:
 FBEB [03] 20CE      1579          bra     Boot                        ; jump back to top
                     1580  
                     1581  
                     1582  ;*  External PutString Subroutine  ==========================================================
                     1583  ;*
                     1584  ;*  This subroutine will output the null terminated string pointed to by X:A (which is a
                     1585  ;*  common implementation for pointer parameter passing used by HC08 C compilers) to the SCI.
                     1586  ;*
                     1587  ;*  C function prototype:
                     1588  ;*
                     1589  ;*      void PutString (char string*);
                     1590  ;*
                     1591  ;*  Calling convention:
                     1592  ;*
                     1593  ;*      ldx     #{string>8}                 ; get CGM parameter table address msb
                     1594  ;*      lda     #{string&$FF}               ; get CGM parameter table address lsb
                     1595  ;*      jsr     PutString                   ; go change the bus speed
                     1596  ;*
                     1597  ;*  Returns:    nothing
                     1598  ;*
                     1599  ;*  Changes:    H:X
                     1600  ;*
                     1601  PutString:
 FBED [02] 87        1602          psha                                ; save pointer lsb on stack
 FBEE [02] 89        1603          pshx                                ; save pointer msb on stack
 FBEF [02] 8A        1604          pulh                                ; initialize
 FBF0 [02] 88        1605          pulx                                ;  H:X points to data array
 FBF1 [03] 2005      1606          bra     PrintString                 ; go output string
                     1607  
                     1608  
                     1609  ;*  PrintString Subroutine  =================================================================
                     1610  ;*
                     1611  ;*  This subroutine will output the null teminated string pointed to by H:X to the SCI.
                     1612  ;*
                     1613  ;*  Calling convention:
                     1614  ;*
                     1615  ;*      ldhx    #string                     ; point to start of string
                     1616  ;*      jsr     PrintString                 ; go output it
                     1617  ;*
                     1618  ;*  Returns:    nothing
                     1619  ;*
                     1620  ;*  Changes:    H:X
                     1621  ;*
                     1622  PrintString1:
 FBF3 [05] 0F16FD    1623          brclr   SCTE,scs1,PrintString1      ; wait until SCI transmitter is empty
 FBF6 [04] 7E18      1624          mov     x+,scdr                     ; output character to the SCI and advance pointer
                     1625  PrintString:
 FBF8 [02] 7D        1626          tst     ,x                          ; test string character
 FBF9 [03] 26F8      1627          bne     PrintString1                ; loop back if not null
 FBFB [04] 81        1628          rts                                 ; else, return
                     1629  
                     1630  
                     1631  ;*  Program Flash Command Check  ============================================================
                     1632  ;*
                     1633  Boot3:
 FBFC [02] A150      1634          cmp     #cmd_program                ; check for Program Flash command
 FBFE [03] 264A      1635          bne     Boot4                       ; skip if not
                     1636  ;
 FC00 [04] AD02      1637          bsr     BootProg                    ; go accept S19 records and program the Flash
 FC02 [03] 20B7      1638          bra     Boot                        ; return to top of control loop
                     1639  
                     1640  
                     1641  ;*  Program Flash Subroutine  ===============================================================
                     1642  ;*
                     1643  ;*  This subroutine will copy the Flash Program algorithm into RAM and execute it in
                     1644  ;*  conjunction with the S19 record retrieval to program the required Flash pages between
                     1645  ;*  address pointers "flash_first" and "flash_last".
                     1646  ;*
                     1647  ;*  Calling convention:
                     1648  ;*
                     1649  ;*      jsr     BootProg                    ; retrieve S19 records and program Flash
                     1650  ;*
                     1651  ;*  Returns:    nothing
                     1652  ;*
                     1653  ;*  Changes:    everything
                     1654  ;*
                     1655  BootProg:
 FC04 [03] 45004F    1656          ldhx    #ProgramRamSize             ; initialize pointer
                     1657  BootProg1:
 FC07 [04] D6FD38    1658          lda     Delay-1,x                   ; get program from Flash
 FC0A [04] D701EC    1659          sta     ram_exec-1,x                ; copy into RAM
 FC0D [03] 5BF8      1660          dbnzx   BootProg1                   ; decrement pointer and loop back until done
 FC0F [03] 45FDBF    1661          ldhx    #msg_waiting                ; point to waiting message
 FC12 [04] ADE4      1662          bsr     PrintString                 ; output it
                     1663  ;
                     1664  ;   Get S-Record from host.
                     1665  ;
                     1666  BootProg2:
 FC14 [02] 95        1667          tsx                                 ; get the Stack Pointer
 FC15 [04] 3541      1668          sthx    temp_sp                     ; save it temporarily
 FC17 [02] A7DC      1669          ais     #-36                        ; allocate stack space for data
 FC19 [04] AD58      1670          bsr     GetSRec                     ; get an S-Record
 FC1B [03] 2625      1671          bne     BootProg5                   ; indicate error if S-Record is invalid
 FC1D [02] 86        1672          pula                                ; get S-Record type
 FC1E [02] A130      1673          cmp     #'0'                        ; check for text header record type
 FC20 [03] 270B      1674          beq     BootProg3                   ; ignore and get next record
 FC22 [02] A139      1675          cmp     #'9'                        ; check for end record type
 FC24 [03] 270B      1676          beq     BootProg4                   ; indicate operation complete
 FC26 [02] A131      1677          cmp     #'1'                        ; check for data record type
 FC28 [03] 2618      1678          bne     BootProg5                   ; indicate error if S-Record is invalid
                     1679  ;
                     1680  ;   Program Flash.
                     1681  ;
 FC2A [05] CD01F8    1682          jsr     {ram_exec+ProgramRam}       ; execute Program Flash algorithm from RAM
                     1683  BootProg3:
 FC2D [02] A723      1684          ais     #35                         ; deallocate stack space
 FC2F [03] 20E3      1685          bra     BootProg2                   ; loop back for next S-Record
                     1686  ;
                     1687  BootProg4:
 FC31 [02] A723      1688          ais     #35                         ; deallocate stack space
 FC33 [05] 0B16B0    1689          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC36 [04] AD32      1690          bsr     GetChar                     ; else, clear last ASCII carriage return from SCI
 FC38 [05] 0B16AB    1691          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC3B [04] AD2D      1692          bsr     GetChar                     ; else, clear last ASCII line feed from the SCI
 FC3D [03] 45FDB4    1693          ldhx    #msg_complete               ; point to operation complete message
 FC40 [03] 2005      1694          bra     BootProg6                   ; go output it
                     1695  ;
                     1696  BootProg5:
 FC42 [02] A724      1697          ais     #36                         ; deallocate stack space
 FC44 [03] 45FDCE    1698          ldhx    #msg_error                  ; point to error message
                     1699  BootProg6:
 FC47 [04] ADAF      1700          bsr     PrintString                 ; output it
 FC49 [04] 81        1701          rts                                 ; return
                     1702  
                     1703  
                     1704  ;*  Upgrade Flash Command Check  ============================================================
                     1705  ;*
                     1706  Boot4:
 FC4A [02] A155      1707          cmp     #cmd_upgrade                ; check for Upgrade Flash command
 FC4C [03] 2670      1708          bne     Boot5                       ; skip if not
                     1709  ;
 FC4E [03] 458000    1710          ldhx    #init_first                 ; force
 FC51 [04] 3543      1711          sthx    flash_first                 ;  first Flash address
 FC53 [03] 45FB00    1712          ldhx    #init_last                  ; force
 FC56 [04] 3545      1713          sthx    flash_last                  ;  last Flash address
 FC58 [04] AD02      1714          bsr     EraseFlash                  ; go erase Flash
 FC5A [03] 20A8      1715          bra     BootProg                    ; go program Flash
                     1716  
                     1717  
                     1718  ;*  Multiple Flash Page Erase Subroutine  ===================================================
                     1719  ;*
                     1720  ;*  This subroutine will copy the Flash Erase algorithm into RAM and execute it to erase
                     1721  ;*  all pages between address pointers "flash_first" and "flash_last".
                     1722  ;*
                     1723  ;*  Calling convention:
                     1724  ;*
                     1725  ;*      ldhx    #init_first                 ; initialize
                     1726  ;*      sthx    flash_first                 ;  first Flash address
                     1727  ;*      ldhx    #init_last                  ; initialize
                     1728  ;*      sthx    flash_last                  ;  last Flash address
                     1729  ;*      jsr     EraseFlash                  ; go erase flash
                     1730  ;*
                     1731  ;*  Returns:    nothing
                     1732  ;*
                     1733  ;*  Changes:    everything
                     1734  ;*
                     1735  EraseFlash:
 FC5C [03] 45003B    1736          ldhx    #EraseRamSize               ; initialize pointer
                     1737  EraseFlash1:
 FC5F [04] D6FD08    1738          lda     MassErase-1,x               ; get program from Flash
 FC62 [04] D701EC    1739          sta     ram_exec-1,x                ; copy into RAM
 FC65 [03] 5BF8      1740          dbnzx   EraseFlash1                 ; decrement pointer and loop back until done
 FC67 [03] CC01ED    1741          jmp     ram_exec                    ; execute Flash Mass Erase algorithm from RAM
                     1742  
                     1743  
                     1744  ;*  GetChar Subroutine  =====================================================================
                     1745  ;*
                     1746  ;*  This subroutine will wait forever for a character to be received by the SCI and then
                     1747  ;*  returns with that character in ACC.  No error checking is performed.  Note that this
                     1748  ;*  is the primary loop where the COP counter is cleared.
                     1749  ;*
                     1750  ;*  C function prototype:
                     1751  ;*
                     1752  ;*      char GetChar (void);
                     1753  ;*
                     1754  ;*  Calling convention:
                     1755  ;*
                     1756  ;*      jsr     GetChar                     ; get a character from the SCI
                     1757  ;*
                     1758  ;*  Returns:
                     1759  ;*      ACC= data
                     1760  ;*
                     1761  GetChar:
 FC6A [04] C7FFFF    1762          sta     copctl                      ; clear the COP counter
 FC6D [05] 0B16FA    1763          brclr   SCRF,scs1,GetChar           ; wait forever until SCI receiver is full
 FC70 [03] B618      1764          lda     scdr                        ; get data
 FC72 [04] 81        1765          rts                                 ; return
                     1766  
                     1767  
                     1768  ;*  GetSRec Subroutine  =====================================================================
                     1769  ;*
                     1770  ;*  This subroutine will retrieve data in S19 record format via the SCI.
                     1771  ;*
                     1772  ;*  Calling convention:
                     1773  ;*
                     1774  ;*      ais     #-buffer_length             ; allocate stack space for data
                     1775  ;*      jsr     GetSRec                     ; go get S-record data
                     1776  ;*
                     1777  ;*  Returns:    CCRZ= 1 if valid S-Record retrieved.  Otherwise, CCRZ= 0.
                     1778  ;*              S-Record Type at SP+1     (1 byte)
                     1779  ;*              S-Record Size at SP+2     (1 byte)
                     1780  ;*              S-Record Address at SP+3  (2 bytes)
                     1781  ;*              S-Record Data at SP+5     (up to 32 bytes, typically)
                     1782  ;*
                     1783  ;*              |                |    <-sp (after local space allocation)
                     1784  ;*      H:X->   | SRecCount      |
                     1785  ;*              | SRecChkSum     |    <-sp (when called)
                     1786  ;*              | ReturnAddr msb |
                     1787  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     1788  ;*              | SRecType       |
                     1789  ;*              | SRecSize       |
                     1790  ;*      H:X->   | SRecAddr msb   |
                     1791  ;*              | SRecAddr lsb   |
                     1792  ;*              | SRecData 00    |
                     1793  ;*              | SRecData 01    |  etc..
                     1794  ;*
                     1795  ;*  Changes:    everything
                     1796  ;*
 FC73                1797  SRecCount:      equ     1                   ; stack pointer offset for S-Record Counter
 FC73                1798  SRecChkSum:     equ     2                   ; stack pointer offset for S-Record Check Sum
 FC73                1799  SRecType:       equ     5                   ; stack pointer offset for S-Record Type
 FC73                1800  SRecSize:       equ     6                   ; stack pointer offset for S-Record Size
 FC73                1801  SRecAddr:       equ     7                   ; stack pointer offset for S-Record Address
 FC73                1802  SRedData:       equ     8                   ; stack pointer offset for S-Record Data
                     1803  ;
                     1804  GetSRec:
 FC73 [02] A7FE      1805          ais     #-2                         ; allocate local variable space
 FC75 [04] 9E6F06    1806          clr     SRecSize,sp                 ; initialize S-Record size
                     1807  GetSRec1:
 FC78 [04] ADF0      1808          bsr     GetChar                     ; get a character from the SCI
 FC7A [02] A10D      1809          cmp     #ascii_CR                   ; check for ASCII carriage return
 FC7C [03] 2602      1810          bne     GetSRec1a                   ; just loop back if so
 FC7E [02] A60A      1811          lda     #ascii_LF                   ; get ASCII line feed
                     1812  GetSRec1a:
 FC80 [02] A153      1813          cmp     #'S'                        ; check for start of record character
 FC82 [03] 26F4      1814          bne     GetSRec1                    ; loop back if not
 FC84 [04] ADE4      1815          bsr     GetChar                     ; else, get next character from the SCI
 FC86 [02] A130      1816          cmp     #'0'                        ; check for header record type
 FC88 [03] 27EE      1817          beq     GetSRec1                    ; loop back if so
 FC8A [02] A139      1818          cmp     #'9'                        ; else, check for end record type
 FC8C [03] 2704      1819          beq     GetSRec2                    ; continue if so
 FC8E [02] A131      1820          cmp     #'1'                        ; else, check for data record type
 FC90 [03] 26E6      1821          bne     GetSRec1                    ; loop back if not
                     1822  GetSRec2:
 FC92 [04] 9EE705    1823          sta     SRecType,sp                 ; save S-Record type
 FC95 [04] AD3B      1824          bsr     GetHexByte                  ; get the S-Record length
 FC97 [03] 2622      1825          bne     GetSRec4                    ; exit if not a valid hex byte
 FC99 [04] 9EE701    1826          sta     SRecCount,sp                ; initialize S-Record counter
 FC9C [04] 9EE702    1827          sta     SRecChkSum,sp               ; initialize S-Record check sum
 FC9F [02] A003      1828          sub     #3                          ; adjust for address and checksum
 FCA1 [04] 9EE706    1829          sta     SRecSize,sp                 ; save S-Record size
 FCA4 [02] 95        1830          tsx                                 ; use H:X as data stack frame pointer
 FCA5 [02] AF06      1831          aix     #{SRecAddr-1}               ; adjust so pointer starts at S-Record Address
                     1832  GetSRec3:
 FCA7 [04] AD29      1833          bsr     GetHexByte                  ; get next S-Record hex byte
 FCA9 [03] 2610      1834          bne     GetSRec4                    ; exit if not a valid hex byte
 FCAB [02] F7        1835          sta     ,x                          ; save data in stack frame
 FCAC [04] 9EEB02    1836          add     SRecChkSum,sp               ; add data to check sum
 FCAF [04] 9EE702    1837          sta     SRecChkSum,sp               ; save new check sum
 FCB2 [02] AF01      1838          aix     #1                          ; move data stack frame pointer
 FCB4 [06] 9E6B01EF  1839          dbnz    SRecCount,sp,GetSRec3       ; loop back until all data has been received
 FCB8 [05] 9E6C02    1840          inc     SRecChkSum,sp               ; final calculation zeros check sum if it's okay
                     1841  GetSRec4:
 FCBB [02] A702      1842          ais     #2                          ; deallocate local variables
 FCBD [04] 81        1843          rts                                 ; return
                     1844  
                     1845  
                     1846  ;*  Help Command Response  ==================================================================
                     1847  ;*
                     1848  Boot5:
 FCBE [02] A148      1849          cmp     #cmd_help                   ; check for Help command
 FCC0 [03] 2704      1850          beq     Boot6                       ; continue if so
 FCC2 [02] A11F      1851          cmp     #cmd_help1                  ; check for alternate Help command
 FCC4 [03] 2606      1852          bne     Boot7                       ; skip if not
                     1853  boot6:
 FCC6 [03] 45FD90    1854          ldhx    #msg_help                   ; point to Help command message
 FCC9 [03] CCFBE9    1855          jmp     BootDone1                   ; go output it
                     1856  
                     1857  
                     1858  ;*  Unknown Command Response  ===============================================================
                     1859  ;*
                     1860  Boot7:
 FCCC [03] 45FDD7    1861          ldhx    #msg_what                   ; point to unknown command message
 FCCF [03] CCFBE9    1862          jmp     BootDone1                   ; go output it
                     1863  
                     1864  
                     1865  ;*  GetHexByte Subroutine  ==================================================================
                     1866  ;*
                     1867  ;*  This subroutine retrieves two ASCII bytes via the SCI and converts (packs) them into one
                     1868  ;*  hex byte, which is returned in ACC.
                     1869  ;*
                     1870  ;*  Calling convention:
                     1871  ;*
                     1872  ;*      jsr     GetHexByte
                     1873  ;*
                     1874  ;*  Returns:    CCRZ= 1 if valid hex byte retrieved.  Otherwise, CCRZ= 0.
                     1875  ;*              ACC= data
                     1876  ;*
                     1877  ;*  Changes:    ACC
                     1878  ;*
                     1879  GetHexByte:
 FCD2 [04] AD96      1880          bsr     GetChar                     ; get msb character from the SCI
 FCD4 [04] AD20      1881          bsr     IsHex                       ; check if valid ASCII hex character
 FCD6 [03] 2614      1882          bne     GetHexByte2                 ; exit if not
 FCD8 [04] AD13      1883          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCDA [03] 62        1884          nsa                                 ; swap lower nibble up
 FCDB [02] 87        1885          psha                                ; save temporarily
 FCDC [05] CDFC6A    1886          jsr     GetChar                     ; get lsb character from the SCI
 FCDF [04] AD15      1887          bsr     IsHex                       ; check if valid ASCII hex character
 FCE1 [03] 2607      1888          bne     GetHexByte1                 ; exit if not
 FCE3 [04] AD08      1889          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCE5 [04] 9EEB01    1890          add     1,sp                        ; combine msb and lsb nibbles
 FCE8 [02] A500      1891          bit     #0                          ; CCRZ= 1
                     1892  GetHexByte1:
 FCEA [02] A701      1893          ais     #1                          ; deallocate local variable
                     1894  GetHexByte2:
 FCEC [04] 81        1895          rts                                 ; return
                     1896  
                     1897  
                     1898  ;*  ToHex Subroutine  =======================================================================
                     1899  ;*
                     1900  ;*  This subroutine converts the ASCII hex value passed in ACC to a binary hex value.
                     1901  ;*
                     1902  ;*  Calling convention:
                     1903  ;*
                     1904  ;*      lda     data
                     1905  ;*      jsr     ToHex
                     1906  ;*
                     1907  ;*  Returns:    ACC= data.
                     1908  ;*
                     1909  ;*  Changes:    ACC
                     1910  ;*
                     1911  ToHex:
 FCED [02] A030      1912          sub     #'0'                        ; adjust first by subtracting '0'
 FCEF [02] A109      1913          cmp     #9                          ; check if value was between '0' to '9'
 FCF1 [03] 2302      1914          bls     ToHex1                      ; exit if so
 FCF3 [02] A007      1915          sub     #7                          ; else, adjust for value between 'A' to 'F'
                     1916  ToHex1:
 FCF5 [04] 81        1917          rts                                 ; return
                     1918  
                     1919  
                     1920  ;*  IsHex Subroutine  =======================================================================
                     1921  ;*
                     1922  ;*  This subroutine checks if the value passed in ACC is a valid ASCII hex character within
                     1923  ;*  within the ranges of '0' to '9' or 'A' to 'F'.  Note that the range 'a' to 'f' is not
                     1924  ;*  checked.
                     1925  ;*
                     1926  ;*  Calling convention:
                     1927  ;*
                     1928  ;*      lda     data
                     1929  ;*      jsr     IsHex
                     1930  ;*
                     1931  ;*  Returns:    CCRZ= 1 if data is a valid hex character.  Otherwise, CCRZ= 0.
                     1932  ;*
                     1933  ;*  Changes:    nothing
                     1934  ;*
                     1935  IsHex:
 FCF6 [02] A130      1936          cmp     #'0'                        ; check value against '0'
 FCF8 [03] 250E      1937          blo     IsntHex                     ; not hex if lower
 FCFA [02] A139      1938          cmp     #'9'                        ; check value against '9'
 FCFC [03] 2308      1939          bls     IsHex1                      ; is hex if lower
 FCFE [02] A141      1940          cmp     #'A'                        ; check value against 'A'
 FD00 [03] 2506      1941          blo     IsntHex                     ; not hex if lower
 FD02 [02] A146      1942          cmp     #'F'                        ; check value against 'F'
 FD04 [03] 2202      1943          bhi     IsntHex                     ; not hex if higher
                     1944  IsHex1:
 FD06 [02] A500      1945          bit     #0                          ; CCRZ= 1
                     1946  IsntHex:
 FD08 [04] 81        1947          rts                                 ; return
                     1948  
                     1949  
                     1950  ;*  Flash Mass Erase Subroutine  ============================================================
                     1951  ;*
                     1952  ;*  This subroutine performs multiple Page Erase operations in order to erase the application
                     1953  ;*  space Flash memory between "flash_first" and "flash_last".  This subroutine has been
                     1954  ;*  tuned for a bus speed of 7.3728 MHz.
                     1955  ;*  This subroutine is copied into and executed from RAM.
                     1956  ;*
                     1957  MassErase:
 FD09 [04] 5545      1958          ldhx    flash_last                  ; initialize pointer to last Flash memory address
 FD0B [03] 2023      1959          bra     MassErase2                  ; go move pointer before erasing Flash
                     1960  MassErase1:
                     1961  ;
                     1962  ;   Set ERASE, read the Flash Block Protect Register and write any data into Flash page.
                     1963  ;
 FD0D [02] A602      1964          lda     #{ERASE}                    ; set ERASE control bit
 FD0F [04] C7FE08    1965          sta     flcr                        ;  in Flash Control Register
 FD12 [04] C6FF7E    1966          lda     flbpr                       ; read from Flash Block Protect Register
 FD15 [02] F7        1967          sta     ,x                          ; write any data to address within page
                     1968  ;
                     1969  ;   Wait for >10us, then set HVEN.
                     1970  ;
 FD16 [02] A601      1971          lda     #1                          ; wait
 FD18 [04] AD1F      1972          bsr     delay                       ;  for 11.7us
 FD1A [02] A60A      1973          lda     #{ERASE | HVEN}             ; set HVEN control bit
 FD1C [04] C7FE08    1974          sta     flcr                        ;  in Flash Control Register
                     1975  ;
                     1976  ;   Wait for >1ms, then clear ERASE.
                     1977  ;
 FD1F [02] A664      1978          lda     #100                        ; wait
 FD21 [04] AD16      1979          bsr     delay                       ;  for 1.005ms
 FD23 [02] A608      1980          lda     #{HVEN}                     ; clear ERASE control bit
 FD25 [04] C7FE08    1981          sta     flcr                        ;  in Flash Control Register
                     1982  ;
                     1983  ;   Wait for >5us, then clear HVEN.
                     1984  ;
 FD28 [02] A601      1985          lda     #1                          ; wait
 FD2A [04] AD0D      1986          bsr     delay                       ;  for 11.7us
 FD2C [01] 4F        1987          clra                                ; clear HVEN control bit
 FD2D [04] C7FE08    1988          sta     flcr                        ;  in Flash Control Register
                     1989  ;
                     1990  ;   Advance pointer and repeat until finished.
                     1991  ;
                     1992  MassErase2:
 FD30 [02] AFC0      1993          aix     #-64                        ; move pointer back
 FD32 [02] AFC0      1994          aix     #-64                        ;  by one complete erase page
 FD34 [04] 7543      1995          cphx    flash_first                 ; check if finished
 FD36 [03] 22D5      1996          bhi     MassErase1                  ; loop back if not
                     1997  ;
 FD38 [04] 81        1998          rts                                 ; return
                     1999  
                     2000  
                     2001  ;*  Delay Subroutine  =======================================================================
                     2002  ;*
                     2003  ;*  This subroutine performs a simple software delay loop based upon the value passed in ACC.
                     2004  ;*  The following timing calculation applies:
                     2005  ;*
                     2006  ;*              delay = ((ACC * 74) + 12) (tcyc)
                     2007  ;*
                     2008  ;*  Calling convention:
                     2009  ;*
                     2010  ;*      lda     data
                     2011  ;*      jsr     delay
                     2012  ;*
                     2013  ;*  Returns:    nothing
                     2014  ;*
                     2015  ;*  Changes:    ACC
                     2016  ;*
                     2017  Delay:
 FD39 [02] 87        2018          psha                                ; [2] save outer delay loop parameter
                     2019  Delay1:
 FD3A [02] A616      2020          lda     #22                         ; [2] initialize inner delay loop counter
                     2021  Delay2:
 FD3C [03] 4BFE      2022          dbnza   Delay2                      ; [3] decrement inner delay loop counter
 FD3E [06] 9E6B01F8  2023          dbnz    1,sp,Delay1                 ; [6] decrement outer delay loop counter
 FD42 [02] 86        2024          pula                                ; [2] deallocate local variable
 FD43 [04] 81        2025          rts                                 ; [4] return
                     2026  
 FD44                2027  EraseRamSize:   equ     {*-MassErase}
 FD44                2028  ProgramRam:     equ     {*-Delay}
                     2029  
                     2030  
                     2031  ;*  Flash Program Subroutine  ===============================================================
                     2032  ;*
                     2033  ;*  This subroutine controls the Flash programming sequence.  A stack frame data block is
                     2034  ;*  passed to it in the format shown below.  This subroutine has been tuned for a bus speed
                     2035  ;*  of 7.3728 MHz.
                     2036  ;*  This subroutine is copied into and executed from RAM.
                     2037  ;*
                     2038  ;*              |                |    <-sp (when called)
                     2039  ;*              | ReturnAddr msb |
                     2040  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     2041  ;*              | SRecSize       |
                     2042  ;*              | SRecAddr msb   |
                     2043  ;*              | SRecAddr lsb   |
                     2044  ;*              | SRecData 00    |
                     2045  ;*              | SRecData 01    |  etc..
                     2046  ;*
                     2047  FlashProgram:
 FD44 [02] 95        2048          tsx                                 ; get the Stack Pointer
 FD45 [04] 3541      2049          sthx    temp_sp                     ; save it temporarily
                     2050  ;
                     2051  ;   Get S-Record size and use the Stack Pointer as the data source pointer.
                     2052  ;
 FD47 [02] A702      2053          ais     #2                          ; SP points to SRecSize
 FD49 [02] 86        2054          pula                                ; get SRecSize
 FD4A [03] B740      2055          sta     count                       ; save it temporarily
                     2056  ;
                     2057  ;   Establish H:X as the destination pointer.
                     2058  ;
 FD4C [02] 8A        2059          pulh                                ; get destination address msb
 FD4D [02] 88        2060          pulx                                ; get destination address lsb
                     2061  
                     2062  FlashProgram1:
 FD4E [04] 7543      2063          cphx    flash_first                 ; check against minimum address
 FD50 [03] 252D      2064          blo     FlashProgram2               ; skip if lower
 FD52 [04] 7545      2065          cphx    flash_last                  ; check against maximum address
 FD54 [03] 2429      2066          bhs     FlashProgram2               ; skip if the same or higher
                     2067  ;
                     2068  ;   Set PGM, read the Flash Block Protect Register and write anywhere in desired Flash row.
                     2069  ;
 FD56 [02] A601      2070          lda     #{PGM}                      ; set PGM control bit
 FD58 [04] C7FE08    2071          sta     flcr                        ;  in Flash Control Register
 FD5B [04] C6FF7E    2072          lda     flbpr                       ; read from Flash Block Protect Register
 FD5E [02] F7        2073          sta     ,x                          ; write any data to first Flash address
                     2074  ;
                     2075  ;   Wait for >10us, then set HVEN.
                     2076  ;
 FD5F [02] A601      2077          lda     #1                          ; wait
 FD61 [04] ADD6      2078          bsr     delay                       ;  for 11.7us
 FD63 [02] A609      2079          lda     #{PGM | HVEN}               ; set HVEN control bit
 FD65 [04] C7FE08    2080          sta     flcr                        ;  in Flash Control Register
                     2081  ;
                     2082  ;   Wait for >5us.
                     2083  ;
 FD68 [02] A601      2084          lda     #1                          ; wait
 FD6A [04] ADCD      2085          bsr     delay                       ;  for 11.7us
                     2086  ;
                     2087  ;   Write data to Flash and wait for 30 - 40us.
                     2088  ;
 FD6C [02] 86        2089          pula                                ; get S-Record data
 FD6D [02] F7        2090          sta     ,x                          ; write data to Flash
 FD6E [02] A603      2091          lda     #3                          ; wait
 FD70 [04] ADC7      2092          bsr     delay                       ;  for 31.7us
                     2093  ;
                     2094  ;   Clear PGM.
                     2095  ;
 FD72 [02] A608      2096          lda     #{HVEN}                     ; clear PGM
 FD74 [04] C7FE08    2097          sta     flcr                        ;  in Flash Control Register
                     2098  ;
                     2099  ;   Wait for >5us, then clear HVEN.
                     2100  ;
 FD77 [02] A601      2101          lda     #1                          ; wait
 FD79 [04] ADBE      2102          bsr     delay                       ;  for 11.7us
 FD7B [01] 4F        2103          clra                                ; clear HVEN control bit
 FD7C [04] C7FE08    2104          sta     flcr                        ;  in Flash Control Register
                     2105  ;
                     2106  ;   Advance destination pointer and data counter.
                     2107  ;
                     2108  FlashProgram2:
 FD7F [02] AF01      2109          aix     #1                          ; advance destination pointer
 FD81 [05] 3B40CA    2110          dbnz    count,FlashProgram1         ; decrement counter and loop back if not done.
                     2111  ;
 FD84 [04] 5541      2112          ldhx    temp_sp                     ; restore
 FD86 [02] 94        2113          txs                                 ;  Stack Pointer
 FD87 [04] 81        2114          rts                                 ; return
                     2115  
 FD88                2116  ProgramRamSize: equ     {*-Delay}
                     2117  
                     2118  
                     2119  ;*  Messages  ===================================================================================
                     2120  ;*
 FD88                2121  ascii_CR:       equ     $0D                 ; ASCII carriage return
 FD88                2122  ascii_LF:       equ     $0A                 ; ASCII line feed
                     2123  ;
 FD88      0D0A426F  2124  msg_hello:      db      ascii_CR,ascii_LF,'Boot>',0
           6F743E00 
 FD90      20202850  2125  msg_help:       db      '  (P)rogram (W)ipe (U)pgrade e(X)it',0
           29726F67 
           72616D20 
           28572969 
           70652028 
           55297067 
           72616465 
           20652858 
           29697400 
                     2126  ;
 FDB4      2020436F  2127  msg_complete:   db      '  Complete',0
           6D706C65 
           746500 
 FDBF      202D2077  2128  msg_waiting:    db      ' - waiting ...',0
           61697469 
           6E67202E 
           2E2E00 
 FDCE      202D2065  2129  msg_error:      db      ' - error',0
           72726F72 
           00 
 FDD7      202D2077  2130  msg_what:       db      ' - what?',0
           6861743F 
           00 
 FDE0      202D2052  2131  msg_noreset:    db      ' - Reset Vector Invalid',0
           65736574 
           20566563 
           746F7220 
           496E7661 
           6C696400 
                     2132  
                     2133  ;
                     2134  ;   Last location not to exceed $FDFF
                     2135  ;
                     2136  BootEnd:
                     2137  
                     2138  
                     2139  ;*  Vectors  ************************************************************************************
                     2140  ;*
 FFDC                2141          org     vec_timebase                ; Timebase vector
 FFDC      FACA      2142          dw      user_timebase
 FFDE                2143          org     vec_adc                     ; ADC vector
 FFDE      FACD      2144          dw      user_ADC
 FFE0                2145          org     vec_kbd                     ; Keyboard vector
 FFE0      FAD0      2146          dw      user_keyboard
 FFE2                2147          org     vec_scitx                   ; SCI transmit vector
 FFE2      FAD3      2148          dw      user_SCItx
 FFE4                2149          org     vec_scirx                   ; SCI receive vector
 FFE4      FAD6      2150          dw      user_SCIrx
 FFE6                2151          org     vec_scierr                  ; SCI error vector
 FFE6      FAD9      2152          dw      user_SCIerr
 FFE8                2153          org     vec_spitx                   ; SPI transmit vector
 FFE8      FADC      2154          dw      user_SPItx
 FFEA                2155          org     vec_spirx                   ; SPI receive vector
 FFEA      FADF      2156          dw      user_SPIrx
 FFEC                2157          org     vec_tim2ov                  ; Timer 2 overflow vector
 FFEC      FAE2      2158          dw      user_Tim2Ov
 FFEE                2159          org     vec_tim2ch1                 ; Timer 2 channel 1 vector
 FFEE      FAE5      2160          dw      user_Tim2Ch1
 FFF0                2161          org     vec_tim2ch0                 ; Timer 2 channel 0 vector
 FFF0      FAE8      2162          dw      user_Tim2Ch0
 FFF2                2163          org     vec_tim1ov                  ; Timer 1 oveflow vector
 FFF2      FAEB      2164          dw      user_Tim1Ov
 FFF4                2165          org     vec_tim1ch1                 ; Timer 1 channel 1 vector
 FFF4      FAEE      2166          dw      user_Tim1Ch1
 FFF6                2167          org     vec_tim1ch0                 ; Timer 1 channel 0 vector
 FFF6      FAF1      2168          dw      user_Tim1Ch0
 FFF8                2169          org     vec_pll                     ; PLL vector
 FFF8      FAF4      2170          dw      user_PLL
 FFFA                2171          org     vec_irq                     ; IRQ vector
 FFFA      FAF7      2172          dw      user_IRQ
 FFFC                2173          org     vec_swi                     ; SWI vector
 FFFC      FAFA      2174          dw      user_SWI
 FFFE                2175          org     vec_reset                   ; Reset vector
 FFFE      FB08      2176          dw      BootReset
                     2177  
                     2178  
                     2179  ;*  Flash Block Protect Register  ***************************************************************
                     2180  ;*
 FF7E                2181          org     flbpr
 FF7E      F6        2182          db      flash_protect
                     2183  
 FF7F                2184          end
                     2185  
                     2186  ;****************************************************************************
                     2187  ; - Lookup Tables
                     2188  ;****************************************************************************
                     2189  
 F000                2190       org     $F000     ; $F000 to $F600 (61440 to 62976)
                     2191  
 F000                2192       include "BatVolt.inc"   ; table=BatVolt:,    offset=BAT,  result=Volts
                     2193  BatVolt:
 F000      00        2194       DB      0T       ; x=000        ;=0.000v        ;=sens fail
 F001      01        2195       DB      1T       ; x=001        ;=0.020v
 F002      02        2196       DB      2T       ; x=002        ;=0.039v
 F003      03        2197       DB      3T       ; x=003        ;=0.059v
 F004      05        2198       DB      5T       ; x=004        ;=0.078v
 F005      06        2199       DB      6T       ; x=005        ;=0.098v
 F006      07        2200       DB      7T       ; x=006        ;=0.118v
 F007      08        2201       DB      8T       ; x=007        ;=0.137v
 F008      09        2202       DB      9T       ; x=008        ;=0.157v
 F009      0B        2203       DB      11T      ; x=009        ;=0.176v
 F00A      0C        2204       DB      12T      ; x=010        ;=0.196v
 F00B      0D        2205       DB      13T      ; x=011        ;=0.216v
 F00C      0E        2206       DB      14T      ; x=012        ;=0.235v
 F00D      0F        2207       DB      15T      ; x=013        ;=0.255v
 F00E      11        2208       DB      17T      ; x=014        ;=0.275v
 F00F      12        2209       DB      18T      ; x=015        ;=0.294v
 F010      13        2210       DB      19T      ; x=016        ;=0.314v
 F011      14        2211       DB      20T      ; x=017        ;=0.333v
 F012      15        2212       DB      21T      ; x=018        ;=0.353v
 F013      16        2213       DB      22T      ; x=019        ;=0.373v
 F014      18        2214       DB      24T      ; x=020        ;=0.392v
 F015      19        2215       DB      25T      ; x=021        ;=0.412v
 F016      1A        2216       DB      26T      ; x=022        ;=0.431v
 F017      1B        2217       DB      27T      ; x=023        ;=0.451v
 F018      1C        2218       DB      28T      ; x=024        ;=0.471v
 F019      1D        2219       DB      29T      ; x=025        ;=0.490v
 F01A      1F        2220       DB      31T      ; x=026        ;=0.510v
 F01B      20        2221       DB      32T      ; x=027        ;=0.529v
 F01C      21        2222       DB      33T      ; x=028        ;=0.549v
 F01D      22        2223       DB      34T      ; x=029        ;=0.569v
 F01E      23        2224       DB      35T      ; x=030        ;=0.588v
 F01F      24        2225       DB      36T      ; x=031        ;=0.608v
 F020      26        2226       DB      38T      ; x=032        ;=0.627v
 F021      27        2227       DB      39T      ; x=033        ;=0.647v
 F022      28        2228       DB      40T      ; x=034        ;=0.667v
 F023      29        2229       DB      41T      ; x=035        ;=0.686v
 F024      2A        2230       DB      42T      ; x=036        ;=0.706v
 F025      2C        2231       DB      44T      ; x=037        ;=0.725v
 F026      2D        2232       DB      45T      ; x=038        ;=0.745v
 F027      2E        2233       DB      46T      ; x=039        ;=0.765v
 F028      2F        2234       DB      47T      ; x=040        ;=0.784v
 F029      30        2235       DB      48T      ; x=041        ;=0.804v
 F02A      31        2236       DB      49T      ; x=042        ;=0.824v
 F02B      33        2237       DB      51T      ; x=043        ;=0.843v
 F02C      34        2238       DB      52T      ; x=044        ;=0.863v
 F02D      35        2239       DB      53T      ; x=045        ;=0.882v
 F02E      36        2240       DB      54T      ; x=046        ;=0.902v
 F02F      37        2241       DB      55T      ; x=047        ;=0.922v
 F030      38        2242       DB      56T      ; x=048        ;=0.941v
 F031      3A        2243       DB      58T      ; x=049        ;=0.961v
 F032      3B        2244       DB      59T      ; x=050        ;=0.980v
 F033      3C        2245       DB      60T      ; x=051        ;=1.000v
 F034      3D        2246       DB      61T      ; x=052        ;=1.020v
 F035      3E        2247       DB      62T      ; x=053        ;=1.039v
 F036      40        2248       DB      64T      ; x=054        ;=1.059v
 F037      41        2249       DB      65T      ; x=055        ;=1.078v
 F038      42        2250       DB      66T      ; x=056        ;=1.096v
 F039      43        2251       DB      67T      ; x=057        ;=1.118v
 F03A      44        2252       DB      68T      ; x=058        ;=1.137v
 F03B      45        2253       DB      69T      ; x=059        ;=1.157v
 F03C      47        2254       DB      71T      ; x=060        ;=1.176v
 F03D      48        2255       DB      72T      ; x=061        ;=1,196v
 F03E      49        2256       DB      73T      ; x=062        ;=1,216v
 F03F      4A        2257       DB      74T      ; x=063        ;=1.235v
 F040      4B        2258       DB      75T      ; x=064        ;=1.255v
 F041      4D        2259       DB      77T      ; x=065        ;=1.275v
 F042      4E        2260       DB      78T      ; x=066        ;=1.294v
 F043      4F        2261       DB      79T      ; x=067        ;=1.314v
 F044      50        2262       DB      80T      ; x=068        ;=1.333v
 F045      51        2263       DB      81T      ; x=069        ;=1.353v
 F046      52        2264       DB      82T      ; x=070        ;=1.373v
 F047      54        2265       DB      84T      ; x=071        ;=1.392v
 F048      55        2266       DB      85T      ; x=072        ;=1.412v
 F049      56        2267       DB      86T      ; x=073        ;=1.431v
 F04A      57        2268       DB      87T      ; x=074        ;=1.451v
 F04B      58        2269       DB      88T      ; x=075        ;=1.471v
 F04C      59        2270       DB      89T      ; x=076        ;=1.490v
 F04D      5B        2271       DB      91T      ; x=077        ;=1.510v
 F04E      5C        2272       DB      92T      ; x=078        ;=1.529v
 F04F      5D        2273       DB      93T      ; x=079        ;=1.549v
 F050      5E        2274       DB      94T      ; x=080        ;=1.569v
 F051      5F        2275       DB      95T      ; x=081        ;=1.588v
 F052      60        2276       DB      96T      ; x=082        ;=1.608v
 F053      62        2277       DB      98T      ; x=083        ;=1.627v
 F054      63        2278       DB      99T      ; x=084        ;=1.647v
 F055      64        2279       DB      100T     ; x=085        ;=1.667v
 F056      65        2280       DB      101T     ; x=086        ;=1.686v
 F057      66        2281       DB      102T     ; x=087        ;=1.706v
 F058      68        2282       DB      104T     ; x=088        ;=1.725v
 F059      69        2283       DB      105T     ; x=089        ;=1.745v
 F05A      6A        2284       DB      106T     ; x=090        ;=1.765v
 F05B      6B        2285       DB      107T     ; x=091        ;=1.784v
 F05C      6C        2286       DB      108T     ; x=092        ;=1.804v
 F05D      6D        2287       DB      109T     ; x=093        ;=1.824v
 F05E      6F        2288       DB      111T     ; x=094        ;=1.843v
 F05F      70        2289       DB      112T     ; x=095        ;=1.863v
 F060      71        2290       DB      113T     ; x=096        ;=1.882v
 F061      72        2291       DB      114T     ; x=097        ;=1.902v
 F062      73        2292       DB      115T     ; x=098        ;=1.922v
 F063      74        2293       DB      116T     ; x=099        ;=1.941v
 F064      76        2294       DB      118T     ; x=100        ;=1.961v
 F065      77        2295       DB      119T     ; x=101        ;=1.980v
 F066      78        2296       DB      120T     ; x=102        ;=2.000v
 F067      79        2297       DB      121T     ; x=103        ;=2.020v
 F068      7A        2298       DB      122T     ; x=104        ;=2.039v
 F069      7C        2299       DB      124T     ; x=105        ;=2.059v
 F06A      7D        2300       DB      125T     ; x=106        ;=2.078v
 F06B      7E        2301       DB      126T     ; x=107        ;=2.098v
 F06C      7F        2302       DB      127T     ; x=108        ;=2.118v
 F06D      80        2303       DB      128T     ; x=109        ;=2.137v
 F06E      81        2304       DB      129T     ; x=110        ;=2.157v
 F06F      83        2305       DB      131T     ; x=111        ;=2.176v
 F070      84        2306       DB      132T     ; x=112        ;=2.196v
 F071      85        2307       DB      133T     ; x=113        ;=2.216v
 F072      86        2308       DB      134T     ; x=114        ;=2.235v
 F073      87        2309       DB      135T     ; x=115        ;=2.255v
 F074      89        2310       DB      137T     ; x=116        ;=2.275v
 F075      8A        2311       DB      138T     ; x=117        ;=2.294v
 F076      8B        2312       DB      139T     ; x=118        ;=2.314v
 F077      8C        2313       DB      140T     ; x=119        ;=2.333v
 F078      8D        2314       DB      141T     ; x=120        ;=2.353v
 F079      8E        2315       DB      142T     ; x=121        ;=2.373v
 F07A      90        2316       DB      144T     ; x=122        ;=2.392v
 F07B      91        2317       DB      145T     ; x=123        ;=2.412v
 F07C      92        2318       DB      146T     ; x=124        ;=2.431v
 F07D      93        2319       DB      147T     ; x=125        ;=2.451v
 F07E      94        2320       DB      148T     ; x=126        ;=2.471v
 F07F      95        2321       DB      149T     ; x=127        ;=2.490v
 F080      97        2322       DB      151T     ; x=128        ;=2.510v
 F081      98        2323       DB      152T     ; x=129        ;=2.529v
 F082      99        2324       DB      153T     ; x=130        ,=2.549v
 F083      9A        2325       DB      154T     ; x=131        ;=2.569v
 F084      9B        2326       DB      155T     ; x=132        ;=2.588v
 F085      9C        2327       DB      156T     ; x=133        ;=2.608v
 F086      9E        2328       DB      158T     ; x=134        ;=2.627v
 F087      9F        2329       DB      159T     ; x=135        ;=2.647v
 F088      A0        2330       DB      160T     ; x=136        ;=2.667v
 F089      A1        2331       DB      161T     ; x=137        ;=2.686v
 F08A      A2        2332       DB      162T     ; x=138        ;=2.706v
 F08B      A4        2333       DB      164T     ; x=139        ;=2.725v
 F08C      A5        2334       DB      165T     ; x=140        ;=2.745v
 F08D      A6        2335       DB      166T     ; x=141        ;=2.765v
 F08E      A7        2336       DB      167T     ; x=142        ;=2.784v
 F08F      A8        2337       DB      168T     ; x=143        ;=2.804v
 F090      A9        2338       DB      169T     ; x=144        ;=2.824V
 F091      AB        2339       DB      171T     ; x=145        ;=2.843v
 F092      AC        2340       DB      172T     ; x=146        ;=2.863v
 F093      AD        2341       DB      173T     ; x=147        ;=2.882v
 F094      AE        2342       DB      174T     ; x=148        ;=2.902v
 F095      AF        2343       DB      175T     ; x=149        ;=2.922v
 F096      B0        2344       DB      176T     ; x=150        ;=2.941v
 F097      B2        2345       DB      178T     ; x=151        ;=2.961v
 F098      B3        2346       DB      179T     ; x=152        ;=2.980v
 F099      B4        2347       DB      180T     ; x=153        ;=3.000v
 F09A      B5        2348       DB      181T     ; x=154        ;=3.020v
 F09B      B6        2349       DB      182T     ; x=155        ;=3.039v
 F09C      B8        2350       DB      184T     ; x=156        ;=3.059v
 F09D      B9        2351       DB      185T     ; x=157        ;=3.078v
 F09E      BA        2352       DB      186T     ; x=158        ;=3.098v
 F09F      BB        2353       DB      187T     ; x=159        ;=3.118v
 F0A0      12        2354       DB      18T      ; x=160        ;=3.137v
 F0A1      BD        2355       DB      189T     ; x=161        ;=3.157v
 F0A2      BF        2356       DB      191T     ; x=162        ;=3.176v
 F0A3      C0        2357       DB      192T     ; x=163        ;=3.196v
 F0A4      C1        2358       DB      193T     ; x=164        ;=3.216v
 F0A5      C2        2359       DB      194T     ; x=165        ;=3.235v
 F0A6      C3        2360       DB      195T     ; x=166        ;=3.255v
 F0A7      C5        2361       DB      197T     ; x=167        ;=3.275v
 F0A8      C6        2362       DB      198T     ; x=168        ;=3.294v
 F0A9      C7        2363       DB      199T     ; x=169        ;=3.314v
 F0AA      C8        2364       DB      200T     ; x=170        ;=3.333v
 F0AB      C9        2365       DB      201T     ; x=171        ;=3.353v
 F0AC      CA        2366       DB      202T     ; x=172        ;=3.373v
 F0AD      CC        2367       DB      204T     ; x=173        ;=3.392v
 F0AE      CD        2368       DB      205T     ; x=174        ;=3.412v
 F0AF      CE        2369       DB      206T     ; x=175        ;=3.431v
 F0B0      CF        2370       DB      207T     ; x=176        ;=3.451v
 F0B1      D0        2371       DB      208T     ; x=177        ;=3.471v
 F0B2      D1        2372       DB      209T     ; x=178        ;=3.490v
 F0B3      D3        2373       DB      211T     ; x=179        ;=3.510v
 F0B4      D4        2374       DB      212T     ; x=180        ;=3.529v
 F0B5      D5        2375       DB      213T     ; x=181        ;=3.549v
 F0B6      D6        2376       DB      214T     ; x=182        ;=3.569v
 F0B7      D7        2377       DB      215T     ; x=183        ;=3.588v
 F0B8      D8        2378       DB      216T     ; x=184        ;=3.608v
 F0B9      DA        2379       DB      218T     ; x=185        ;=3.627v
 F0BA      DB        2380       DB      219T     ; x=186        ;=3.647v
 F0BB      DC        2381       DB      220T     ; x=187        ;=3.667v
 F0BC      DD        2382       DB      221T     ; x=188        ;=3.686v
 F0BD      DE        2383       DB      222T     ; x=189        ;=3.706v
 F0BE      E0        2384       DB      224T     ; x=190        ;=3.725v
 F0BF      E1        2385       DB      225T     ; x=191        ;=3.745v
 F0C0      E2        2386       DB      226T     ; x=192        ;=3.765v
 F0C1      E3        2387       DB      227T     ; x=193        ;=3.784v
 F0C2      E4        2388       DB      228T     ; x=194        ;=3.804v
 F0C3      E5        2389       DB      229T     ; x=195        ;=3.824v
 F0C4      E7        2390       DB      231T     ; x=196        ;=3.843v
 F0C5      E8        2391       DB      232T     ; x=197        ;=3.863v
 F0C6      E9        2392       DB      233T     ; x=198        ;=3.882v
 F0C7      EA        2393       DB      234T     ; x=199        ;=3.902v
 F0C8      EB        2394       DB      235T     ; x=200        ;=3.922v
 F0C9      EC        2395       DB      236T     ; x=201        ;=3.941v
 F0CA      EE        2396       DB      238T     ; x=202        ;=3.961v
 F0CB      EF        2397       DB      239T     ; x=203        ;=3.980v
 F0CC      F0        2398       DB      240T     ; x=204        ;=4.000v
 F0CD      F1        2399       DB      241T     ; x=205        ;=4.020v
 F0CE      F2        2400       DB      242T     ; x=206        ;=4.039v
 F0CF      F4        2401       DB      244T     ; x=207        ;=4.059v
 F0D0      F5        2402       DB      245T     ; x=208        ;=4.078v
 F0D1      F6        2403       DB      246T     ; x=209        ;=4.098v
 F0D2      F7        2404       DB      247T     ; x=210        ;=4.118v
 F0D3      F8        2405       DB      248T     ; x=211        ;=4.137v
 F0D4      F9        2406       DB      249T     ; x=212        ;=4.157v
 F0D5      FA        2407       DB      250T     ; x=213        ;=4.176v
 F0D6      FC        2408       DB      252T     ; x=214        ;=4.196v
 F0D7      FD        2409       DB      253T     ; x=215        ;=4.216v
 F0D8      FE        2410       DB      254T     ; x=216        ;=4.235v
 F0D9      FF        2411       DB      255T     ; x=217        ;=4.255v
 F0DA      FF        2412       DB      255T     ; x=218        ;=4.275v
 F0DB      FF        2413       DB      255T     ; x=219        ;=4.294v
 F0DC      FF        2414       DB      255T     ; x=220        ;=4.314v
 F0DD      FF        2415       DB      255T     ; x=221        ;=4.333v
 F0DE      FF        2416       DB      255T     ; x=222        ;=4.353v
 F0DF      FF        2417       DB      255T     ; x=223        ;=4.373v
 F0E0      FF        2418       DB      255T     ; x=224        ;=4.392v
 F0E1      FF        2419       DB      255T     ; x=225        ;=4.412v
 F0E2      FF        2420       DB      255T     ; x=226        ;=4.431v
 F0E3      FF        2421       DB      255T     ; x=227        ;=4.451v
 F0E4      FF        2422       DB      255T     ; x=228        ;=4.471v
 F0E5      FF        2423       DB      255T     ; x=229        ;=4.490v
 F0E6      FF        2424       DB      255T     ; x=230        ;=4.510v
 F0E7      FF        2425       DB      255T     ; x=231        ;=4.529v
 F0E8      FF        2426       DB      255T     ; x=232        ;=4.549v
 F0E9      FF        2427       DB      255T     ; x=233        ;=4.569v
 F0EA      FF        2428       DB      255T     ; x=234        ;=4.588v
 F0EB      FF        2429       DB      255T     ; x=235        ;=4.608v
 F0EC      FF        2430       DB      255T     ; x=236        ;=4.627v
 F0ED      FF        2431       DB      255T     ; x=237        ;=4.647v
 F0EE      FF        2432       DB      255T     ; x=238        ;=4.667v
 F0EF      FF        2433       DB      255T     ; x=239        ;=4.686v
 F0F0      FF        2434       DB      255T     ; x=240        ;=4.706v
 F0F1      FF        2435       DB      255T     ; x=241        ;=4.725v
 F0F2      FF        2436       DB      255T     ; x=242        ;=4.745v
 F0F3      FF        2437       DB      255T     ; x=243        ;=4.765v
 F0F4      FF        2438       DB      255T     ; x=244        ;=4.784v
 F0F5      FF        2439       DB      255T     ; x=245        ;=4.804v
 F0F6      FF        2440       DB      255T     ; x=246        ;=4.824v
 F0F7      FF        2441       DB      255T     ; x=247        ;=4.843v
 F0F8      FF        2442       DB      255T     ; x=248        ;=4.863v
 F0F9      FF        2443       DB      255T     ; x=249        ;=4.882v
 F0FA      FF        2444       DB      255T     ; x=250        ;=4.902v
 F0FB      FF        2445       DB      255T     ; x=251        ;=4.922v
 F0FC      FF        2446       DB      255T     ; x=252        ;=4.941v
 F0FD      FF        2447       DB      255T     ; x=253        ;=4.961v
 F0FE      FF        2448       DB      255T     ; x=254        ;=4.980v
 F0FF      00        2449       DB      0T       ; x=255        ;=5.000v        ;=sens fail
                     2450  
 F100                2451       include "IdleCntrl.inc" ; table=IACcntrl:,   offset=IAC,  result=IACpw
                     2452  IACcntrl:                                    
 F100      00        2453       DB      0T       ; x=000        ;=0.000v
 F101      00        2454       DB      0T       ; x=001        ;=0.020v        
 F102      00        2455       DB      0T       ; x=002        ;=0.039v        
 F103      00        2456       DB      0T       ; x=003        ;=0.059v        
 F104      00        2457       DB      0T       ; x=004        ;=0.078v        
 F105      01        2458       DB      1T       ; x=005        ;=0.098v        
 F106      01        2459       DB      1T       ; x=006        ;=0.118v        
 F107      01        2460       DB      1T       ; x=007        ;=0.137v        
 F108      01        2461       DB      1T       ; x=008        ;=0.157v        
 F109      01        2462       DB      1T       ; x=009        ;=0.176v        
 F10A      02        2463       DB      2T       ; x=010        ;=0.196v        
 F10B      02        2464       DB      2T       ; x=011        ;=0.216v        
 F10C      02        2465       DB      2T       ; x=012        ;=0.235v        
 F10D      02        2466       DB      2T       ; x=013        ;=0.255v        
 F10E      02        2467       DB      2T       ; x=014        ;=0.275v        
 F10F      03        2468       DB      3T       ; x=015        ;=0.294v
 F110      03        2469       DB      3T       ; x=016        ;=0.314v
 F111      03        2470       DB      3T       ; x=017        ;=0.333v
 F112      03        2471       DB      3T       ; x=018        ;=0.353v
 F113      03        2472       DB      3T       ; x=019        ;=0.373v
 F114      04        2473       DB      4T       ; x=020        ;=0.392v
 F115      04        2474       DB      4T       ; x=021        ;=0.412v
 F116      04        2475       DB      4T       ; x=022        ;=0.431v
 F117      04        2476       DB      4T       ; x=023        ;=0.451v
 F118      04        2477       DB      4T       ; x=024        ;=0.471v
 F119      04        2478       DB      4T       ; x=025        ;=0.490v
 F11A      05        2479       DB      5T       ; x=026        ;=0.510v
 F11B      05        2480       DB      5T       ; x=027        ;=0.529v
 F11C      05        2481       DB      5T       ; x=028        ;=0.549v
 F11D      05        2482       DB      5T       ; x=029        ;=0.569v
 F11E      05        2483       DB      5T       ; x=030        ;=0.588v
 F11F      06        2484       DB      6T       ; x=031        ;=0.608v
 F120      06        2485       DB      6T       ; x=032        ;=0.627v
 F121      06        2486       DB      6T       ; x=033        ;=0.647v
 F122      06        2487       DB      6T       ; x=034        ;=0.667v
 F123      06        2488       DB      6T       ; x=035        ;=0.686v
 F124      07        2489       DB      7T       ; x=036        ;=0.706v
 F125      07        2490       DB      7T       ; x=037        ;=0.725v
 F126      07        2491       DB      7T       ; x=038        ;=0.745v
 F127      07        2492       DB      7T       ; x=039        ;=0.765v
 F128      07        2493       DB      7T       ; x=040        ;=0.784v
 F129      08        2494       DB      8T       ; x=041        ;=0.804v
 F12A      08        2495       DB      8T       ; x=042        ;=0.824v
 F12B      08        2496       DB      8T       ; x=043        ;=0.843v
 F12C      08        2497       DB      8T       ; x=044        ;=0.863v
 F12D      08        2498       DB      8T       ; x=045        ;=0.882v
 F12E      09        2499       DB      9T       ; x=046        ;=0.902v
 F12F      09        2500       DB      9T       ; x=047        ;=0.922v
 F130      09        2501       DB      9T       ; x=048        ;=0.941v
 F131      09        2502       DB      9T       ; x=049        ;=0.961v
 F132      09        2503       DB      9T       ; x=050        ;=0.980v
 F133      0A        2504       DB      10T      ; x=051        ;=1.000v
 F134      0A        2505       DB      10T      ; x=052        ;=1.020v
 F135      0A        2506       DB      10T      ; x=053        ;=1.039v
 F136      0A        2507       DB      10T      ; x=054        ;=1.059v
 F137      0A        2508       DB      10T      ; x=055        ;=1.078v
 F138      0B        2509       DB      11T      ; x=056        ;=1.096v
 F139      0B        2510       DB      11T      ; x=057        ;=1.118v
 F13A      0B        2511       DB      11T      ; x=058        ;=1.137v
 F13B      0B        2512       DB      11T      ; x=059        ;=1.157v
 F13C      0B        2513       DB      11T      ; x=060        ;=1.176v
 F13D      0C        2514       DB      12T      ; x=061        ;=1,196v
 F13E      0C        2515       DB      12T      ; x=062        ;=1,216v
 F13F      0C        2516       DB      12T      ; x=063        ;=1.235v
 F140      0C        2517       DB      12T      ; x=064        ;=1.255v
 F141      0C        2518       DB      12T      ; x=065        ;=1.275v
 F142      0C        2519       DB      12T      ; x=066        ;=1.294v
 F143      0D        2520       DB      13T      ; x=067        ;=1.314v
 F144      0D        2521       DB      13T      ; x=068        ;=1.333v
 F145      0D        2522       DB      13T      ; x=069        ;=1.353v
 F146      0D        2523       DB      13T      ; x=070        ;=1.373v
 F147      0D        2524       DB      13T      ; x=071        ;=1.392v
 F148      0E        2525       DB      14T      ; x=072        ;=1.412v
 F149      0E        2526       DB      14T      ; x=073        ;=1.431v
 F14A      0E        2527       DB      14T      ; x=074        ;=1.451v
 F14B      0E        2528       DB      14T      ; x=075        ;=1.471v
 F14C      0E        2529       DB      14T      ; x=076        ;=1.490v
 F14D      0F        2530       DB      15T      ; x=077        ;=1.510v
 F14E      0F        2531       DB      15T      ; x=078        ;=1.529v
 F14F      0F        2532       DB      15T      ; x=079        ;=1.549v
 F150      0F        2533       DB      15T      ; x=080        ;=1.569v
 F151      0F        2534       DB      15T      ; x=081        ;=1.588v
 F152      10        2535       DB      16T      ; x=082        ;=1.608v
 F153      10        2536       DB      16T      ; x=083        ;=1.627v
 F154      10        2537       DB      16T      ; x=084        ;=1.647v
 F155      10        2538       DB      16T      ; x=085        ;=1.667v
 F156      10        2539       DB      16T      ; x=086        ;=1.686v
 F157      10        2540       DB      16T      ; x=087        ;=1.706v
 F158      11        2541       DB      17T      ; x=088        ;=1.725v
 F159      11        2542       DB      17T      ; x=089        ;=1.745v
 F15A      11        2543       DB      17T      ; x=090        ;=1.765v
 F15B      11        2544       DB      17T      ; x=091        ;=1.784v
 F15C      11        2545       DB      17T      ; x=092        ;=1.804v
 F15D      12        2546       DB      18T      ; x=093        ;=1.824v
 F15E      12        2547       DB      18T      ; x=094        ;=1.843v
 F15F      12        2548       DB      18T      ; x=095        ;=1.863v
 F160      12        2549       DB      18T      ; x=096        ;=1.882v
 F161      12        2550       DB      18T      ; x=097        ;=1.902v
 F162      13        2551       DB      19T      ; x=098        ;=1.922v
 F163      13        2552       DB      19T      ; x=099        ;=1.941v
 F164      13        2553       DB      19T      ; x=100        ;=1.961v
 F165      13        2554       DB      19T      ; x=101        ;=1.980v
 F166      13        2555       DB      19T      ; x=102        ;=2.000v
 F167      14        2556       DB      20T      ; x=103        ;=2.020v
 F168      14        2557       DB      20T      ; x=104        ;=2.039v
 F169      14        2558       DB      20T      ; x=105        ;=2.059v
 F16A      14        2559       DB      20T      ; x=106        ;=2.078v
 F16B      14        2560       DB      20T      ; x=107        ;=2.098v
 F16C      14        2561       DB      20T      ; x=108        ;=2.118v
 F16D      15        2562       DB      21T      ; x=109        ;=2.137v
 F16E      15        2563       DB      21T      ; x=110        ;=2.157v
 F16F      15        2564       DB      21T      ; x=111        ;=2.176v
 F170      15        2565       DB      21T      ; x=112        ;=2.196v
 F171      15        2566       DB      21T      ; x=113        ;=2.216v
 F172      16        2567       DB      22T      ; x=114        ;=2.235v
 F173      16        2568       DB      22T      ; x=115        ;=2.255v
 F174      16        2569       DB      22T      ; x=116        ;=2.275v
 F175      16        2570       DB      22T      ; x=117        ;=2.294v
 F176      16        2571       DB      22T      ; x=118        ;=2.314v
 F177      17        2572       DB      23T      ; x=119        ;=2.333v
 F178      17        2573       DB      23T      ; x=120        ;=2.353v
 F179      17        2574       DB      23T      ; x=121        ;=2.373v
 F17A      17        2575       DB      23T      ; x=122        ;=2.392v
 F17B      17        2576       DB      23T      ; x=123        ;=2.412v
 F17C      18        2577       DB      24T      ; x=124        ;=2.431v
 F17D      18        2578       DB      24T      ; x=125        ;=2.451v
 F17E      18        2579       DB      24T      ; x=126        ;=2.471v
 F17F      18        2580       DB      24T      ; x=127        ;=2.490v
 F180      18        2581       DB      24T      ; x=128        ;=2.510v
 F181      19        2582       DB      25T      ; x=129        ;=2.529v
 F182      19        2583       DB      25T      ; x=130        ,=2.549v
 F183      19        2584       DB      25T      ; x=131        ;=2.569v
 F184      19        2585       DB      25T      ; x=132        ;=2.588v
 F185      19        2586       DB      25T      ; x=133        ;=2.608v
 F186      1A        2587       DB      26T      ; x=134        ;=2.627v
 F187      1A        2588       DB      26T      ; x=135        ;=2.647v
 F188      1A        2589       DB      26T      ; x=136        ;=2.667v
 F189      1A        2590       DB      26T      ; x=137        ;=2.686v
 F18A      1A        2591       DB      26T      ; x=138        ;=2.706v
 F18B      1B        2592       DB      27T      ; x=139        ;=2.725v
 F18C      1B        2593       DB      27T      ; x=140        ;=2.745v
 F18D      1B        2594       DB      27T      ; x=141        ;=2.765v
 F18E      1B        2595       DB      27T      ; x=142        ;=2.784v
 F18F      1B        2596       DB      27T      ; x=143        ;=2.804v
 F190      1C        2597       DB      28T      ; x=144        ;=0.824v
 F191      1C        2598       DB      28T      ; x=145        ;=2.843v
 F192      1C        2599       DB      28T      ; x=146        ;=2.863v
 F193      1C        2600       DB      28T      ; x=147        ;=2.882v
 F194      1C        2601       DB      28T      ; x=148        ;=2.902v
 F195      1D        2602       DB      29T      ; x=149        ;=2.922v
 F196      1D        2603       DB      29T      ; x=150        ;=2.941v
 F197      1D        2604       DB      29T      ; x=151        ;=2.961v
 F198      1D        2605       DB      29T      ; x=152        ;=2.980v
 F199      1D        2606       DB      29T      ; x=153        ;=3.000v
 F19A      1D        2607       DB      29T      ; x=154        ;=3.020v
 F19B      1E        2608       DB      30T      ; x=155        ;=3.039v
 F19C      1E        2609       DB      30T      ; x=156        ;=3.059v
 F19D      1E        2610       DB      30T      ; x=157        ;=3.078v
 F19E      1E        2611       DB      30T      ; x=158        ;=3.098v
 F19F      1E        2612       DB      30T      ; x=159        ;=3.118v
 F1A0      1F        2613       DB      31T      ; x=160        ;=3.137v
 F1A1      1F        2614       DB      31T      ; x=161        ;=3.157v
 F1A2      1F        2615       DB      31T      ; x=162        ;=3.176v
 F1A3      1F        2616       DB      31T      ; x=163        ;=3.196v
 F1A4      1F        2617       DB      31T      ; x=164        ;=3.216v
 F1A5      20        2618       DB      32T      ; x=165        ;=3.235v
 F1A6      20        2619       DB      32T      ; x=166        ;=3.255v
 F1A7      20        2620       DB      32T      ; x=167        ;=3.275v
 F1A8      20        2621       DB      32T      ; x=168        ;=3.294v
 F1A9      20        2622       DB      32T      ; x=169        ;=3.314v
 F1AA      21        2623       DB      33T      ; x=170        ;=3.333v
 F1AB      21        2624       DB      33T      ; x=171        ;=3.353v
 F1AC      21        2625       DB      33T      ; x=172        ;=3.373v
 F1AD      21        2626       DB      33T      ; x=173        ;=3.392v
 F1AE      21        2627       DB      33T      ; x=174        ;=3.412v
 F1AF      22        2628       DB      34T      ; x=175        ;=3.431v
 F1B0      22        2629       DB      34T      ; x=176        ;=3.451v
 F1B1      22        2630       DB      34T      ; x=177        ;=3.471v
 F1B2      22        2631       DB      34T      ; x=178        ;=3.490v
 F1B3      22        2632       DB      34T      ; x=179        ;=3.510v
 F1B4      23        2633       DB      35T      ; x=180        ;=3.529v
 F1B5      23        2634       DB      35T      ; x=181        ;=3.549v
 F1B6      23        2635       DB      35T      ; x=182        ;=3.569v
 F1B7      23        2636       DB      35T      ; x=183        ;=3.588v
 F1B8      23        2637       DB      35T      ; x=184        ;=3.608v
 F1B9      24        2638       DB      36T      ; x=185        ;=3.627v
 F1BA      24        2639       DB      36T      ; x=186        ;=3.647v
 F1BB      24        2640       DB      36T      ; x=187        ;=3.667v
 F1BC      24        2641       DB      36T      ; x=188        ;=3.686v
 F1BD      24        2642       DB      36T      ; x=189        ;=3.706v
 F1BE      25        2643       DB      37T      ; x=190        ;=3.725v
 F1BF      25        2644       DB      37T      ; x=191        ;=3.745v
 F1C0      25        2645       DB      37T      ; x=192        ;=3.765v
 F1C1      25        2646       DB      37T      ; x=193        ;=3.784v
 F1C2      25        2647       DB      37T      ; x=194        ;=3.804v
 F1C3      25        2648       DB      37T      ; x=195        ;=3.824v
 F1C4      26        2649       DB      38T      ; x=196        ;=3.843v
 F1C5      26        2650       DB      38T      ; x=197        ;=3.863v
 F1C6      26        2651       DB      38T      ; x=198        ;=3.882v
 F1C7      26        2652       DB      38T      ; x=199        ;=3.902v
 F1C8      26        2653       DB      38T      ; x=200        ;=3.922v
 F1C9      27        2654       DB      39T      ; x=201        ;=3.941v
 F1CA      27        2655       DB      39T      ; x=202        ;=3.961v
 F1CB      27        2656       DB      39T      ; x=203        ;=3.980v
 F1CC      27        2657       DB      39T      ; x=204        ;=4.000v
 F1CD      27        2658       DB      39T      ; x=205        ;=4.020v
 F1CE      28        2659       DB      40T      ; x=206        ;=4.039v
 F1CF      29        2660       DB      41T      ; x=207        ;=4.059v
 F1D0      29        2661       DB      41T      ; x=208        ;=4.078v
 F1D1      29        2662       DB      41T      ; x=209        ;=4.098v
 F1D2      29        2663       DB      41T      ; x=210        ;=4.118v
 F1D3      2A        2664       DB      42T      ; x=211        ;=4.137v
 F1D4      2A        2665       DB      42T      ; x=212        ;=4.157v
 F1D5      2A        2666       DB      42T      ; x=213        ;=4.176v
 F1D6      2A        2667       DB      42T      ; x=214        ;=4.196v
 F1D7      2A        2668       DB      42T      ; x=215        ;=4.216v
 F1D8      2B        2669       DB      43T      ; x=216        ;=4.235v
 F1D9      2B        2670       DB      43T      ; x=217        ;=4.255v
 F1DA      2B        2671       DB      43T      ; x=218        ;=4.275v
 F1DB      2B        2672       DB      43T      ; x=219        ;=4.294v
 F1DC      2B        2673       DB      43T      ; x=220        ;=4.314v
 F1DD      2C        2674       DB      44T      ; x=221        ;=4.333v
 F1DE      2C        2675       DB      44T      ; x=222        ;=4.353v
 F1DF      2C        2676       DB      44T      ; x=223        ;=4.373v
 F1E0      2C        2677       DB      44T      ; x=224        ;=4.392v
 F1E1      2C        2678       DB      44T      ; x=225        ;=4.412v
 F1E2      2D        2679       DB      45T      ; x=226        ;=4.431v
 F1E3      2D        2680       DB      45T      ; x=227        ;=4.451v
 F1E4      2D        2681       DB      45T      ; x=228        ;=4.471v
 F1E5      2D        2682       DB      45T      ; x=229        ;=4.490v
 F1E6      2D        2683       DB      45T      ; x=230        ;=4.510v
 F1E7      2E        2684       DB      46T      ; x=231        ;=4.529v
 F1E8      2E        2685       DB      46T      ; x=232        ;=4.549v
 F1E9      2E        2686       DB      46T      ; x=233        ;=4.569v
 F1EA      2E        2687       DB      46T      ; x=234        ;=4.588v
 F1EB      2E        2688       DB      46T      ; x=235        ;=4.608v
 F1EC      2E        2689       DB      46T      ; x=236        ;=4.627v
 F1ED      2F        2690       DB      47T      ; x=237        ;=4.647v
 F1EE      2F        2691       DB      47T      ; x=238        ;=4.667v
 F1EF      2F        2692       DB      47T      ; x=239        ;=4.686v
 F1F0      2F        2693       DB      47T      ; x=240        ;=4.706v
 F1F1      2F        2694       DB      47T      ; x=241        ;=4.725v
 F1F2      30        2695       DB      48T      ; x=242        ;=4.745v
 F1F3      30        2696       DB      48T      ; x=243        ;=4.765v
 F1F4      30        2697       DB      48T      ; x=244        ;=4.784v
 F1F5      30        2698       DB      48T      ; x=245        ;=4.804v
 F1F6      30        2699       DB      48T      ; x=246        ;=4.824v
 F1F7      31        2700       DB      49T      ; x=247        ;=4.843v
 F1F8      31        2701       DB      49T      ; x=248        ;=4.863v
 F1F9      31        2702       DB      49T      ; x=249        ;=4.882v
 F1FA      31        2703       DB      49T      ; x=250        ;=4.902v
 F1FB      31        2704       DB      49T      ; x=251        ;=4.922v
 F1FC      32        2705       DB      50T      ; x=252        ;=4.941v
 F1FD      32        2706       DB      50T      ; x=253        ;=4.961v
 F1FE      32        2707       DB      50T      ; x=254        ;=4.980v
 F1FF      32        2708       DB      50T      ; x=255        ;=5.000v
                     2709  
                     2710  
                     2711  ;***************************************************************************
                     2712  ; - Start of bootloader-defined jump table/vector
                     2713  ;***************************************************************************
                     2714  
 FAC3                2715       org     $FAC3              ; start bootloader-defined jump table/vector
                     2716                                  ;(64195)
 FAC3      12        2717       db      $12                ; scbr regi init value
 FAC4      01        2718       db      %00000001          ; config1
 FAC5      01        2719       db      %00000001          ; config2
 FAC6      8100      2720       dw      {rom_start + 256}  ; megasquirt code start
 FAC8      FB00      2721       dw      $FB00              ; bootloader start(64256)
                     2722  
                     2723  ;****************************************************************************
                     2724  ; - Vector table (origin vec_timebase)
                     2725  ;****************************************************************************
                     2726  
 FACA      CC        2727          db      $CC
 FACB      84A3      2728       dw      Dummy          ;Time Base Vector
 FACD      CC        2729          db      $CC
 FACE      848E      2730       dw      ADC_ISR        ;ADC Conversion Complete
 FAD0      CC        2731          db      $CC
 FAD1      84A3      2732       dw      Dummy          ;Keyboard Vector
 FAD3      CC        2733          db      $CC
 FAD4      8463      2734       dw      SCITX_ISR      ;SCI Transmit Vector
 FAD6      CC        2735          db      $CC
 FAD7      83E2      2736       dw      SCIRCV_ISR     ;SCI Receive Vector
 FAD9      CC        2737          db      $CC
 FADA      84A3      2738       dw      Dummy          ;SCI Error Vecotr
 FADC      CC        2739          db      $CC
 FADD      84A3      2740       dw      Dummy          ;SPI Transmit Vector
 FADF      CC        2741          db      $CC
 FAE0      84A3      2742       dw      Dummy          ;SPI Receive Vector
 FAE2      CC        2743          db      $CC
 FAE3      84A3      2744       dw      Dummy          ;TIM2 Overflow Vector
 FAE5      CC        2745          db      $CC
 FAE6      84A3      2746       dw      Dummy          ;TIM2 Ch1 Vector
 FAE8      CC        2747          db      $CC
 FAE9      8353      2748       dw      TIM2CH0_ISR    ;TIM2 Ch0 Vector
 FAEB      CC        2749          db      $CC
 FAEC      84A3      2750       dw      Dummy          ;TIM1 Overflow Vector
 FAEE      CC        2751          db      $CC
 FAEF      84A3      2752       dw      Dummy          ;TIM1 Ch1 Vector
 FAF1      CC        2753          db      $CC
 FAF2      84A3      2754       dw      Dummy          ;TIM1 Ch0 Vector
 FAF4      CC        2755          db      $CC
 FAF5      84A3      2756       dw      Dummy          ;PLL Vector
 FAF7      CC        2757          db      $CC
 FAF8      84A3      2758       dw      Dummy          ;IRQ Vector
 FAFA      CC        2759          db      $CC
 FAFB      84A3      2760       dw      Dummy          ;SWI Vector
 FAFD      CC        2761          db      $CC
 FAFE      8256      2762       dw      Start          ;Reset Vector
                     2763  
 FB00                2764       end
                     2765  
                     2766   

 Symbol Table 

ACK              0002
ACKK             0002
ACQ              0005
ADCC             0002
ADCH0            0000
ADCH1            0001
ADCH2            0002
ADCH3            0003
ADCH4            0004
ADCLK            003E
ADCO             0005
ADCWAIT          8303
ADC_ISR          848E
ADC_LOOKUPS      8335
ADICLK           0004
ADIV0            0005
ADIV1            0006
ADIV2            0007
ADR              003D
ADSCR            003C
ADSEL            004E
ADSEL_OK         8381
AIACCNTP         0056
AIACCNTS         0057
AIEN             0006
ASCII_CR         000D
ASCII_LF         000A
AUTO             0007
BAT              0042
BATVOLT          F000
BCFE             0007
BCS              0004
BKF              0001
BLANK1           0058
BLANK2           0059
BLANK3           005A
BLANK4           005B
BLANK5           005C
BLANK6           005D
BLANK7           005E
BLANK8           005F
BOOT             FBBB
BOOT1            FBD9
BOOT2            FBE0
BOOT3            FBFC
BOOT4            FC4A
BOOT5            FCBE
BOOT6            FCC6
BOOT7            FCCC
BOOTDONE         FBE6
BOOTDONE1        FBE9
BOOTDONE2        FBEB
BOOTEND          FDF8
BOOTPROG         FC04
BOOTPROG1        FC07
BOOTPROG2        FC14
BOOTPROG3        FC2D
BOOTPROG4        FC31
BOOTPROG5        FC42
BOOTPROG6        FC47
BOOTRESET        FB08
BOOTRESET1       FB59
BOOTRESET2       FB75
BOOTRESET3       FB7E
BOOTRESET4       FB87
BOOTRESET5       FB98
BOOTRESET6       FBA5
BOOTRESETUSER    FBA5
BOOT_START       FB00
BRKA             0006
BRKE             0007
BRKH             FE09
BRKL             FE0A
BRKSCR           FE0B
BUS7372800       FB00
BUS8003584       FB04
CGMCHANGE        FB39
CHECK_TXCMD      83F9
CHXF             0007
CHXIE            0006
CHXMAX           0000
CLK100K          0001
CMD_ERASE        0057
CMD_EXIT         0058
CMD_HELP         0048
CMD_HELP1        001F
CMD_PROGRAM      0050
CMD_UPGRADE      0055
COCO             0007
CONFIG1          001F
CONFIG2          001E
CONT_TX          8477
COP              0005
COPCTL           FFFF
COUNT            0040
CPHA             0003
CPOL             0004
DDRA             0004
DDRB             0005
DDRC             0006
DDRD             0007
DDRE             000C
DEC_IACP_CNTR    835E
DEC_IACP_DONE    8364
DEC_IACS_DONE    836A
DELAY            FD39
DELAY1           FD3A
DELAY2           FD3C
DMARE            0005
DMATE            0004
DONE_RCV         8461
DONE_XFER        848C
DO_IACP          8396
DO_IACS          83A6
DUMMY            84A3
ELSXA            0002
ELSXB            0003
ENSCI            0006
ERASE            0002
ERASEFLASH       FC5C
ERASEFLASH1      FC5F
ERASERAMSIZE     003B
ERRIE            0006
FE               0001
FEIE             0001
FIRE_ADC         8377
FLASHPROGRAM     FD44
FLASHPROGRAM1    FD4E
FLASHPROGRAM2    FD7F
FLASH_ERASED     00FF
FLASH_FIRST      0043
FLASH_LAST       0045
FLASH_PAGE       0080
FLASH_PROTECT    00F6
FLASH_ROW        0040
FLBPR            FF7E
FLCR             FE08
GETCHAR          FC6A
GETHEXBYTE       FCD2
GETHEXBYTE1      FCEA
GETHEXBYTE2      FCEC
GETSREC          FC73
GETSREC1         FC78
GETSREC1A        FC80
GETSREC2         FC92
GETSREC3         FCA7
GETSREC4         FCBB
HVEN             0008
IACCNTP          0054
IACCNTRL         F100
IACCNTS          0055
IACONP           0004
IACONS           0005
IACP             0043
IACPWMP          0004
IACPWMS          0005
IACPWP           0046
IACPWS           0047
IACP_CHK_DONE    8324
IACP_DONE        83A6
IACS             0044
IACS_CHK_DONE    832F
IACS_DONE        83B6
IDLE             0004
ILAD             0003
ILIE             0004
ILOP             0004
ILTY             0002
IMASK            0001
IMASKK           0001
INC_CMS          83CC
INC_CUS          836A
INC_MS           8389
INC_MSX20        83C0
INC_MSX5         83B6
INC_S            83D8
INIT_CONFIG1     0001
INIT_CONFIG2     0001
INIT_FIRST       8000
INIT_LAST        FB00
INIT_SCBR        0012
INIT_SCC1        0040
INIT_SCC2        000C
INIT_STACK       01EC
INPUTS           0048
INT1             FE04
INT2             FE05
INT3             FE06
INTKBIER         001B
INTKBSCR         001A
INTSCR           001D
IN_A_OR_C_MODE   8470
IN_Q_MODE        8474
IRQF             0003
ISHEX            FCF6
ISHEX1           FD06
ISNTHEX          FD08
KBIE0            0000
KBIE1            0001
KBIE2            0002
KBIE3            0003
KBIE4            0004
KBIE5            0005
KBIE6            0006
KBIE7            0007
KEYF             0003
LOCK             0006
LOOPCHK_DONE     8319
LOOPCNTR         0053
LOOPER           830F
LOOPFRQ          0003
LOOPS            0007
LVI              0001
LVIOUT           0007
LVISR            FE0C
M                0004
MASS             0004
MASSERASE        FD09
MASSERASE1       FD0D
MASSERASE2       FD30
MODE             0000
MODEK            0000
MODE_A           8411
MODE_C           8421
MODE_I           8451
MODE_Q           8441
MODE_V           8431
MODF             0004
MODFEN           0002
MODRST           0002
MS               004A
MSG_COMPLETE     FDB4
MSG_ERROR        FDCE
MSG_HELLO        FD88
MSG_HELP         FD90
MSG_NORESET      FDE0
MSG_WAITING      FDBF
MSG_WHAT         FDD7
MSX100           004D
MSX20            004C
MSX5             004B
MSXA             0004
MSXB             0005
MS_RAM_END       0060
MS_RAM_SIZE      0020
MS_RAM_START     0040
MS_RF_END        0060
MS_RF_END_F      E022
MS_RF_SIZE       0000
MS_RF_START      0060
MS_RF_START_F    E022
MS_TOTAL_RAM_SIZ 0020
NEIE             0002
NF               0002
NOT_MS           8374
NO_ADC_PASS      8351
NO_IACP          83A2
NO_IACS          83B2
OR               0003
ORIE             0003
OVRF             0005
PBWC             0037
PCTL             0036
PE               0000
PEIE             0000
PEN              0001
PGM              0001
PIN              0006
PLLF             0006
PLLIE            0007
PLLON            0005
PLLSET           FB3D
PLLWAIT          FB4D
PLL_WAIT         826E
PMDS             003B
PMRS             003A
PMSH             0038
PMSL             0039
POR              0007
PORTA            0000
PORTB            0001
PORTC            0002
PORTD            0003
PORTE            0008
PRE0             0002
PRE1             0003
PRINTSTRING      FBF8
PRINTSTRING1     FBF3
PROGRAMRAM       000B
PROGRAMRAMSIZE   004F
PS0              0000
PS1              0001
PS2              0002
PTAPUE           000D
PTCPUE           000E
PTDPUE           000F
PTY              0000
PUTCHAR          FB53
PUTSTRING        FBED
R8               0007
RAM_EXEC         01ED
RAM_LAST         023F
RAM_START        0040
RE               0002
REVNUM           E000
ROLL_ADSEL       837F
ROM_LAST         FDFF
ROM_START        8000
RPF              0000
RWU              0001
RXOFFSET         0052
SBFCR            FE03
SBK              0000
SBSR             FE00
SBSW             0001
SCBR             0019
SCC1             0013
SCC2             0014
SCC3             0015
SCDR             0018
SCIRCV_ISR       83E2
SCITX_ISR        8463
SCRF             0005
SCRIE            0005
SCS1             0016
SCS2             0017
SCTE             0007
SCTIE            0007
SECH             0040
SECL             0041
SET_LOOPCHK      8317
SIGNATURE        E001
SPCR             0010
SPDR             0012
SPE              0001
SPMSTR           0005
SPR0             0000
SPR1             0001
SPRF             0007
SPRIE            0007
SPSCR            0011
SPTE             0003
SPTIE            0000
SPWOM            0002
SRECADDR         0007
SRECCHKSUM       0002
SRECCOUNT        0001
SRECSIZE         0006
SRECTYPE         0005
SREDDATA         0008
SRSR             FE01
START            8256
STB_ADC          82FB
SUBAR            FE02
T1CH0H           0026
T1CH0L           0027
T1CH1H           0029
T1CH1L           002A
T1CNTH           0021
T1CNTL           0022
T1MODH           0023
T1MODL           0024
T1SC             0020
T1SC0            0025
T1SC1            0028
T2CH0H           0031
T2CH0L           0032
T2CH1H           0034
T2CH1L           0035
T2CNTH           002C
T2CNTL           002D
T2MODH           002E
T2MODL           002F
T2SC             002B
T2SC0            0030
T2SC1            0033
T8               0006
TACK             0003
TBCR             001C
TBIE             0002
TBIF             0007
TBON             0001
TBR0             0004
TBR1             0005
TBR2             0006
TC               0006
TCIE             0006
TE               0003
TEMP_SP          0041
TIM2CH0_ISR      8353
TIM2CH0_ISR_DONE 83E0
TOF              0007
TOHEX            FCED
TOHEX1           FCF5
TOIE             0006
TOVX             0001
TRST             0004
TSTOP            0005
TURN_ON_INTS     830E
TXCNT            004F
TXGOAL           0050
TXINV            0005
TXMODE           0051
TXMODE_5         83F1
TXMODE_7         83F1
USER_ADC         FACD
USER_CONFIG1     FAC4
USER_CONFIG2     FAC5
USER_FIRST       FAC6
USER_IRQ         FAF7
USER_KEYBOARD    FAD0
USER_LAST        FAC8
USER_PLL         FAF4
USER_RESET       FAFD
USER_SCBR        FAC3
USER_SCIERR      FAD9
USER_SCIRX       FAD6
USER_SCITX       FAD3
USER_SPIRX       FADF
USER_SPITX       FADC
USER_SWI         FAFA
USER_TIM1CH0     FAF1
USER_TIM1CH1     FAEE
USER_TIM1OV      FAEB
USER_TIM2CH0     FAE8
USER_TIM2CH1     FAE5
USER_TIM2OV      FAE2
USER_TIMEBASE    FACA
USX100           0049
VEC_ADC          FFDE
VEC_IRQ          FFFA
VEC_KBD          FFE0
VEC_PLL          FFF8
VEC_RESET        FFFE
VEC_SCIERR       FFE6
VEC_SCIRX        FFE4
VEC_SCITX        FFE2
VEC_SPIRX        FFEA
VEC_SPITX        FFE8
VEC_SWI          FFFC
VEC_TIM1CH0      FFF6
VEC_TIM1CH1      FFF4
VEC_TIM1OV       FFF2
VEC_TIM2CH0      FFF0
VEC_TIM2CH1      FFEE
VEC_TIM2OV       FFEC
VEC_TIMEBASE     FFDC
VOLTS            0045
VPR0             0000
VPR1             0001
WAKE             0003
